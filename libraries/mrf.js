"use strict";
var Capabilities;
(function (Capabilities) {
    Capabilities["REL1XX"] = "REL1XX";
    Capabilities["FORKING"] = "FORKING";
    Capabilities["PRECONDITION"] = "PRECONDITION";
    Capabilities["PEM"] = "PEM";
    Capabilities["UPDATE"] = "UPDATE";
})(Capabilities || (Capabilities = {}));
var Annotype;
(function (Annotype) {
    Annotype["CONNECT"] = "CONNECT";
    Annotype["RINGING"] = "RING";
})(Annotype || (Annotype = {}));
var CallPollActionType;
(function (CallPollActionType) {
    CallPollActionType["Accept"] = "accept";
    CallPollActionType["Forward"] = "forward";
    CallPollActionType["Reject"] = "reject";
})(CallPollActionType || (CallPollActionType = {}));
var CallStartActionType;
(function (CallStartActionType) {
    CallStartActionType[CallStartActionType["Abort"] = 0] = "Abort";
    CallStartActionType[CallStartActionType["Forward"] = 1] = "Forward";
    CallStartActionType[CallStartActionType["RejectMrf"] = 2] = "RejectMrf";
})(CallStartActionType || (CallStartActionType = {}));
var MediaOperationActionType;
(function (MediaOperationActionType) {
    MediaOperationActionType["PerformMediaOperation"] = "performMediaOperation";
})(MediaOperationActionType || (MediaOperationActionType = {}));
var MediaOperationContentType;
(function (MediaOperationContentType) {
    MediaOperationContentType["MSML"] = "application/msml+xml";
})(MediaOperationContentType || (MediaOperationContentType = {}));
;
;
function SendINFOPromptandCollect(session, event, localParams) {
    var mrf_used = {
        "announcement": "default",
        "collect": {
            "cleardb": "true",
            "edt": "1s",
            "fdt": "3s",
            "idt": "2s",
            "iterate": "1"
        },
        "play": {
            "barge": "true",
            "maxtime": "11s",
            "interval": "1",
            "cleardb": "true",
            "offset": "0",
            "audioiterate": "1",
            "audiouri": "file:///appl/wav/tictac.wav"
        },
        "pattern": {
            "digits": "[1-2]",
            "format": "regex"
        }
    };
    var content = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<msml  version=\"1.1\">\n<dialogstart name=\"dialognamedefault\" target=\"conn:";
    content = content + session["mrf"]["downStreamToTag"];
    content = content + "\" type=\"application/moml+xml\">\n";
    var collect = false;
    if (session["mrf"]["collect"] != null) {
        mrf_used["collect"] = session["mrf"]["collect"];
        mrf_used["pattern"] = session["mrf"]["pattern"];
        mrf_used["play"] = session["mrf"]["play"];
        collect = true;
    }
    else {
        mrf_used["play"] = session["mrf"]["play"];
        collect = false;
    }
    if (collect == true) {
        content = content + "<collect  cleardb=\"" + mrf_used["collect"]["cleardb"] + "\" edt=\"" + mrf_used["collect"]["edt"] + "\" fdt=\"" + mrf_used["collect"]["fdt"] + "\" idt=\"" + mrf_used["collect"]["idt"] + "\"  iterate=\"" + mrf_used["collect"]["iterate"] + "\">\n";
        content = content + "<play barge=\"" + mrf_used["play"]["barge"] + "\"> maxtime=\"" + mrf_used["play"]["maxtime"] + "\" <audio uri=\"" + mrf_used["play"]["audiouri"] + "\"/> </play>\n";
        content = content + "<pattern digits=\"" + mrf_used["pattern"]["digits"] + "\">  <send target=\"source\" event=\"done\" namelist=\"dtmf.digits dtmf.end\"/> </pattern>\n";
        content = content + "<noinput> <send target=\"source\" event=\"done\" namelist=\"dtmf.end\"/> </noinput>\n";
        content = content + "<nomatch> <send target=\"source\" event=\"done\" namelist=\"dtmf.end\"/> </nomatch>\n";
        content = content + "</collect>\n";
    }
    else {
        content = content + "<play barge=\"" + mrf_used["play"]["barge"] + "\" maxtime=\"" + mrf_used["play"]["maxtime"] + "\" interval=\"" + mrf_used["play"]["interval"] + "\" cleardb=\"" + mrf_used["play"]["cleardb"] + "\" offset=\"" + mrf_used["play"]["offset"] + "\">\n";
        content = content + "<audio uri=\"" + mrf_used["play"]["audiouri"] + "\"" + "\" iterate=\"" + mrf_used["play"]["iterate"] + "\"/>\n";
        content = content + "<playexit>\n<exit namelist=\"play.end play.amt\"/>\n</playexit>\n";
        content = content + "</play>";
    }
    content = content + "</dialogstart>\n</msml>\n";
    var outevent = {
        "callid": session["fsm-id"],
        "event-type": "sip",
        "queue": "TASV4_1",
        "id": 2,
        "action": {
            "legaction": "performMediaOperation",
            "performMediaOperation": {
                "ContentType": "application/msml+xml",
                "Content": content
            },
            "type": 3
        },
        "event-name": "sip.media.playAnnouncement",
        "eventname": "callEarlyAnswered",
        "session": session["fsm-id"]
    };
    return outevent;
}
function inputvalidation(session, event, localParams) {
    var log = session.log;
    try {
        if (session["s_SIPInvite"] != null) {
            if (session["s_SIPInvite"]["event-type"] !== null && (session["s_SIPInvite"]["event-type"] === "sip" || session["s_SIPInvite"]["event-type"] === "occp")) {
                if (session["s_SIPInvite"]["event-name"] !== null && session["s_SIPInvite"]["event-name"] === "sip.callStart.NONE")
                    log.debug("got sip invite");
                else
                    return "error.input.sipinviteincorrecteventname";
            }
            else {
                return "error.input.sipinviteincorrecteventtype";
            }
        }
        else {
            return "error.input.sipinvitemissing";
        }
        if (session["mrf"] != null) {
            if (session["mrf"]["earlydialog"] != null) {
                log.debug("mrf earlydialog present and {}", session["mrf"]["earlydialog"]);
            }
            else {
                session["mrf"]["earlydialog"] = true;
                log.debug("mrf earlydialog not present - use default");
            }
        }
        else {
            log.debug("mrf object not present - use default");
            session["mrf"]["earlydialog"] = true;
        }
        return session["mrf"]["earlydialog"];
    }
    catch (e) {
        log.debug("Log.inputvalidation: {}", e);
        return "error.exception";
    }
}
function armMRFevents(sessionData, eventData, localParams) {
    var ret;
    var status2;
    var events;
    events = events || {};
    events.InfoPollEvent = "null";
    events.SuccessResponsePollEvent = "null";
    events.RawContentPollEvent = "test/test";
    var headerVars;
    headerVars = headerVars || {};
    headerVars.disableSendDefaultReason = "Disabled";
    headerVars.disableSendNoAnswerReason = "Disabled";
    var ringingTones;
    ringingTones = ringingTones || [];
    var comf;
    comf = comf || {};
    comf.anno_name = "comfort";
    comf.anno_type = Annotype.CONNECT;
    var ring;
    ring = ring || {};
    ring.anno_name = "ringing";
    ring.anno_type = Annotype.RINGING;
    ringingTones.push(comf, ring);
    var capabilities = sessionData.inCapabilities;
    if (capabilities != null) {
        capabilities.push(Capabilities.PEM);
        capabilities.push(Capabilities.FORKING);
        capabilities.push(Capabilities.UPDATE);
        capabilities.push(Capabilities.INFO);
        sessionData.outCapabilities = JSON.stringify(capabilities);
    }
    sessionData.events = JSON.stringify(events);
    sessionData.headerrulevar = JSON.stringify(headerVars);
    sessionData.headerrulesselect = "SipServiceSpecificRulesSet";
    sessionData.ringingtones = JSON.stringify(ringingTones);
    sessionData.upstreamCapabilities = JSON.stringify([]);
    return "success";
}
function handle200OKINVITE(session, event, localParams) {
    var log = session.log;
    try {
        var eventData = localParams.message;
        session["mrf"]["headerrulevar=null"];
        session["mrf"]["headerrulesselect"] = null;
        session["mrf"]["ringingtones"] = null;
        var pollAction = void 0;
        pollAction = pollAction || {};
        pollAction.type = CallPollActionType.Accept;
        session.sendAction = JSON.stringify(pollAction);
        session["mrf"]["time200OKINVITE"] = Math.floor(new Date() / 1000);
        var to = eventData.SIP.To;
        if (to != null) {
            log.debug("received from MRF to tag:{}", to);
            session["mrf"]["callstate"] = "MRFCONNECTED200OK";
            session["mrf"]["downStreamToTag"] = to.tag;
            return "success";
        }
        else {
            log.debug("received from MRF no to tag:{}", to);
            return "error.nototag";
        }
    }
    catch (e) {
        log.debug("handle200OKINVITE Log: {}", e);
        return "error.exception";
    }
}
function handle200OKINFO(session, event, localParams) {
    var log = session.log;
    try {
        session["mrf"]["time200OKINFO"] = Math.floor(new Date() / 1000);
        session["mrf"]["callstate"] = "MRFCONNECTED";
        if (event["event-name"] == "sip.mediaOperationNotification.*") {
            if (event.event["type"] == "200") {
                if (event.SIP.content.json.msml.result.description == "OK") {
                    log.debug("handle200OKINFO:Recevied 200OKINFO and its ok");
                    session["mrf"]["dtmfdigits"] = "initialized";
                    return "received.OK";
                }
                else {
                    log.debug("handle200OKINFO:Recevied 200OKINFO and its NOT ok {}", event.SIP.content.json.msml.result.description);
                    return "received.NOK";
                }
            }
            else if (event.event["type"] == "INFO") {
                if (event.SIP.content.json.msml.event.name != null && event.SIP.content.json.msml.event.name.size() > 1) {
                    for (var i = 0; i <= event.SIP.content.json.msml.event.name.size() - 1; i++) {
                        log.debug("handle200OKINFO:index and event-name {} - {}", i, event.SIP.content.json.msml.event.name.get(i));
                        if (event.SIP.content.json.msml.event.name.get(i).equals("dtmf.digits")) {
                            log.debug("handle200OKINFO:received dtmf.digits as {}", event.SIP.content.json.msml.event.value[i - 1]);
                            session["mrf"]["dtmfdigits"] = event.SIP.content.json.msml.event.value[i - 1];
                        }
                        else if (event.SIP.content.json.msml.event.name.get(i).equals("dtmf.end")) {
                            log.debug("handle200OKINFO:received dtmf.end");
                        }
                        else if (event.SIP.content.json.msml.event.name.get(i).equals("msml.dialog.exit")) {
                            log.debug("handle200OKINFO:received msml.dialog.exit - return with MRF dialog closed.");
                            return "mrfdialog.closed";
                        }
                        else {
                            log.debug("handle200OKINFO:received other event name");
                        }
                    }
                }
                log.debug("handle200OKINFO:Return the decoded dtmf.digits: {}", session["mrf"]["dtmfdigits"]);
                return session["mrf"]["dtmfdigits"];
            }
            else {
                return "unexpectedeventtype." + event.event["type"];
            }
        }
    }
    catch (e) {
        log.debug("handle200OKINFO:Log: {}", e);
        return "error.exception";
    }
}
function mrfreturn(session, event, localParams) {
    return "dtmf.digit." + session["mrf"]["dtmfdigits"];
}
function callAnswered(session, event, localParams) {
    var log = session.log;
    try {
        session["mrf"]["callstate"] = "ANSWERED";
        session["mrf"]["answertime"] = Math.floor(new Date() / 1000);
        return "success";
    }
    catch (e) {
        log.debug("Log: {}", e);
        return "error.exception";
    }
}
function checkDisconnectReason(session, event, localParams) {
    var log = session.log;
    try {
        session["mrf"]["callstate"] = "ConnectError";
        session["mrf"]["connecterrortime"] = Math.floor(new Date() / 1000);
        var eventsStack = event['events-stack'];
        if (eventsStack != null && eventsStack.size() > 0) {
            for (var i = eventsStack.size() - 1; i >= 0; i--) {
                if (eventsStack.get(i).equals("leg.timeout") && i >= (eventsStack.size() - 2)) {
                    session.loginfo = session.loginfo + "TIMEOUT;";
                    return "error.mrf.connect.timeout";
                }
            }
        }
    }
    catch (e) {
        log.debug("Log: {}", e);
        return "error.mrf.connect.exception";
    }
    return "error.mrf.connect.others";
}
function setrelease(session, event, localParams) {
    var log = session.log;
    try {
        session["mrf"]["callstate"] = "Released";
        session["mrf"]["releasetime"] = Math.floor(new Date() / 1000);
        return "success";
    }
    catch (e) {
        log.debug("Log: {}", e);
        return "error.release";
    }
}
function prepareCallRouting(session, eventData, localParams) {
    var ret;
    ret = ret || {};
    ret.resultCode = "success";
    var status2;
    var events;
    events = events || {};
    events.InfoPollEvent = "null";
    events.SuccessResponsePollEvent = "null";
    events.RawContentPollEvent = "test/test";
    var headerVars;
    headerVars = headerVars || {};
    headerVars.disableSendDefaultReason = "Disabled";
    headerVars.disableSendNoAnswerReason = "Disabled";
    var ringingTones;
    ringingTones = ringingTones || [];
    var comf;
    comf = comf || {};
    comf.anno_name = "comfort";
    comf.anno_type = Annotype.CONNECT;
    var ring;
    ring = ring || {};
    ring.anno_name = "ringing";
    ring.anno_type = Annotype.RINGING;
    ringingTones.push(comf, ring);
    var capabilities = sessionData.inCapabilities;
    if (capabilities != null) {
        capabilities.push(Capabilities.PEM);
        capabilities.push(Capabilities.FORKING);
        sessionData.outCapabilities = JSON.stringify(capabilities);
    }
    session.events = JSON.stringify(events);
    session.headerrulevar = JSON.stringify(headerVars);
    session.headerrulesselect = "SipServiceSpecificRulesSet";
    session.ringingtones = JSON.stringify(ringingTones);
    session.upstreamCapabilities = JSON.stringify([]);
    status2 = "success";
    return ret;
}
//# sourceMappingURL=data:application/json;base64,