"use strict";
var Capabilities;
(function (Capabilities) {
    Capabilities["REL1XX"] = "REL1XX";
    Capabilities["FORKING"] = "FORKING";
    Capabilities["PRECONDITION"] = "PRECONDITION";
    Capabilities["PEM"] = "PEM";
    Capabilities["UPDATE"] = "UPDATE";
})(Capabilities || (Capabilities = {}));
var Annotype;
(function (Annotype) {
    Annotype["CONNECT"] = "CONNECT";
    Annotype["RINGING"] = "RING";
})(Annotype || (Annotype = {}));
var CallPollActionType;
(function (CallPollActionType) {
    CallPollActionType["Accept"] = "accept";
    CallPollActionType["Forward"] = "forward";
    CallPollActionType["Reject"] = "reject";
})(CallPollActionType || (CallPollActionType = {}));
var CallStartActionType;
(function (CallStartActionType) {
    CallStartActionType[CallStartActionType["Abort"] = 0] = "Abort";
    CallStartActionType[CallStartActionType["Forward"] = 1] = "Forward";
    CallStartActionType[CallStartActionType["RejectMrf"] = 2] = "RejectMrf";
})(CallStartActionType || (CallStartActionType = {}));
var MediaOperationActionType;
(function (MediaOperationActionType) {
    MediaOperationActionType["PerformMediaOperation"] = "performMediaOperation";
})(MediaOperationActionType || (MediaOperationActionType = {}));
var MediaOperationContentType;
(function (MediaOperationContentType) {
    MediaOperationContentType["MSML"] = "application/msml+xml";
})(MediaOperationContentType || (MediaOperationContentType = {}));
;
;
function inputvalidation(session, event, localParams) {
    var log = session.log;
    try {
        if (session["s_SIPInvite"] != null) {
            if (session["s_SIPInvite"]["event-type"] !== null && (session["s_SIPInvite"]["event-type"] === "sip" || session["s_SIPInvite"]["event-type"] === "occp")) {
                if (session["s_SIPInvite"]["event-name"] !== null && session["s_SIPInvite"]["event-name"] === "sip.callStart.NONE")
                    log.debug("got sip invite");
                else
                    return "error.input.sipinviteincorrecteventname";
            }
            else {
                return "error.input.sipinviteincorrecteventtype";
            }
        }
        else {
            return "error.input.sipinvitemissing";
        }
        if (event["announcement"] != null) {
            log.debug("announcement: {}", event["announcement"]);
            session["mrf"]["announcement"] = event["announcement"];
        }
        else {
            return "error.input.actionmissing";
        }
        if ((event["action"] != null) && ((event["action"] === "promptandcollect") || (event["action"] === "playannouncement"))) {
            log.debug("action: {}", event["action"]);
            if (event["action"] === "promptandcollect")
                session["mrf"]["action"] = "promptandcollect";
            else if (event["action"] === "playannouncement")
                session["mrf"]["action"] = "playannouncement";
            else
                return "error.input.actionincorrect";
        }
        else {
            return "error.input.actionmissing";
        }
        if (event["earlydialog"] != null) {
            log.debug("earlydialog: {}", event["earlydialog"]);
            if (event["earlydialog"] === true) {
                session["mrf"]["earlydialog"] = true;
                return "true";
            }
            else if (event["earlydialog"] === false) {
                session["mrf"]["earlydialog"] = false;
                return "false";
            }
            else {
                return "error.input.earlydialogincorrect";
            }
        }
        else {
            return "error.input.earlydialog";
        }
    }
    catch (e) {
        log.debug("Log: {}", e);
        return "error.exception";
    }
}
function handle200OKINVITE(session, event, localParams) {
    var log = session.log;
    try {
        var eventData = localParams.message;
        session["mrf"]["headerrulevar=null"];
        session["mrf"]["headerrulesselect"] = null;
        session["mrf"]["ringingtones"] = null;
        var pollAction = void 0;
        pollAction = pollAction || {};
        pollAction.type = CallPollActionType.Accept;
        session["mrf"]["sendAction"] = JSON.stringify(pollAction);
        session["mrf"]["time200OKINVITE"] = Math.floor(new Date() / 1000);
        var to = eventData.SIP.To;
        if (to != null) {
            log.debug("received from MRF to tag:{}", to);
            session["mrf"]["callstate"] = "MRFCONNECTED200OK";
            session["mrf"]["downStreamToTag"] = to.tag;
            return "success";
        }
        else {
            log.debug("received from MRF no to tag:{}", to);
            return "error.nototag";
        }
    }
    catch (e) {
        log.debug("Log: {}", e);
        return "error.exception";
    }
}
function handle200OKINFO(session, event, localParams) {
    var log = session.log;
    try {
        session["mrf"]["time200OKINFO"] = Math.floor(new Date() / 1000);
        session["mrf"]["callstate"] = "MRFCONNECTED";
        if (event.SIP.content.json.msml.event.name[2] != null) {
            if (event.SIP.content.json.msml.event.name[2] == "dtmf.digits") {
                log.debug("Got DTMF digits;");
                if (event.SIP.content.json.msml.event.value[1] != null) {
                    session["mrf"]["dtmfdigit"] = event.SIP.content.json.msml.event.value[1];
                }
                else {
                    session["mrf"]["dtmfdigit"] = "0";
                }
            }
            else {
                log.debug("No DTMF digits;");
            }
        }
    }
    catch (e) {
        log.debug("Log: {}", e);
        return "error.exception";
    }
    return session["mrf"]["dtmfdigit"];
}
function callAnswered(session, event, localParams) {
    var log = session.log;
    try {
        session["mrf"]["callstate"] = "ANSWERED";
        session["mrf"]["answertime"] = Math.floor(new Date() / 1000);
        return "success";
    }
    catch (e) {
        log.debug("Log: {}", e);
        return "error.exception";
    }
}
function checkDisconnectReason(session, event, localParams) {
    var log = session.log;
    try {
        session["mrf"]["callstate"] = "ConnectError";
        session["mrf"]["connecterrortime"] = Math.floor(new Date() / 1000);
        var eventsStack = event['events-stack'];
        if (eventsStack != null && eventsStack.size() > 0) {
            for (var i = eventsStack.size() - 1; i >= 0; i--) {
                if (eventsStack.get(i).equals("leg.timeout") && i >= (eventsStack.size() - 2)) {
                    session.loginfo = session.loginfo + "TIMEOUT;";
                    return "error.mrf.connect.timeout";
                }
            }
        }
    }
    catch (e) {
        log.debug("Log: {}", e);
        return "error.mrf.connect.exception";
    }
    return "error.mrf.connect.others";
}
function setrelease(session, event, localParams) {
    var log = session.log;
    try {
        session["mrf"]["callstate"] = "Released";
        session["mrf"]["releasetime"] = Math.floor(new Date() / 1000);
        return "success";
    }
    catch (e) {
        log.debug("Log: {}", e);
        return "error.release";
    }
}
//# sourceMappingURL=data:application/json;base64,