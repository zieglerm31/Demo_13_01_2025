"use strict";
;
function createXML(session, event, localParams) {
    var x;
    try {
        session.s_xml1 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><sms><user><username>SendSMSwhileOff</username><password>Aa87!6179</password></user><source>019</source><destinations><phone>";
        session.s_xml2 = "</phone></destinations><message>test</message><response>0</response></sms>";
        session.s_xml = session.s_xml1 + session.s_normalizedNumber + session.s_xml2;
        return "success";
    }
    catch (e) {
        return "exception." + e;
    }
}
function checkHttpResponse(session, event, localParams) {
    var log = session.log;
    log.debug("Event received:{}", event);
    var bodyStr = event.body;
    session.restResponse = 0;
    session.callstate = "HTTPRESPONSE_INIT";
    session.CalledPartyOverwritten = "sip:+4390123123@test.com";
    try {
        if (session.s_SIPInvite.SIP.From.address.uri.user.endsWith("0")) {
            return "scenario.0";
        }
        else if (session.s_SIPInvite.SIP.From.address.uri.user.endsWith("4")) {
            return "scenario.4";
        }
        else if (session.s_SIPInvite.SIP.From.address.uri.user.endsWith("5")) {
            return "scenario.5";
        }
        else {
            log.debug("checkHttpResponse.uri:{}", session.s_SIPInvite.SIP.From.address.uri.user);
            return "scenario.undefined";
        }
        var body = event.body;
        session.restResponse = body.status;
        if (session.restResponse == "0") {
            session.callstate = "HTTPRESPONSE_CONNECT";
            if (body.paramX.match(session.Callingipv4)) {
                session.CalledPartyOverwritten = "sip:+4390123123@test.com";
                session.loginfo = session.loginfo + "ParamX.match.OverwriteDestination. connect to " + session.CalledPartyOverwritten + ";";
            }
            else if (body.paramY.match(session.Callingipv4)) {
                session.CalledPartyOverwritten = "sip:+4390123123@test.com";
                session.loginfo = session.loginfo + "ParamY.match.OverwriteDestination. connect to " + session.CalledPartyOverwritten + ";";
            }
            else {
                session.CalledPartyOverwritten = session.CalledParty;
                session.loginfo = session.loginfo + "Param.do not match.Connect to Initial CalledParty;";
            }
        }
        else if (session.restResponse == "4") {
            session.callstate = "HTTPRESPONSE_MRFPC";
        }
        else if (session.restResponse == "5") {
            session.callstate = "HTTPRESPONSE_MRFBYE";
        }
        else {
            session.callstate = "HTTPRESPONSE_UNKNOWN" + session.callstate;
        }
    }
    catch (e) {
        log.error("checkHttpResponse Exception {}", e);
        session.callstate = "HTTPRESPONSE_EXCEPTION";
        session.restResponse = "exception." + e;
    }
    ;
    var callstateold = session.callstate;
    log.error("Call_{}:State_{}->{}+", session["trace-skey"], callstateold, session.callstate);
    session.loginfo = session.loginfo + session.callstate + ";";
    return "scenario." + session.restResponse;
}
function failureHttpResponse(session, event, localParams) {
    var eventname = event["event-name"];
    if (event["event-name"].startsWith("sip")) {
        session.loginfo = session.loginfo + "SIP-event received while waiting for Http response (" + eventname + ");";
        return "sip.callended";
    }
    else if (event["event-name"].startsWith("http")) {
        session.loginfo = session.loginfo + "HttpFailure response received (" + event.body.status + ");";
    }
    else {
        session.loginfo = session.loginfo + "No SIP or HTTP event received while waiting for Http response (" + eventname + ");";
    }
    return "success";
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxDQUFDO0FBRUQsU0FBUyxTQUFTLENBQUMsT0FBYSxFQUFFLEtBQVcsRUFBRSxXQUFnQjtJQUU1RCxJQUFJLENBQVUsQ0FBQztJQUNmLElBQUc7UUFDRixPQUFPLENBQUMsTUFBTSxHQUFHLHlLQUF5SyxDQUFDO1FBQzNMLE9BQU8sQ0FBQyxNQUFNLEdBQUcsNEVBQTRFLENBQUM7UUFDOUYsT0FBTyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO1FBQzdFLE9BQU8sU0FBUyxDQUFDO0tBQ2pCO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDWCxPQUFPLFlBQVksR0FBRyxDQUFDLENBQUM7S0FDeEI7QUFFSixDQUFDO0FBRUQsU0FBUyxpQkFBaUIsQ0FBQyxPQUFhLEVBQUUsS0FBVyxFQUFFLFdBQWdCO0lBQ25FLElBQUksR0FBRyxHQUFTLE9BQU8sQ0FBQyxHQUFHLENBQUM7SUFDNUIsR0FBRyxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsRUFBQyxLQUFLLENBQUMsQ0FBQztJQUNyQyxJQUFJLE9BQU8sR0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO0lBQ3ZCLE9BQU8sQ0FBQyxZQUFZLEdBQUUsQ0FBQyxDQUFDO0lBQ3hCLE9BQU8sQ0FBQyxTQUFTLEdBQUcsbUJBQW1CLENBQUM7SUFDeEMsT0FBTyxDQUFDLHNCQUFzQixHQUFDLDBCQUEwQixDQUFBO0lBQ3pELElBQUk7UUFPQSxJQUFLLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUc7WUFDL0QsT0FBTyxZQUFZLENBQUM7U0FDdkI7YUFBTSxJQUFLLE9BQU8sQ0FBQyxX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VyxFQUFFLFdBQWdCO0lBQ3JFLElBQUksU0FBUyxHQUFZLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUM3QyxJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDdkMsT0FBTyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxHQUFDLHNEQUFzRCxHQUFDLFNBQVMsR0FBQyxJQUFJLENBQUM7UUFFeEcsT0FBTyxlQUFlLENBQUE7S0FDekI7U0FBTSxJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDL0MsT0FBTyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxHQUFDLGlDQUFpQyxHQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFDLElBQUksQ0FBQztLQUM5RjtTQUFNO1FBQ0gsT0FBTyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxHQUFDLGlFQUFpRSxHQUFDLFNBQVMsR0FBQyxJQUFJLENBQUM7S0FDdEg7SUFFRCxPQUFPLFNBQVMsQ0FBQztBQUNyQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy9NQUlOQkxPQ0tcbjtcclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVhNTChzZXNzaW9uIDogYW55LCBldmVudCA6IGFueSwgbG9jYWxQYXJhbXM6IGFueSApe1xyXG5cclxuICAgbGV0IHggOiBzdHJpbmc7XHJcbiAgIHRyeXtcclxuICAgIHNlc3Npb24uc194bWwxID0gXCI8P3htbCB2ZXJzaW9uPVxcXCIxLjBcXFwiIGVuY29kaW5nPVxcXCJVVEYtOFxcXCI/PjxzbXM+PHVzZXI+PHVzZXJuYW1lPlNlbmRTTVN3aGlsZU9mZjwvdXNlcm5hbWU+PHBhc3N3b3JkPkFhODchNjE3OTwvcGFzc3dvcmQ+PC91c2VyPjxzb3VyY2U+MDE5PC9zb3VyY2U+PGRlc3RpbmF0aW9ucz48cGhvbmU+XCI7XHJcbiAgICBzZXNzaW9uLnNfeG1sMiA9IFwiPC9waG9uZT48L2Rlc3RpbmF0aW9ucz48bWVzc2FnZT50ZXN0PC9tZXNzYWdlPjxyZXNwb25zZT4wPC9yZXNwb25zZT48L3Ntcz5cIjtcclxuICAgIHNlc3Npb24uc194bWwgPSBzZXNzaW9uLnNfeG1sMSArIHNlc3Npb24uc19ub3JtYWxpemVkTnVtYmVyICsgc2Vzc2lvbi5zX3htbDI7XHJcbiAgICByZXR1cm4gXCJzdWNjZXNzXCI7XHJcbiAgIH0gY2F0Y2ggKGUpIHtcclxuICAgIHJldHVybiBcImV4Y2VwdGlvbi5cIiArIGU7XHJcbiAgIH1cclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNoZWNrSHR0cFJlc3BvbnNlKHNlc3Npb24gOiBhbnksIGV2ZW50IDogYW55LCBsb2NhbFBhcmFtczogYW55ICl7XHJcbiAgICBsZXQgbG9nIDogYW55ID0gc2Vzc2lvbi5sb2c7XHJcbiAgICBsb2cuZGVidWcoXCJFdmVudCByZWNlaXZlZDp7fVwiLGV2ZW50KTtcclxuICAgIGxldCBib2R5U3RyPWV2ZW50LmJvZHk7XHJcbiAgICBzZXNzaW9uLnJlc3RSZXNwb25zZSA9MDtcclxuICAgIHNlc3Npb24uY2FsbHN0YXRlICA9XCJIVFRQUkVTUE9OU0VfSU5JVFwiO1xyXG4gICAgc2Vzc2lvbi5DYWxsZWRQYXJ0eU92ZXJ3cml0dGVuPVwic2lwOis0MzkwMTIzMTIzQHRlc3QuY29tXCJcclxuICAgIHRyeSB7XHJcbiAgICAgICAgLy9sZXQgYm9keSA9IEpTT04ucGFyc2UoYm9keVN0cik7XHJcblxyXG4gICAgICAgIC8vZm9yIHRoZSBwb2Mgb25seVxyXG4gICAgICAgIC8vaWYgUlVSSSBlbmRzIHdpdGggNCAtPiBzY2VuYXJpbzRcclxuICAgICAgICAvL2lmIFJVUkkgZW5kcyB3aXRoIDUgLT4gc2NlbmFyaW81XHJcbiAgICAgICAgLy9pZiBSVVJJIGVuZHMgd2l0aCAwIC0+IHNjZW5hcmlvMFxyXG4gICAgICAgIGlmICggc2Vzc2lvbi5zX1NJUEludml0ZS5TSVAuRnJvbS5hZGRyZXNzLnVyaS51c2VyLmVuZHNXaXRoKFwiMFwiKSApIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwic2NlbmFyaW8uMFwiO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoIHNlc3Npb24uc19TSVBJbnZpdGUuU0lQLkZyb20uYWRkcmVzcy51cmkudXNlci5lbmRzV2l0aChcIjRcIikgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcInNjZW5hcmlvLjRcIjtcclxuICAgICAgICB9IGVsc2UgaWYgKCBzZXNzaW9uLnNfU0lQSW52aXRlLlNJUC5Gcm9tLmFkZHJlc3MudXJpLnVzZXIuZW5kc1dpdGgoXCI1XCIpICkge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJzY2VuYXJpby41XCI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbG9nLmRlYnVnKFwiY2hlY2tIdHRwUmVzcG9uc2UudXJpOnt9XCIsc2Vzc2lvbi5zX1NJUEludml0ZS5TSVAuRnJvbS5hZGRyZXNzLnVyaS51c2VyKTtcclxuICAgICAgICAgICAgcmV0dXJuIFwic2NlbmFyaW8udW5kZWZpbmVkXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG5cclxuICAgICAgICBsZXQgYm9keSA9IGV2ZW50LmJvZHk7XHJcbiAgICAgICAgc2Vzc2lvbi5yZXN0UmVzcG9uc2UgPSBib2R5LnN0YXR1cztcclxuICAgICAgICBpZiAoc2Vzc2lvbi5yZXN0UmVzcG9uc2U9PVwiMFwiKSB7XHJcbiAgICAgICAgICAgIHNlc3Npb24uY2FsbHN0YXRlICA9XCJIVFRQUkVTUE9OU0VfQ09OTkVDVFwiOyAgIFxyXG4gICAgICAgICAgICBpZiAoYm9keS5wYXJhbVgubWF0Y2goc2Vzc2lvbi5DYWxsaW5naXB2NCkpIHtcclxuICAgICAgICAgICAgICAgIHNlc3Npb24uQ2FsbGVkUGFydHlPdmVyd3JpdHRlbj1cInNpcDorNDM5MDEyMzEyM0B0ZXN0LmNvbVwiXHJcbiAgICAgICAgICAgICAgICBzZXNzaW9uLmxvZ2luZm8gPSBzZXNzaW9uLmxvZ2luZm8rXCJQYXJhbVgubWF0Y2guT3ZlcndyaXRlRGVzdGluYXRpb24uIGNvbm5lY3QgdG8gXCIrc2Vzc2lvbi5DYWxsZWRQYXJ0eU92ZXJ3cml0dGVuK1wiO1wiOyBcclxuICAgICAgICAgICAgfSAgZWxzZSBpZiAoYm9keS5wYXJhbVkubWF0Y2goc2Vzc2lvbi5DYWxsaW5naXB2NCkpIHtcclxuICAgICAgICAgICAgICAgIHNlc3Npb24uQ2FsbGVkUGFydHlPdmVyd3JpdHRlbj1cInNpcDorNDM5MDEyMzEyM0B0ZXN0LmNvbVwiXHJcbiAgICAgICAgICAgICAgICBzZXNzaW9uLmxvZ2luZm8gPSBzZXNzaW9uLmxvZ2luZm8rXCJQYXJhbVkubWF0Y2guT3ZlcndyaXRlRGVzdGluYXRpb24uIGNvbm5lY3QgdG8gXCIrc2Vzc2lvbi5DYWxsZWRQYXJ0eU92ZXJ3cml0dGVuK1wiO1wiOyBcclxuICAgICAgICAgICAgfSAgZWxzZSB7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgc2Vzc2lvbi5DYWxsZWRQYXJ0eU92ZXJ3cml0dGVuPXNlc3Npb24uQ2FsbGVkUGFydHk7XHJcbiAgICAgICAgICAgICAgICBzZXNzaW9uLmxvZ2luZm8gPSBzZXNzaW9uLmxvZ2luZm8rXCJQYXJhbS5kbyBub3QgbWF0Y2guQ29ubmVjdCB0byBJbml0aWFsIENhbGxlZFBhcnR5O1wiOyBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoc2Vzc2lvbi5yZXN0UmVzcG9uc2U9PVwiNFwiKSB7XHJcbiAgICAgICAgICAgIHNlc3Npb24uY2FsbHN0YXRlID1cIkhUVFBSRVNQT05TRV9NUkZQQ1wiO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoc2Vzc2lvbi5yZXN0UmVzcG9uc2U9PVwiNVwiKSB7XHJcbiAgICAgICAgICAgIHNlc3Npb24uY2FsbHN0YXRlID1cIkhUVFBSRVNQT05TRV9NUkZCWUVcIjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzZXNzaW9uLmNhbGxzdGF0ZSA9XCJIVFRQUkVTUE9OU0VfVU5LTk9XTlwiK3Nlc3Npb24uY2FsbHN0YXRlO1xyXG4gICAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICBsb2cuZXJyb3IoXCJjaGVja0h0dHBSZXNwb25zZSBFeGNlcHRpb24ge31cIixlKTtcclxuICAgICAgICBzZXNzaW9uLmNhbGxzdGF0ZSAgPVwiSFRUUFJFU1BPTlNFX0VYQ0VQVElPTlwiO1xyXG4gICAgICAgIHNlc3Npb24ucmVzdFJlc3BvbnNlID0gXCJleGNlcHRpb24uXCIgK2U7XHJcbiAgICB9O1xyXG5cclxuICAgIFxyXG4gICAgbGV0IGNhbGxzdGF0ZW9sZCA6c3RyaW5nID0gc2Vzc2lvbi5jYWxsc3RhdGU7ICAgIFxyXG4gICAgbG9nLmVycm9yKFwiQ2FsbF97fTpTdGF0ZV97fS0+e30rXCIsc2Vzc2lvbltcInRyYWNlLXNrZXlcIl0sY2FsbHN0YXRlb2xkLHNlc3Npb24uY2FsbHN0YXRlKTsgICBcclxuICAgIHNlc3Npb24ubG9naW5mbyA9IHNlc3Npb24ubG9naW5mbytzZXNzaW9uLmNhbGxzdGF0ZStcIjtcIjsgXHJcblxyXG4gICAgLy9zZXNzaW9uLkNhbGxlZFBhcnR5T3ZlcndyaXR0ZW49W1wic2lwOis0MDkwMTIzMTIzQHRlc3QuY29tXCIsXCJzaXA6KzQwOTAxMjMxMjRAdGVzdC5jb21cIl07XHJcblxyXG4gICAgcmV0dXJuIFwic2NlbmFyaW8uXCIrc2Vzc2lvbi5yZXN0UmVzcG9uc2U7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBmYWlsdXJlSHR0cFJlc3BvbnNlKHNlc3Npb24gOiBhbnksIGV2ZW50IDogYW55LCBsb2NhbFBhcmFtczogYW55ICl7ICAgICBcclxuICAgIGxldCBldmVudG5hbWU6IHN0cmluZz0gICBldmVudFtcImV2ZW50LW5hbWVcIl07XHJcbiAgICBpZiAoZXZlbnRbXCJldmVudC1uYW1lXCJdLnN0YXJ0c1dpdGgoXCJzaXBcIikpIHtcclxuICAgICAgICBzZXNzaW9uLmxvZ2luZm8gPSBzZXNzaW9uLmxvZ2luZm8rXCJTSVAtZXZlbnQgcmVjZWl2ZWQgd2hpbGUgd2FpdGluZyBmb3IgSHR0cCByZXNwb25zZSAoXCIrZXZlbnRuYW1lK1wiKTtcIjsgXHJcbiAgICAgICAgLy9ieXBhc3MgdGhlIFRFUklNQVRFIGNhbGwgaGFuZGxlciBhcyB0aGUgY2FsbCBpcyBhbHJlYWR5IHRlcm1pbmF0ZWRcclxuICAgICAgICByZXR1cm4gXCJzaXAuY2FsbGVuZGVkXCJcclxuICAgIH0gZWxzZSBpZiAoZXZlbnRbXCJldmVudC1uYW1lXCJdLnN0YXJ0c1dpdGgoXCJodHRwXCIpKSB7XHJcbiAgICAgICAgc2Vzc2lvbi5sb2dpbmZvID0gc2Vzc2lvbi5sb2dpbmZvK1wiSHR0cEZhaWx1cmUgcmVzcG9uc2UgcmVjZWl2ZWQgKFwiK2V2ZW50LmJvZHkuc3RhdHVzK1wiKTtcIjsgXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNlc3Npb24ubG9naW5mbyA9IHNlc3Npb24ubG9naW5mbytcIk5vIFNJUCBvciBIVFRQIGV2ZW50IHJlY2VpdmVkIHdoaWxlIHdhaXRpbmcgZm9yIEh0dHAgcmVzcG9uc2UgKFwiK2V2ZW50bmFtZStcIik7XCI7IFxyXG4gICAgfVxyXG4gICAgLy9yZXR1cm4gZXZlbnQuYm9keS5zdGF0dXM7XHJcbiAgICByZXR1cm4gXCJzdWNjZXNzXCI7XHJcbn1cclxuIl19