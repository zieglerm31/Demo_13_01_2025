"use strict";
;
function createXML(session, event, localParams) {
    var x;
    try {
        session.s_xml1 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><sms><user><username>SendSMSwhileOff</username><password>Aa87!6179</password></user><source>019</source><destinations><phone>";
        session.s_xml2 = "</phone></destinations><message>test</message><response>0</response></sms>";
        session.s_xml = session.s_xml1 + session.s_normalizedNumber + session.s_xml2;
        return "success";
    }
    catch (e) {
        return "exception." + e;
    }
}
function checkHttpResponse(session, event, localParams) {
    var log = session.log;
    log.debug("Event received:{}", event);
    var bodyStr = event.body;
    session.restResponse = 0;
    session.callstate = "HTTPRESPONSE_INIT";
    session.CalledPartyOverwritten = "sip:+4390123123@test.com";
    try {
        if (session.s_SIPInvite.SIP["R-URI"].address.uri.user.endsWith("0")) {
            return "scenario.0";
        }
        else if (session.s_SIPInvite.SIP["R-URI"].address.uri.user.endsWith("4")) {
            return "scenario.4";
        }
        else if (session.s_SIPInvite.SIP["R-URI"].address.uri.user.endsWith("5")) {
            return "scenario.5";
        }
        else {
            log.debug("checkHttpResponse.uri:{}", session.s_SIPInvite.SIP["R-URI"].address.uri.user);
            return "scenario.undefined";
        }
        var body = event.body;
        session.restResponse = body.status;
        if (session.restResponse == "0") {
            session.callstate = "HTTPRESPONSE_CONNECT";
            if (body.paramX.match(session.Callingipv4)) {
                session.CalledPartyOverwritten = "sip:+4390123123@test.com";
                session.loginfo = session.loginfo + "ParamX.match.OverwriteDestination. connect to " + session.CalledPartyOverwritten + ";";
            }
            else if (body.paramY.match(session.Callingipv4)) {
                session.CalledPartyOverwritten = "sip:+4390123123@test.com";
                session.loginfo = session.loginfo + "ParamY.match.OverwriteDestination. connect to " + session.CalledPartyOverwritten + ";";
            }
            else {
                session.CalledPartyOverwritten = session.CalledParty;
                session.loginfo = session.loginfo + "Param.do not match.Connect to Initial CalledParty;";
            }
        }
        else if (session.restResponse == "4") {
            session.callstate = "HTTPRESPONSE_MRFPC";
        }
        else if (session.restResponse == "5") {
            session.callstate = "HTTPRESPONSE_MRFBYE";
        }
        else {
            session.callstate = "HTTPRESPONSE_UNKNOWN" + session.callstate;
        }
    }
    catch (e) {
        log.error("checkHttpResponse Exception {}", e);
        session.callstate = "HTTPRESPONSE_EXCEPTION";
        session.restResponse = "exception." + e;
    }
    ;
    var callstateold = session.callstate;
    log.error("Call_{}:State_{}->{}+", session["trace-skey"], callstateold, session.callstate);
    session.loginfo = session.loginfo + session.callstate + ";";
    return "scenario." + session.restResponse;
}
function failureHttpResponse(session, event, localParams) {
    var eventname = event["event-name"];
    if (event["event-name"].startsWith("sip")) {
        session.loginfo = session.loginfo + "SIP-event received while waiting for Http response (" + eventname + ");";
        return "sip.callended";
    }
    else if (event["event-name"].startsWith("http")) {
        session.loginfo = session.loginfo + "HttpFailure response received (" + event.body.status + ");";
    }
    else {
        session.loginfo = session.loginfo + "No SIP or HTTP event received while waiting for Http response (" + eventname + ");";
    }
    return "success";
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxDQUFDO0FBRUQsU0FBUyxTQUFTLENBQUMsT0FBYSxFQUFFLEtBQVcsRUFBRSxXQUFnQjtJQUU1RCxJQUFJLENBQVUsQ0FBQztJQUNmLElBQUc7UUFDRixPQUFPLENBQUMsTUFBTSxHQUFHLHlLQUF5SyxDQUFDO1FBQzNMLE9BQU8sQ0FBQyxNQUFNLEdBQUcsNEVBQTRFLENBQUM7UUFDOUYsT0FBTyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO1FBQzdFLE9BQU8sU0FBUyxDQUFDO0tBQ2pCO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDWCxPQUFPLFlBQVksR0FBRyxDQUFDLENBQUM7S0FDeEI7QUFFSixDQUFDO0FBRUQsU0FBUyxpQkFBaUIsQ0FBQyxPQUFhLEVBQUUsS0FBVyxFQUFFLFdBQWdCO0lBQ25FLElBQUksR0FBRyxHQUFTLE9BQU8sQ0FBQyxHQUFHLENBQUM7SUFDNUIsR0FBRyxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsRUFBQyxLQUFLLENBQUMsQ0FBQztJQUNyQyxJQUFJLE9BQU8sR0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO0lBQ3ZCLE9BQU8sQ0FBQyxZQUFZLEdBQUUsQ0FBQyxDQUFDO0lBQ3hCLE9BQU8sQ0FBQyxTQUFTLEdBQUcsbUJBQW1CLENBQUM7SUFDeEMsT0FBTyxDQUFDLHNCQUFzQixHQUFDLDBCQUEwQixDQUFBO0lBQ3pELElBQUk7UUFPQSxJQUFLLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRztZQUNuRSxPQUFPLFlBQVksQ0FBQztTQUN2QjthQUFNLElBQUssT0FBTyxD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QixDQUFDLE9BQWEsRUFBRSxLQUFXLEVBQUUsV0FBZ0I7SUFDckUsSUFBSSxTQUFTLEdBQVksS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzdDLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUN2QyxPQUFPLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLEdBQUMsc0RBQXNELEdBQUMsU0FBUyxHQUFDLElBQUksQ0FBQztRQUV4RyxPQUFPLGVBQWUsQ0FBQTtLQUN6QjtTQUFNLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUMvQyxPQUFPLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLEdBQUMsaUNBQWlDLEdBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUMsSUFBSSxDQUFDO0tBQzlGO1NBQU07UUFDSCxPQUFPLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLEdBQUMsaUVBQWlFLEdBQUMsU0FBUyxHQUFDLElBQUksQ0FBQztLQUN0SDtJQUVELE9BQU8sU0FBUyxDQUFDO0FBQ3JCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvL01BSU5CTE9DS1xuO1xyXG5cclxuZnVuY3Rpb24gY3JlYXRlWE1MKHNlc3Npb24gOiBhbnksIGV2ZW50IDogYW55LCBsb2NhbFBhcmFtczogYW55ICl7XHJcblxyXG4gICBsZXQgeCA6IHN0cmluZztcclxuICAgdHJ5e1xyXG4gICAgc2Vzc2lvbi5zX3htbDEgPSBcIjw/eG1sIHZlcnNpb249XFxcIjEuMFxcXCIgZW5jb2Rpbmc9XFxcIlVURi04XFxcIj8+PHNtcz48dXNlcj48dXNlcm5hbWU+U2VuZFNNU3doaWxlT2ZmPC91c2VybmFtZT48cGFzc3dvcmQ+QWE4NyE2MTc5PC9wYXNzd29yZD48L3VzZXI+PHNvdXJjZT4wMTk8L3NvdXJjZT48ZGVzdGluYXRpb25zPjxwaG9uZT5cIjtcclxuICAgIHNlc3Npb24uc194bWwyID0gXCI8L3Bob25lPjwvZGVzdGluYXRpb25zPjxtZXNzYWdlPnRlc3Q8L21lc3NhZ2U+PHJlc3BvbnNlPjA8L3Jlc3BvbnNlPjwvc21zPlwiO1xyXG4gICAgc2Vzc2lvbi5zX3htbCA9IHNlc3Npb24uc194bWwxICsgc2Vzc2lvbi5zX25vcm1hbGl6ZWROdW1iZXIgKyBzZXNzaW9uLnNfeG1sMjtcclxuICAgIHJldHVybiBcInN1Y2Nlc3NcIjtcclxuICAgfSBjYXRjaCAoZSkge1xyXG4gICAgcmV0dXJuIFwiZXhjZXB0aW9uLlwiICsgZTtcclxuICAgfVxyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tIdHRwUmVzcG9uc2Uoc2Vzc2lvbiA6IGFueSwgZXZlbnQgOiBhbnksIGxvY2FsUGFyYW1zOiBhbnkgKXtcclxuICAgIGxldCBsb2cgOiBhbnkgPSBzZXNzaW9uLmxvZztcclxuICAgIGxvZy5kZWJ1ZyhcIkV2ZW50IHJlY2VpdmVkOnt9XCIsZXZlbnQpO1xyXG4gICAgbGV0IGJvZHlTdHI9ZXZlbnQuYm9keTtcclxuICAgIHNlc3Npb24ucmVzdFJlc3BvbnNlID0wO1xyXG4gICAgc2Vzc2lvbi5jYWxsc3RhdGUgID1cIkhUVFBSRVNQT05TRV9JTklUXCI7XHJcbiAgICBzZXNzaW9uLkNhbGxlZFBhcnR5T3ZlcndyaXR0ZW49XCJzaXA6KzQzOTAxMjMxMjNAdGVzdC5jb21cIlxyXG4gICAgdHJ5IHtcclxuICAgICAgICAvL2xldCBib2R5ID0gSlNPTi5wYXJzZShib2R5U3RyKTtcclxuXHJcbiAgICAgICAgLy9mb3IgdGhlIHBvYyBvbmx5XHJcbiAgICAgICAgLy9pZiBSVVJJIGVuZHMgd2l0aCA0IC0+IHNjZW5hcmlvNFxyXG4gICAgICAgIC8vaWYgUlVSSSBlbmRzIHdpdGggNSAtPiBzY2VuYXJpbzVcclxuICAgICAgICAvL2lmIFJVUkkgZW5kcyB3aXRoIDAgLT4gc2NlbmFyaW8wXHJcbiAgICAgICAgaWYgKCBzZXNzaW9uLnNfU0lQSW52aXRlLlNJUFtcIlItVVJJXCJdLmFkZHJlc3MudXJpLnVzZXIuZW5kc1dpdGgoXCIwXCIpICkge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJzY2VuYXJpby4wXCI7XHJcbiAgICAgICAgfSBlbHNlIGlmICggc2Vzc2lvbi5zX1NJUEludml0ZS5TSVBbXCJSLVVSSVwiXS5hZGRyZXNzLnVyaS51c2VyLmVuZHNXaXRoKFwiNFwiKSApIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwic2NlbmFyaW8uNFwiO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoIHNlc3Npb24uc19TSVBJbnZpdGUuU0lQW1wiUi1VUklcIl0uYWRkcmVzcy51cmkudXNlci5lbmRzV2l0aChcIjVcIikgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcInNjZW5hcmlvLjVcIjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsb2cuZGVidWcoXCJjaGVja0h0dHBSZXNwb25zZS51cmk6e31cIixzZXNzaW9uLnNfU0lQSW52aXRlLlNJUFtcIlItVVJJXCJdLmFkZHJlc3MudXJpLnVzZXIpO1xyXG4gICAgICAgICAgICByZXR1cm4gXCJzY2VuYXJpby51bmRlZmluZWRcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgIGxldCBib2R5ID0gZXZlbnQuYm9keTtcclxuICAgICAgICBzZXNzaW9uLnJlc3RSZXNwb25zZSA9IGJvZHkuc3RhdHVzO1xyXG4gICAgICAgIGlmIChzZXNzaW9uLnJlc3RSZXNwb25zZT09XCIwXCIpIHtcclxuICAgICAgICAgICAgc2Vzc2lvbi5jYWxsc3RhdGUgID1cIkhUVFBSRVNQT05TRV9DT05ORUNUXCI7ICAgXHJcbiAgICAgICAgICAgIGlmIChib2R5LnBhcmFtWC5tYXRjaChzZXNzaW9uLkNhbGxpbmdpcHY0KSkge1xyXG4gICAgICAgICAgICAgICAgc2Vzc2lvbi5DYWxsZWRQYXJ0eU92ZXJ3cml0dGVuPVwic2lwOis0MzkwMTIzMTIzQHRlc3QuY29tXCJcclxuICAgICAgICAgICAgICAgIHNlc3Npb24ubG9naW5mbyA9IHNlc3Npb24ubG9naW5mbytcIlBhcmFtWC5tYXRjaC5PdmVyd3JpdGVEZXN0aW5hdGlvbi4gY29ubmVjdCB0byBcIitzZXNzaW9uLkNhbGxlZFBhcnR5T3ZlcndyaXR0ZW4rXCI7XCI7IFxyXG4gICAgICAgICAgICB9ICBlbHNlIGlmIChib2R5LnBhcmFtWS5tYXRjaChzZXNzaW9uLkNhbGxpbmdpcHY0KSkge1xyXG4gICAgICAgICAgICAgICAgc2Vzc2lvbi5DYWxsZWRQYXJ0eU92ZXJ3cml0dGVuPVwic2lwOis0MzkwMTIzMTIzQHRlc3QuY29tXCJcclxuICAgICAgICAgICAgICAgIHNlc3Npb24ubG9naW5mbyA9IHNlc3Npb24ubG9naW5mbytcIlBhcmFtWS5tYXRjaC5PdmVyd3JpdGVEZXN0aW5hdGlvbi4gY29ubmVjdCB0byBcIitzZXNzaW9uLkNhbGxlZFBhcnR5T3ZlcndyaXR0ZW4rXCI7XCI7IFxyXG4gICAgICAgICAgICB9ICBlbHNlIHsgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBzZXNzaW9uLkNhbGxlZFBhcnR5T3ZlcndyaXR0ZW49c2Vzc2lvbi5DYWxsZWRQYXJ0eTtcclxuICAgICAgICAgICAgICAgIHNlc3Npb24ubG9naW5mbyA9IHNlc3Npb24ubG9naW5mbytcIlBhcmFtLmRvIG5vdCBtYXRjaC5Db25uZWN0IHRvIEluaXRpYWwgQ2FsbGVkUGFydHk7XCI7IFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChzZXNzaW9uLnJlc3RSZXNwb25zZT09XCI0XCIpIHtcclxuICAgICAgICAgICAgc2Vzc2lvbi5jYWxsc3RhdGUgPVwiSFRUUFJFU1BPTlNFX01SRlBDXCI7XHJcbiAgICAgICAgfSBlbHNlIGlmIChzZXNzaW9uLnJlc3RSZXNwb25zZT09XCI1XCIpIHtcclxuICAgICAgICAgICAgc2Vzc2lvbi5jYWxsc3RhdGUgPVwiSFRUUFJFU1BPTlNFX01SRkJZRVwiO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHNlc3Npb24uY2FsbHN0YXRlID1cIkhUVFBSRVNQT05TRV9VTktOT1dOXCIrc2Vzc2lvbi5jYWxsc3RhdGU7XHJcbiAgICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIGxvZy5lcnJvcihcImNoZWNrSHR0cFJlc3BvbnNlIEV4Y2VwdGlvbiB7fVwiLGUpO1xyXG4gICAgICAgIHNlc3Npb24uY2FsbHN0YXRlICA9XCJIVFRQUkVTUE9OU0VfRVhDRVBUSU9OXCI7XHJcbiAgICAgICAgc2Vzc2lvbi5yZXN0UmVzcG9uc2UgPSBcImV4Y2VwdGlvbi5cIiArZTtcclxuICAgIH07XHJcblxyXG4gICAgXHJcbiAgICBsZXQgY2FsbHN0YXRlb2xkIDpzdHJpbmcgPSBzZXNzaW9uLmNhbGxzdGF0ZTsgICAgXHJcbiAgICBsb2cuZXJyb3IoXCJDYWxsX3t9OlN0YXRlX3t9LT57fStcIixzZXNzaW9uW1widHJhY2Utc2tleVwiXSxjYWxsc3RhdGVvbGQsc2Vzc2lvbi5jYWxsc3RhdGUpOyAgIFxyXG4gICAgc2Vzc2lvbi5sb2dpbmZvID0gc2Vzc2lvbi5sb2dpbmZvK3Nlc3Npb24uY2FsbHN0YXRlK1wiO1wiOyBcclxuXHJcbiAgICAvL3Nlc3Npb24uQ2FsbGVkUGFydHlPdmVyd3JpdHRlbj1bXCJzaXA6KzQwOTAxMjMxMjNAdGVzdC5jb21cIixcInNpcDorNDA5MDEyMzEyNEB0ZXN0LmNvbVwiXTtcclxuXHJcbiAgICByZXR1cm4gXCJzY2VuYXJpby5cIitzZXNzaW9uLnJlc3RSZXNwb25zZTtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGZhaWx1cmVIdHRwUmVzcG9uc2Uoc2Vzc2lvbiA6IGFueSwgZXZlbnQgOiBhbnksIGxvY2FsUGFyYW1zOiBhbnkgKXsgICAgIFxyXG4gICAgbGV0IGV2ZW50bmFtZTogc3RyaW5nPSAgIGV2ZW50W1wiZXZlbnQtbmFtZVwiXTtcclxuICAgIGlmIChldmVudFtcImV2ZW50LW5hbWVcIl0uc3RhcnRzV2l0aChcInNpcFwiKSkge1xyXG4gICAgICAgIHNlc3Npb24ubG9naW5mbyA9IHNlc3Npb24ubG9naW5mbytcIlNJUC1ldmVudCByZWNlaXZlZCB3aGlsZSB3YWl0aW5nIGZvciBIdHRwIHJlc3BvbnNlIChcIitldmVudG5hbWUrXCIpO1wiOyBcclxuICAgICAgICAvL2J5cGFzcyB0aGUgVEVSSU1BVEUgY2FsbCBoYW5kbGVyIGFzIHRoZSBjYWxsIGlzIGFscmVhZHkgdGVybWluYXRlZFxyXG4gICAgICAgIHJldHVybiBcInNpcC5jYWxsZW5kZWRcIlxyXG4gICAgfSBlbHNlIGlmIChldmVudFtcImV2ZW50LW5hbWVcIl0uc3RhcnRzV2l0aChcImh0dHBcIikpIHtcclxuICAgICAgICBzZXNzaW9uLmxvZ2luZm8gPSBzZXNzaW9uLmxvZ2luZm8rXCJIdHRwRmFpbHVyZSByZXNwb25zZSByZWNlaXZlZCAoXCIrZXZlbnQuYm9keS5zdGF0dXMrXCIpO1wiOyBcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2Vzc2lvbi5sb2dpbmZvID0gc2Vzc2lvbi5sb2dpbmZvK1wiTm8gU0lQIG9yIEhUVFAgZXZlbnQgcmVjZWl2ZWQgd2hpbGUgd2FpdGluZyBmb3IgSHR0cCByZXNwb25zZSAoXCIrZXZlbnRuYW1lK1wiKTtcIjsgXHJcbiAgICB9XHJcbiAgICAvL3JldHVybiBldmVudC5ib2R5LnN0YXR1cztcclxuICAgIHJldHVybiBcInN1Y2Nlc3NcIjtcclxufVxyXG4iXX0=