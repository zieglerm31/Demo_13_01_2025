"use strict";
;
function normalization_1(session, event, localParams) {
    var log = session.log;
    try {
        var fromURI = void 0;
        session.s_initialSIP_lib = event;
        fromURI = event.SIP.From.address.uri.user;
        log.debug("Log From-1: {}", fromURI);
        session.s_normalizedNumber = fromURI.substring(3, 11);
        return "success";
    }
    catch (e) {
        log.debug("Log: {}", e);
        return "error";
    }
}
function extractAndCompare(session, event, localParams) {
    var log = session.log;
    try {
        var x = void 0;
        try {
            if (session.s_initialSIP.SIP["P-Access-Network-Info"].cellId != null)
                x = session.s_initialSIP.SIP["P-Access-Network-Info"].cellId;
            else
                return "error.PANIcellid.null";
        }
        catch (e) {
            return "error.noPANIcellid.exception";
        }
        if (x.substring(0, 5) == "42501") {
            session.w = "1";
            session.ann_name = "maxspeechtimeout.wav";
        }
        else if (x.substring(0, 5) == "42503") {
            session.w = "2";
            session.ann_name = "help.wav";
        }
        else {
            session.w = "3";
            session.ann_name = "error.wav";
        }
        return session.ann_name;
    }
    catch (e) {
        log.debug("extractAndCompare.Log: {}", e);
        return "error";
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxDQUFDO0FBQUEsU0FBUyxlQUFlLENBQUMsT0FBYSxFQUFFLEtBQVcsRUFBRSxXQUFnQjtJQUNuRSxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0lBRXRCLElBQUk7UUFDRCxJQUFJLE9BQU8sU0FBUyxDQUFDO1FBQ3JCLE9BQU8sQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFDakMsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQzFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDckMsT0FBTyxDQUFDLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRXRELE9BQU8sU0FBUyxDQUFDO0tBRW5CO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFFVCxHQUFHLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN4QixPQUFPLE9BQU8sQ0FBQztLQUNqQjtBQUNKLENBQUM7QUFJRCxTQUFTLGlCQUFpQixDQUFDLE9BQWEsRUFBRSxLQUFXLEVBQUUsV0FBZ0I7SUFDcEUsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztJQUV0QixJQUFJO1FBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUNmLElBQUk7WUFDRCxJQUFLLE9BQU8sQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUMsTUFBTSxJQUFJLElBQUk7Z0JBQ2xFLENBQUMsR0FBRSxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQTs7Z0JBRTNELE9BQU8sdUJBQXVCLENBQUM7U0FDcEM7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNULE9BQU8sOEJBQThCLENBQUM7U0FDeEM7UUFFRCxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFHLE9BQU8sRUFBRTtZQUM3QixPQUFPLENBQUMsQ0FBQyxHQUFDLEdBQUcsQ0FBQztZQUNkLE9BQU8sQ0FBQyxRQUFRLEdBQUMsc0JBQXNCLENBQUM7U0FDMUM7YUFBTSxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFHLE9BQU8sRUFBRTtZQUNwQyxPQUFPLENBQUMsQ0FBQyxHQUFDLEdBQUcsQ0FBQztZQUNkLE9BQU8sQ0FBQyxRQUFRLEdBQUMsVUFBVSxDQUFDO1NBQzlCO2FBQU07WUFDSixPQUFPLENBQUMsQ0FBQyxHQUFDLEdBQUcsQ0FBQztZQUNkLE9BQU8sQ0FBQyxRQUFRLEdBQUMsV0FBVyxDQUFDO1NBQy9CO1FBQ0QsT0FBTyxPQUFPLENBQUMsUUFBUSxDQUFDO0tBQzFCO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVCxHQUFHLENBQUMsS0FBSyxDQUFDLDJCQUEyQixFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzFDLE9BQU8sT0FBTyxDQUFDO0tBQ2pCO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vTUFJTkJMT0NLXG47ZnVuY3Rpb24gbm9ybWFsaXphdGlvbl8xKHNlc3Npb24gOiBhbnksIGV2ZW50IDogYW55LCBsb2NhbFBhcmFtczogYW55ICl7XG4gICBsZXQgbG9nID0gc2Vzc2lvbi5sb2c7XG5cbiAgIHRyeSB7XG4gICAgICBsZXQgZnJvbVVSSSA6IHN0cmluZztcbiAgICAgIHNlc3Npb24uc19pbml0aWFsU0lQX2xpYiA9IGV2ZW50O1xuICAgICAgZnJvbVVSSSA9IGV2ZW50LlNJUC5Gcm9tLmFkZHJlc3MudXJpLnVzZXI7ICAvLzk3MjUwNzAwMDExOFxuICAgICAgbG9nLmRlYnVnKFwiTG9nIEZyb20tMToge31cIiwgZnJvbVVSSSk7XG4gICAgICBzZXNzaW9uLnNfbm9ybWFsaXplZE51bWJlciA9IGZyb21VUkkuc3Vic3RyaW5nKDMsIDExKTtcblxuICAgICAgcmV0dXJuIFwic3VjY2Vzc1wiO1xuXG4gICB9IGNhdGNoIChlKSB7XG5cbiAgICAgIGxvZy5kZWJ1ZyhcIkxvZzoge31cIiwgZSk7XG4gICAgICByZXR1cm4gXCJlcnJvclwiO1xuICAgfVxufVxuXG5cblxuZnVuY3Rpb24gZXh0cmFjdEFuZENvbXBhcmUoc2Vzc2lvbiA6IGFueSwgZXZlbnQgOiBhbnksIGxvY2FsUGFyYW1zOiBhbnkgKXtcbiAgIGxldCBsb2cgPSBzZXNzaW9uLmxvZztcblxuICAgdHJ5IHtcbiAgICAgIGxldCB4IDogc3RyaW5nO1xuICAgICAgdHJ5IHtcbiAgICAgICAgIGlmICggc2Vzc2lvbi5zX2luaXRpYWxTSVAuU0lQW1wiUC1BY2Nlc3MtTmV0d29yay1JbmZvXCJdLmNlbGxJZCAhPSBudWxsKVxuICAgICAgICAgICAgeD0gc2Vzc2lvbi5zX2luaXRpYWxTSVAuU0lQW1wiUC1BY2Nlc3MtTmV0d29yay1JbmZvXCJdLmNlbGxJZFxuICAgICAgICAgZWxzZSBcbiAgICAgICAgICAgIHJldHVybiBcImVycm9yLlBBTkljZWxsaWQubnVsbFwiO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgcmV0dXJuIFwiZXJyb3Iubm9QQU5JY2VsbGlkLmV4Y2VwdGlvblwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoeC5zdWJzdHJpbmcoMCw1KSA9PVwiNDI1MDFcIikge1xuICAgICAgICAgc2Vzc2lvbi53PVwiMVwiO1xuICAgICAgICAgc2Vzc2lvbi5hbm5fbmFtZT1cIm1heHNwZWVjaHRpbWVvdXQud2F2XCI7XG4gICAgICB9IGVsc2UgaWYgKHguc3Vic3RyaW5nKDAsNSkgPT1cIjQyNTAzXCIpIHtcbiAgICAgICAgIHNlc3Npb24udz1cIjJcIjtcbiAgICAgICAgIHNlc3Npb24uYW5uX25hbWU9XCJoZWxwLndhdlwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgIHNlc3Npb24udz1cIjNcIjtcbiAgICAgICAgIHNlc3Npb24uYW5uX25hbWU9XCJlcnJvci53YXZcIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZXNzaW9uLmFubl9uYW1lO1xuICAgfSBjYXRjaCAoZSkge1xuICAgICAgbG9nLmRlYnVnKFwiZXh0cmFjdEFuZENvbXBhcmUuTG9nOiB7fVwiLCBlKTtcbiAgICAgIHJldHVybiBcImVycm9yXCI7XG4gICB9XG59XG4iXX0=