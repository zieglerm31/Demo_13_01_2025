"use strict";
;
function normalization_1(session, event, localParams) {
    var log = session.log;
    try {
        var fromURI = void 0;
        session.s_initialSIP_lib = event;
        fromURI = event.SIP.From.address.uri.user;
        log.debug("Log From-1: {}", fromURI);
        session.s_normalizedNumber = fromURI.substring(3, 11);
        return "success";
    }
    catch (e) {
        log.debug("Log: {}", e);
        return "error";
    }
}
function createXML(session, event, localParams) {
    var x;
    session.s_xml1 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><sms><user><username>SendSMSwhileOff</username><password>Aa87!6179</password></user><source>019</source><destinations><phone>";
    session.s_xml2 = "</phone></destinations><message>test</message><response>0</response></sms>";
    session.s_xml = session.xml1 + session.normalizedNumber + session.xml2;
    return "success";
}
function extractAndCompare(session, event, localParams) {
    var log = session.log;
    try {
        session["mrf"] = {};
        session["mrf"] = { "playannouncement": "annoTest", "action": "playannouncement", "earlydialog": true };
        var x = void 0;
        try {
            if (session.s_initialSIP.SIP["P-Access-Network-Info"].cellId != null)
                x = session.s_initialSIP.SIP["P-Access-Network-Info"].cellId;
            else
                return "error.PANIcellid.null";
        }
        catch (e) {
            return "error.noPANIcellid.exception";
        }
        if (x.substring(0, 5) == "42501") {
            session.w = "1";
            session.ann_name = "P3001";
        }
        else if (x.substring(0, 5) == "42503") {
            session.w = "2";
            session.ann_name = "P3002";
        }
        else {
            session.w = "3";
        }
        return session.w;
    }
    catch (e) {
        log.debug("extractAndCompare.Log: {}", e);
        return "error";
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxDQUFDO0FBQUEsU0FBUyxlQUFlLENBQUMsT0FBYSxFQUFFLEtBQVcsRUFBRSxXQUFnQjtJQUNuRSxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0lBRXRCLElBQUk7UUFDRCxJQUFJLE9BQU8sU0FBUyxDQUFDO1FBQ3JCLE9BQU8sQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFDakMsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQzFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDckMsT0FBTyxDQUFDLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRXRELE9BQU8sU0FBUyxDQUFDO0tBRW5CO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFFVCxHQUFHLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN4QixPQUFPLE9BQU8sQ0FBQztLQUNqQjtBQUNKLENBQUM7QUFHRCxTQUFTLFNBQVMsQ0FBQyxPQUFhLEVBQUUsS0FBVyxFQUFFLFdBQWdCO0lBRTVELElBQUksQ0FBVSxDQUFDO0lBQ2YsT0FBTyxDQUFDLE1BQU0sR0FBRSx5S0FBeUssQ0FBQztJQUUxTCxPQUFPLENBQUMsTUFBTSxHQUFFLDRFQUE0RSxDQUFDO0lBRTdGLE9BQU8sQ0FBQyxLQUFLLEdBQUUsT0FBTyxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztJQUV0RSxPQUFPLFNBQVMsQ0FBQztBQUVwQixDQUFDO0FBRUQsU0FBUyxpQkFBaUIsQ0FBQyxPQUFhLEVBQUUsS0FBVyxFQUFFLFdBQWdCO0lBQ3BFLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7SUFFdEIsSUFBSTtRQUdELE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBQyxFQUFFLENBQUM7UUFDbEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFFLEVBQUMsa0JBQWtCLEVBQUMsVUFBVSxFQUFDLFFBQVEsRUFBQyxrQkFBa0IsRUFBQyxhQUFhLEVBQUUsSUFBSSxFQUFDLENBQUM7UUFFaEcsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUNmLElBQUk7WUFDRCxJQUFLLE9BQU8sQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUMsTUFBTSxJQUFJLElBQUk7Z0JBQ2xFLENBQUMsR0FBRSxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQTs7Z0JBRTNELE9BQU8sdUJBQXVCLENBQUM7U0FDcEM7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNULE9BQU8sOEJBQThCLENBQUM7U0FDeEM7UUFFRCxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFHLE9BQU8sRUFDOUI7WUFDRyxPQUFPLENBQUMsQ0FBQyxHQUFDLEdBQUcsQ0FBQztZQUNkLE9BQU8sQ0FBQyxRQUFRLEdBQUMsT0FBTyxDQUFDO1NBQzNCO2FBQ0ksSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBRyxPQUFPLEVBQ25DO1lBQ0csT0FBTyxDQUFDLENBQUMsR0FBQyxHQUFHLENBQUM7WUFDZCxPQUFPLENBQUMsUUFBUSxHQUFDLE9BQU8sQ0FBQztTQUMzQjthQUNHO1lBQ0QsT0FBTyxDQUFDLENBQUMsR0FBQyxHQUFHLENBQUM7U0FDaEI7UUFDRCxPQUFPLE9BQU8sQ0FBQyxDQUFDLENBQUM7S0FDbkI7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUVULEdBQUcsQ0FBQyxLQUFLLENBQUMsMkJBQTJCLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDMUMsT0FBTyxPQUFPLENBQUM7S0FDakI7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy9NQUlOQkxPQ0tcbjtmdW5jdGlvbiBub3JtYWxpemF0aW9uXzEoc2Vzc2lvbiA6IGFueSwgZXZlbnQgOiBhbnksIGxvY2FsUGFyYW1zOiBhbnkgKXtcbiAgIGxldCBsb2cgPSBzZXNzaW9uLmxvZztcblxuICAgdHJ5IHtcbiAgICAgIGxldCBmcm9tVVJJIDogc3RyaW5nO1xuICAgICAgc2Vzc2lvbi5zX2luaXRpYWxTSVBfbGliID0gZXZlbnQ7XG4gICAgICBmcm9tVVJJID0gZXZlbnQuU0lQLkZyb20uYWRkcmVzcy51cmkudXNlcjsgIC8vOTcyNTA3MDAwMTE4XG4gICAgICBsb2cuZGVidWcoXCJMb2cgRnJvbS0xOiB7fVwiLCBmcm9tVVJJKTtcbiAgICAgIHNlc3Npb24uc19ub3JtYWxpemVkTnVtYmVyID0gZnJvbVVSSS5zdWJzdHJpbmcoMywgMTEpO1xuXG4gICAgICByZXR1cm4gXCJzdWNjZXNzXCI7XG5cbiAgIH0gY2F0Y2ggKGUpIHtcblxuICAgICAgbG9nLmRlYnVnKFwiTG9nOiB7fVwiLCBlKTtcbiAgICAgIHJldHVybiBcImVycm9yXCI7XG4gICB9XG59XG5cblxuZnVuY3Rpb24gY3JlYXRlWE1MKHNlc3Npb24gOiBhbnksIGV2ZW50IDogYW55LCBsb2NhbFBhcmFtczogYW55ICl7XG5cbiAgIGxldCB4IDogc3RyaW5nO1xuICAgc2Vzc2lvbi5zX3htbDE9IFwiPD94bWwgdmVyc2lvbj1cXFwiMS4wXFxcIiBlbmNvZGluZz1cXFwiVVRGLThcXFwiPz48c21zPjx1c2VyPjx1c2VybmFtZT5TZW5kU01Td2hpbGVPZmY8L3VzZXJuYW1lPjxwYXNzd29yZD5BYTg3ITYxNzk8L3Bhc3N3b3JkPjwvdXNlcj48c291cmNlPjAxOTwvc291cmNlPjxkZXN0aW5hdGlvbnM+PHBob25lPlwiO1xuXG4gICBzZXNzaW9uLnNfeG1sMj0gXCI8L3Bob25lPjwvZGVzdGluYXRpb25zPjxtZXNzYWdlPnRlc3Q8L21lc3NhZ2U+PHJlc3BvbnNlPjA8L3Jlc3BvbnNlPjwvc21zPlwiO1xuXG4gICBzZXNzaW9uLnNfeG1sPSBzZXNzaW9uLnhtbDEgKyBzZXNzaW9uLm5vcm1hbGl6ZWROdW1iZXIgKyBzZXNzaW9uLnhtbDI7XG5cbiAgIHJldHVybiBcInN1Y2Nlc3NcIjtcblxufVxuXG5mdW5jdGlvbiBleHRyYWN0QW5kQ29tcGFyZShzZXNzaW9uIDogYW55LCBldmVudCA6IGFueSwgbG9jYWxQYXJhbXM6IGFueSApe1xuICAgbGV0IGxvZyA9IHNlc3Npb24ubG9nO1xuXG4gICB0cnkge1xuICAgICAgLy9zZXQgaW5wdXQgcGFyYW1ldGVyc1xuICAgICAgLy9pbnRlcmltXG4gICAgICBzZXNzaW9uW1wibXJmXCJdPXt9O1xuICAgICAgc2Vzc2lvbltcIm1yZlwiXT0ge1wicGxheWFubm91bmNlbWVudFwiOlwiYW5ub1Rlc3RcIixcImFjdGlvblwiOlwicGxheWFubm91bmNlbWVudFwiLFwiZWFybHlkaWFsb2dcIjogdHJ1ZX07XG5cbiAgICAgIGxldCB4IDogc3RyaW5nO1xuICAgICAgdHJ5IHtcbiAgICAgICAgIGlmICggc2Vzc2lvbi5zX2luaXRpYWxTSVAuU0lQW1wiUC1BY2Nlc3MtTmV0d29yay1JbmZvXCJdLmNlbGxJZCAhPSBudWxsKVxuICAgICAgICAgICAgeD0gc2Vzc2lvbi5zX2luaXRpYWxTSVAuU0lQW1wiUC1BY2Nlc3MtTmV0d29yay1JbmZvXCJdLmNlbGxJZFxuICAgICAgICAgZWxzZSBcbiAgICAgICAgICAgIHJldHVybiBcImVycm9yLlBBTkljZWxsaWQubnVsbFwiO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgcmV0dXJuIFwiZXJyb3Iubm9QQU5JY2VsbGlkLmV4Y2VwdGlvblwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoeC5zdWJzdHJpbmcoMCw1KSA9PVwiNDI1MDFcIilcbiAgICAgIHtcbiAgICAgICAgIHNlc3Npb24udz1cIjFcIjtcbiAgICAgICAgIHNlc3Npb24uYW5uX25hbWU9XCJQMzAwMVwiO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoeC5zdWJzdHJpbmcoMCw1KSA9PVwiNDI1MDNcIilcbiAgICAgIHtcbiAgICAgICAgIHNlc3Npb24udz1cIjJcIjtcbiAgICAgICAgIHNlc3Npb24uYW5uX25hbWU9XCJQMzAwMlwiO1xuICAgICAgfVxuICAgICAgZWxzZXtcbiAgICAgICAgIHNlc3Npb24udz1cIjNcIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZXNzaW9uLnc7XG4gICB9IGNhdGNoIChlKSB7XG5cbiAgICAgIGxvZy5kZWJ1ZyhcImV4dHJhY3RBbmRDb21wYXJlLkxvZzoge31cIiwgZSk7XG4gICAgICByZXR1cm4gXCJlcnJvclwiO1xuICAgfVxufVxuIl19