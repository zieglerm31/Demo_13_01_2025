"use strict";
;
function normalization_1(session, event, localParams) {
    var log = session.log;
    try {
        var fromURI = void 0;
        session.s_initialSIP_lib = event;
        fromURI = event.SIP.From.address.uri.user;
        log.debug("Log From-1: {}", fromURI);
        session.s_normalizedNumber = fromURI.substring(3, 11);
        return "success";
    }
    catch (e) {
        log.debug("Log: {}", e);
        return "error";
    }
}
function extractAndCompare(session, event, localParams) {
    var log = session.log;
    try {
        session["mrf"] = {};
        session["mrf"] = {
            "announcement": "annoTest",
            "action": "playannouncement",
            "earlydialog": true,
            "collect": {
                "cleardb": "true",
                "edt": "1s",
                "fdt": "3s",
                "idt": "2s",
                "iterate": "1"
            },
            "play": {
                "barge": "true",
                "maxtime": "11s",
                "audiouri": "file:///appl/wav/tictac.wav"
            },
            "pattern": {
                "digits": "2",
                "format": "moml+digits"
            }
        };
        var x = void 0;
        try {
            if (session.s_initialSIP.SIP["P-Access-Network-Info"].cellId != null)
                x = session.s_initialSIP.SIP["P-Access-Network-Info"].cellId;
            else
                return "error.PANIcellid.null";
        }
        catch (e) {
            return "error.noPANIcellid.exception";
        }
        if (x.substring(0, 5) == "42501") {
            session.w = "1";
            session.ann_name = "P3001";
        }
        else if (x.substring(0, 5) == "42503") {
            session.w = "2";
            session.ann_name = "P3002";
        }
        else {
            session.w = "3";
        }
        return session.w;
    }
    catch (e) {
        log.debug("extractAndCompare.Log: {}", e);
        return "error";
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxDQUFDO0FBQUEsU0FBUyxlQUFlLENBQUMsT0FBYSxFQUFFLEtBQVcsRUFBRSxXQUFnQjtJQUNuRSxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0lBRXRCLElBQUk7UUFDRCxJQUFJLE9BQU8sU0FBUyxDQUFDO1FBQ3JCLE9BQU8sQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFDakMsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQzFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDckMsT0FBTyxDQUFDLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRXRELE9BQU8sU0FBUyxDQUFDO0tBRW5CO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFFVCxHQUFHLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN4QixPQUFPLE9BQU8sQ0FBQztLQUNqQjtBQUNKLENBQUM7QUFJRCxTQUFTLGlCQUFpQixDQUFDLE9BQWEsRUFBRSxLQUFXLEVBQUUsV0FBZ0I7SUFDcEUsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztJQUV0QixJQUFJO1FBS0QsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFDLEVBQUUsQ0FBQztRQUNsQixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUU7WUFDYixjQUFjLEVBQUMsVUFBVTtZQUN6QixRQUFRLEVBQUMsa0JBQWtCO1lBQzNCLGFBQWEsRUFBRSxJQUFJO1lBQ25CLFNBQVMsRUFBRTtnQkFDUixTQUFTLEVBQUMsTUFBTTtnQkFDaEIsS0FBSyxFQUFDLElBQUk7Z0JBQ1YsS0FBSyxFQUFDLElBQUk7Z0JBQ1YsS0FBSyxFQUFDLElBQUk7Z0JBQ1YsU0FBUyxFQUFDLEdBQUc7YUFDZjtZQUNELE1BQU0sRUFBRTtnQkFDTCxPQUFPLEVBQUMsTUFBTTtnQkFDZCxTQUFTLEVBQUMsS0FBSztnQkFDZixVQUFVLEVBQUMsNkJBQTZCO2FBQzFDO1lBQ0QsU0FBUyxFQUFFO2dCQUNSLFFBQVEsRUFBRSxHQUFHO2dCQUNiLFFBQVEsRUFBRSxhQUFhO2FBQ3pCO1NBQ0gsQ0FBQztRQUVGLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDZixJQUFJO1lBQ0QsSUFBSyxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLE1BQU0sSUFBSSxJQUFJO2dCQUNsRSxDQUFDLEdBQUUsT0FBTyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxNQUFNLENBQUE7O2dCQUUzRCxPQUFPLHVCQUF1QixDQUFDO1NBQ3BDO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVCxPQUFPLDhCQUE4QixDQUFDO1NBQ3hDO1FBRUQsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBRyxPQUFPLEVBQUU7WUFDN0IsT0FBTyxDQUFDLENBQUMsR0FBQyxHQUFHLENBQUM7WUFDZCxPQUFPLENBQUMsUUFBUSxHQUFDLE9BQU8sQ0FBQztTQUMzQjthQUFNLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUcsT0FBTyxFQUFFO1lBQ3BDLE9BQU8sQ0FBQyxDQUFDLEdBQUMsR0FBRyxDQUFDO1lBQ2QsT0FBTyxDQUFDLFFBQVEsR0FBQyxPQUFPLENBQUM7U0FDM0I7YUFBTTtZQUNKLE9BQU8sQ0FBQyxDQUFDLEdBQUMsR0FBRyxDQUFDO1NBQ2hCO1FBQ0QsT0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDO0tBQ25CO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVCxHQUFHLENBQUMsS0FBSyxDQUFDLDJCQUEyQixFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzFDLE9BQU8sT0FBTyxDQUFDO0tBQ2pCO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vTUFJTkJMT0NLXG47ZnVuY3Rpb24gbm9ybWFsaXphdGlvbl8xKHNlc3Npb24gOiBhbnksIGV2ZW50IDogYW55LCBsb2NhbFBhcmFtczogYW55ICl7XG4gICBsZXQgbG9nID0gc2Vzc2lvbi5sb2c7XG5cbiAgIHRyeSB7XG4gICAgICBsZXQgZnJvbVVSSSA6IHN0cmluZztcbiAgICAgIHNlc3Npb24uc19pbml0aWFsU0lQX2xpYiA9IGV2ZW50O1xuICAgICAgZnJvbVVSSSA9IGV2ZW50LlNJUC5Gcm9tLmFkZHJlc3MudXJpLnVzZXI7ICAvLzk3MjUwNzAwMDExOFxuICAgICAgbG9nLmRlYnVnKFwiTG9nIEZyb20tMToge31cIiwgZnJvbVVSSSk7XG4gICAgICBzZXNzaW9uLnNfbm9ybWFsaXplZE51bWJlciA9IGZyb21VUkkuc3Vic3RyaW5nKDMsIDExKTtcblxuICAgICAgcmV0dXJuIFwic3VjY2Vzc1wiO1xuXG4gICB9IGNhdGNoIChlKSB7XG5cbiAgICAgIGxvZy5kZWJ1ZyhcIkxvZzoge31cIiwgZSk7XG4gICAgICByZXR1cm4gXCJlcnJvclwiO1xuICAgfVxufVxuXG5cblxuZnVuY3Rpb24gZXh0cmFjdEFuZENvbXBhcmUoc2Vzc2lvbiA6IGFueSwgZXZlbnQgOiBhbnksIGxvY2FsUGFyYW1zOiBhbnkgKXtcbiAgIGxldCBsb2cgPSBzZXNzaW9uLmxvZztcblxuICAgdHJ5IHtcbiAgICAgIC8vc2V0IGlucHV0IHBhcmFtZXRlcnNcbiAgICAgIC8vaW50ZXJpbVxuICAgICAgLy8gdGljdGFjLndhdiAuLiA1cywgc2ltcGxlcGxheS53YXYgLi4gMzJzXG4gICAgICAvL2Zvcm1hdDogbW9tbCtkaWdpdHMgb3IgcmVnZXhcbiAgICAgIHNlc3Npb25bXCJtcmZcIl09e307XG4gICAgICBzZXNzaW9uW1wibXJmXCJdPSB7XG4gICAgICAgICBcImFubm91bmNlbWVudFwiOlwiYW5ub1Rlc3RcIixcbiAgICAgICAgIFwiYWN0aW9uXCI6XCJwbGF5YW5ub3VuY2VtZW50XCIsXG4gICAgICAgICBcImVhcmx5ZGlhbG9nXCI6IHRydWUsXG4gICAgICAgICBcImNvbGxlY3RcIjoge1xuICAgICAgICAgICAgXCJjbGVhcmRiXCI6XCJ0cnVlXCIsXG4gICAgICAgICAgICBcImVkdFwiOlwiMXNcIixcbiAgICAgICAgICAgIFwiZmR0XCI6XCIzc1wiLFxuICAgICAgICAgICAgXCJpZHRcIjpcIjJzXCIsXG4gICAgICAgICAgICBcIml0ZXJhdGVcIjpcIjFcIlxuICAgICAgICAgfSxcbiAgICAgICAgIFwicGxheVwiOiB7XG4gICAgICAgICAgICBcImJhcmdlXCI6XCJ0cnVlXCIsXG4gICAgICAgICAgICBcIm1heHRpbWVcIjpcIjExc1wiLFxuICAgICAgICAgICAgXCJhdWRpb3VyaVwiOlwiZmlsZTovLy9hcHBsL3dhdi90aWN0YWMud2F2XCIgICAgICAgICAgICBcbiAgICAgICAgIH0sXG4gICAgICAgICBcInBhdHRlcm5cIjoge1xuICAgICAgICAgICAgXCJkaWdpdHNcIjogXCIyXCIsXG4gICAgICAgICAgICBcImZvcm1hdFwiOiBcIm1vbWwrZGlnaXRzXCJcbiAgICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGxldCB4IDogc3RyaW5nO1xuICAgICAgdHJ5IHtcbiAgICAgICAgIGlmICggc2Vzc2lvbi5zX2luaXRpYWxTSVAuU0lQW1wiUC1BY2Nlc3MtTmV0d29yay1JbmZvXCJdLmNlbGxJZCAhPSBudWxsKVxuICAgICAgICAgICAgeD0gc2Vzc2lvbi5zX2luaXRpYWxTSVAuU0lQW1wiUC1BY2Nlc3MtTmV0d29yay1JbmZvXCJdLmNlbGxJZFxuICAgICAgICAgZWxzZSBcbiAgICAgICAgICAgIHJldHVybiBcImVycm9yLlBBTkljZWxsaWQubnVsbFwiO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgcmV0dXJuIFwiZXJyb3Iubm9QQU5JY2VsbGlkLmV4Y2VwdGlvblwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoeC5zdWJzdHJpbmcoMCw1KSA9PVwiNDI1MDFcIikge1xuICAgICAgICAgc2Vzc2lvbi53PVwiMVwiO1xuICAgICAgICAgc2Vzc2lvbi5hbm5fbmFtZT1cIlAzMDAxXCI7XG4gICAgICB9IGVsc2UgaWYgKHguc3Vic3RyaW5nKDAsNSkgPT1cIjQyNTAzXCIpIHtcbiAgICAgICAgIHNlc3Npb24udz1cIjJcIjtcbiAgICAgICAgIHNlc3Npb24uYW5uX25hbWU9XCJQMzAwMlwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgIHNlc3Npb24udz1cIjNcIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZXNzaW9uLnc7XG4gICB9IGNhdGNoIChlKSB7XG4gICAgICBsb2cuZGVidWcoXCJleHRyYWN0QW5kQ29tcGFyZS5Mb2c6IHt9XCIsIGUpO1xuICAgICAgcmV0dXJuIFwiZXJyb3JcIjtcbiAgIH1cbn1cbiJdfQ==