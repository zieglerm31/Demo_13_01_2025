"use strict";
;
function normalization_1(session, event, localParams) {
    var log = session.log;
    try {
        var fromURI = void 0;
        session.s_initialSIP_lib = event;
        fromURI = event.SIP.From.address.uri.user;
        log.debug("Log From-1: {}", fromURI);
        session.s_normalizedNumber = fromURI.substring(3, 11);
        return "success";
    }
    catch (e) {
        log.debug("Log: {}", e);
        return "error";
    }
}
function extractAndCompare(session, event, localParams) {
    var log = session.log;
    try {
        session["mrf"] = {};
        session["mrf"] = { "announcement": "annoTest", "action": "playannouncement", "earlydialog": true };
        var x = void 0;
        try {
            if (session.s_initialSIP.SIP["P-Access-Network-Info"].cellId != null)
                x = session.s_initialSIP.SIP["P-Access-Network-Info"].cellId;
            else
                return "error.PANIcellid.null";
        }
        catch (e) {
            return "error.noPANIcellid.exception";
        }
        if (x.substring(0, 5) == "42501") {
            session.w = "1";
            session.ann_name = "P3001";
        }
        else if (x.substring(0, 5) == "42503") {
            session.w = "2";
            session.ann_name = "P3002";
        }
        else {
            session.w = "3";
        }
        return session.w;
    }
    catch (e) {
        log.debug("extractAndCompare.Log: {}", e);
        return "error";
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxDQUFDO0FBQUEsU0FBUyxlQUFlLENBQUMsT0FBYSxFQUFFLEtBQVcsRUFBRSxXQUFnQjtJQUNuRSxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0lBRXRCLElBQUk7UUFDRCxJQUFJLE9BQU8sU0FBUyxDQUFDO1FBQ3JCLE9BQU8sQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFDakMsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQzFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDckMsT0FBTyxDQUFDLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRXRELE9BQU8sU0FBUyxDQUFDO0tBRW5CO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFFVCxHQUFHLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN4QixPQUFPLE9BQU8sQ0FBQztLQUNqQjtBQUNKLENBQUM7QUFJRCxTQUFTLGlCQUFpQixDQUFDLE9BQWEsRUFBRSxLQUFXLEVBQUUsV0FBZ0I7SUFDcEUsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztJQUV0QixJQUFJO1FBR0QsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFDLEVBQUUsQ0FBQztRQUNsQixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUUsRUFBQyxjQUFjLEVBQUMsVUFBVSxFQUFDLFFBQVEsRUFBQyxrQkFBa0IsRUFBQyxhQUFhLEVBQUUsSUFBSSxFQUFDLENBQUM7UUFFNUYsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUNmLElBQUk7WUFDRCxJQUFLLE9BQU8sQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUMsTUFBTSxJQUFJLElBQUk7Z0JBQ2xFLENBQUMsR0FBRSxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQTs7Z0JBRTNELE9BQU8sdUJBQXVCLENBQUM7U0FDcEM7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNULE9BQU8sOEJBQThCLENBQUM7U0FDeEM7UUFFRCxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFHLE9BQU8sRUFDOUI7WUFDRyxPQUFPLENBQUMsQ0FBQyxHQUFDLEdBQUcsQ0FBQztZQUNkLE9BQU8sQ0FBQyxRQUFRLEdBQUMsT0FBTyxDQUFDO1NBQzNCO2FBQ0ksSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBRyxPQUFPLEVBQ25DO1lBQ0csT0FBTyxDQUFDLENBQUMsR0FBQyxHQUFHLENBQUM7WUFDZCxPQUFPLENBQUMsUUFBUSxHQUFDLE9BQU8sQ0FBQztTQUMzQjthQUNHO1lBQ0QsT0FBTyxDQUFDLENBQUMsR0FBQyxHQUFHLENBQUM7U0FDaEI7UUFDRCxPQUFPLE9BQU8sQ0FBQyxDQUFDLENBQUM7S0FDbkI7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUVULEdBQUcsQ0FBQyxLQUFLLENBQUMsMkJBQTJCLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDMUMsT0FBTyxPQUFPLENBQUM7S0FDakI7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy9NQUlOQkxPQ0tcbjtmdW5jdGlvbiBub3JtYWxpemF0aW9uXzEoc2Vzc2lvbiA6IGFueSwgZXZlbnQgOiBhbnksIGxvY2FsUGFyYW1zOiBhbnkgKXtcbiAgIGxldCBsb2cgPSBzZXNzaW9uLmxvZztcblxuICAgdHJ5IHtcbiAgICAgIGxldCBmcm9tVVJJIDogc3RyaW5nO1xuICAgICAgc2Vzc2lvbi5zX2luaXRpYWxTSVBfbGliID0gZXZlbnQ7XG4gICAgICBmcm9tVVJJID0gZXZlbnQuU0lQLkZyb20uYWRkcmVzcy51cmkudXNlcjsgIC8vOTcyNTA3MDAwMTE4XG4gICAgICBsb2cuZGVidWcoXCJMb2cgRnJvbS0xOiB7fVwiLCBmcm9tVVJJKTtcbiAgICAgIHNlc3Npb24uc19ub3JtYWxpemVkTnVtYmVyID0gZnJvbVVSSS5zdWJzdHJpbmcoMywgMTEpO1xuXG4gICAgICByZXR1cm4gXCJzdWNjZXNzXCI7XG5cbiAgIH0gY2F0Y2ggKGUpIHtcblxuICAgICAgbG9nLmRlYnVnKFwiTG9nOiB7fVwiLCBlKTtcbiAgICAgIHJldHVybiBcImVycm9yXCI7XG4gICB9XG59XG5cblxuXG5mdW5jdGlvbiBleHRyYWN0QW5kQ29tcGFyZShzZXNzaW9uIDogYW55LCBldmVudCA6IGFueSwgbG9jYWxQYXJhbXM6IGFueSApe1xuICAgbGV0IGxvZyA9IHNlc3Npb24ubG9nO1xuXG4gICB0cnkge1xuICAgICAgLy9zZXQgaW5wdXQgcGFyYW1ldGVyc1xuICAgICAgLy9pbnRlcmltXG4gICAgICBzZXNzaW9uW1wibXJmXCJdPXt9O1xuICAgICAgc2Vzc2lvbltcIm1yZlwiXT0ge1wiYW5ub3VuY2VtZW50XCI6XCJhbm5vVGVzdFwiLFwiYWN0aW9uXCI6XCJwbGF5YW5ub3VuY2VtZW50XCIsXCJlYXJseWRpYWxvZ1wiOiB0cnVlfTtcblxuICAgICAgbGV0IHggOiBzdHJpbmc7XG4gICAgICB0cnkge1xuICAgICAgICAgaWYgKCBzZXNzaW9uLnNfaW5pdGlhbFNJUC5TSVBbXCJQLUFjY2Vzcy1OZXR3b3JrLUluZm9cIl0uY2VsbElkICE9IG51bGwpXG4gICAgICAgICAgICB4PSBzZXNzaW9uLnNfaW5pdGlhbFNJUC5TSVBbXCJQLUFjY2Vzcy1OZXR3b3JrLUluZm9cIl0uY2VsbElkXG4gICAgICAgICBlbHNlIFxuICAgICAgICAgICAgcmV0dXJuIFwiZXJyb3IuUEFOSWNlbGxpZC5udWxsXCI7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICByZXR1cm4gXCJlcnJvci5ub1BBTkljZWxsaWQuZXhjZXB0aW9uXCI7XG4gICAgICB9XG5cbiAgICAgIGlmICh4LnN1YnN0cmluZygwLDUpID09XCI0MjUwMVwiKVxuICAgICAge1xuICAgICAgICAgc2Vzc2lvbi53PVwiMVwiO1xuICAgICAgICAgc2Vzc2lvbi5hbm5fbmFtZT1cIlAzMDAxXCI7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICh4LnN1YnN0cmluZygwLDUpID09XCI0MjUwM1wiKVxuICAgICAge1xuICAgICAgICAgc2Vzc2lvbi53PVwiMlwiO1xuICAgICAgICAgc2Vzc2lvbi5hbm5fbmFtZT1cIlAzMDAyXCI7XG4gICAgICB9XG4gICAgICBlbHNle1xuICAgICAgICAgc2Vzc2lvbi53PVwiM1wiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNlc3Npb24udztcbiAgIH0gY2F0Y2ggKGUpIHtcblxuICAgICAgbG9nLmRlYnVnKFwiZXh0cmFjdEFuZENvbXBhcmUuTG9nOiB7fVwiLCBlKTtcbiAgICAgIHJldHVybiBcImVycm9yXCI7XG4gICB9XG59XG4iXX0=