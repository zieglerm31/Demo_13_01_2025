"use strict";
;
function normalization_1(session, event, localParams) {
    var log = session.log;
    try {
        var fromURI = void 0;
        session.s_initialSIP_lib = event;
        fromURI = event.SIP.From.address.uri.user;
        log.debug("Log From-1: {}", fromURI);
        session.s_normalizedNumber = fromURI.substring(3, 11);
        return "success";
    }
    catch (e) {
        log.debug("Log: {}", e);
        return "error";
    }
}
function extractAndCompare(session, event, localParams) {
    var log = session.log;
    try {
        session["mrf"] = {};
        session["mrf"] = {
            "announcement": "annoTest",
            "action": "playannouncement",
            "earlydialog": true,
            "collect": {
                "cleardb": "true",
                "edt": "1s",
                "fdt": "3s",
                "idt": "2s",
                "iterate": "1"
            },
            "play": {
                "barge": "true",
                "maxtime": "11s",
                "audiouri": "file:///appl/wav/tictac.wav"
            },
            "pattern": {
                "digits": "[1-2]",
                "format": "regex"
            }
        };
        var x = void 0;
        try {
            if (session.s_initialSIP.SIP["P-Access-Network-Info"].cellId != null)
                x = session.s_initialSIP.SIP["P-Access-Network-Info"].cellId;
            else
                return "error.PANIcellid.null";
        }
        catch (e) {
            return "error.noPANIcellid.exception";
        }
        if (x.substring(0, 5) == "42501") {
            session.w = "1";
            session.ann_name = "P3001";
        }
        else if (x.substring(0, 5) == "42503") {
            session.w = "2";
            session.ann_name = "P3002";
        }
        else {
            session.w = "3";
        }
        return session.w;
    }
    catch (e) {
        log.debug("extractAndCompare.Log: {}", e);
        return "error";
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxDQUFDO0FBQUEsU0FBUyxlQUFlLENBQUMsT0FBYSxFQUFFLEtBQVcsRUFBRSxXQUFnQjtJQUNuRSxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0lBRXRCLElBQUk7UUFDRCxJQUFJLE9BQU8sU0FBUyxDQUFDO1FBQ3JCLE9BQU8sQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFDakMsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQzFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDckMsT0FBTyxDQUFDLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRXRELE9BQU8sU0FBUyxDQUFDO0tBRW5CO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFFVCxHQUFHLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN4QixPQUFPLE9BQU8sQ0FBQztLQUNqQjtBQUNKLENBQUM7QUFJRCxTQUFTLGlCQUFpQixDQUFDLE9BQWEsRUFBRSxLQUFXLEVBQUUsV0FBZ0I7SUFDcEUsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztJQUV0QixJQUFJO1FBS0QsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFDLEVBQUUsQ0FBQztRQUNsQixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUU7WUFDYixjQUFjLEVBQUMsVUFBVTtZQUN6QixRQUFRLEVBQUMsa0JBQWtCO1lBQzNCLGFBQWEsRUFBRSxJQUFJO1lBQ25CLFNBQVMsRUFBRTtnQkFDUixTQUFTLEVBQUMsTUFBTTtnQkFDaEIsS0FBSyxFQUFDLElBQUk7Z0JBQ1YsS0FBSyxFQUFDLElBQUk7Z0JBQ1YsS0FBSyxFQUFDLElBQUk7Z0JBQ1YsU0FBUyxFQUFDLEdBQUc7YUFDZjtZQUNELE1BQU0sRUFBRTtnQkFDTCxPQUFPLEVBQUMsTUFBTTtnQkFDZCxTQUFTLEVBQUMsS0FBSztnQkFDZixVQUFVLEVBQUMsNkJBQTZCO2FBQzFDO1lBQ0QsU0FBUyxFQUFFO2dCQUNSLFFBQVEsRUFBRSxPQUFPO2dCQUNqQixRQUFRLEVBQUUsT0FBTzthQUNuQjtTQUNILENBQUM7UUFFRixJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ2YsSUFBSTtZQUNELElBQUssT0FBTyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxNQUFNLElBQUksSUFBSTtnQkFDbEUsQ0FBQyxHQUFFLE9BQU8sQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUMsTUFBTSxDQUFBOztnQkFFM0QsT0FBTyx1QkFBdUIsQ0FBQztTQUNwQztRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1QsT0FBTyw4QkFBOEIsQ0FBQztTQUN4QztRQUVELElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUcsT0FBTyxFQUFFO1lBQzdCLE9BQU8sQ0FBQyxDQUFDLEdBQUMsR0FBRyxDQUFDO1lBQ2QsT0FBTyxDQUFDLFFBQVEsR0FBQyxPQUFPLENBQUM7U0FDM0I7YUFBTSxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFHLE9BQU8sRUFBRTtZQUNwQyxPQUFPLENBQUMsQ0FBQyxHQUFDLEdBQUcsQ0FBQztZQUNkLE9BQU8sQ0FBQyxRQUFRLEdBQUMsT0FBTyxDQUFDO1NBQzNCO2FBQU07WUFDSixPQUFPLENBQUMsQ0FBQyxHQUFDLEdBQUcsQ0FBQztTQUNoQjtRQUNELE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQztLQUNuQjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1QsR0FBRyxDQUFDLEtBQUssQ0FBQywyQkFBMkIsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMxQyxPQUFPLE9BQU8sQ0FBQztLQUNqQjtBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvL01BSU5CTE9DS1xuO2Z1bmN0aW9uIG5vcm1hbGl6YXRpb25fMShzZXNzaW9uIDogYW55LCBldmVudCA6IGFueSwgbG9jYWxQYXJhbXM6IGFueSApe1xuICAgbGV0IGxvZyA9IHNlc3Npb24ubG9nO1xuXG4gICB0cnkge1xuICAgICAgbGV0IGZyb21VUkkgOiBzdHJpbmc7XG4gICAgICBzZXNzaW9uLnNfaW5pdGlhbFNJUF9saWIgPSBldmVudDtcbiAgICAgIGZyb21VUkkgPSBldmVudC5TSVAuRnJvbS5hZGRyZXNzLnVyaS51c2VyOyAgLy85NzI1MDcwMDAxMThcbiAgICAgIGxvZy5kZWJ1ZyhcIkxvZyBGcm9tLTE6IHt9XCIsIGZyb21VUkkpO1xuICAgICAgc2Vzc2lvbi5zX25vcm1hbGl6ZWROdW1iZXIgPSBmcm9tVVJJLnN1YnN0cmluZygzLCAxMSk7XG5cbiAgICAgIHJldHVybiBcInN1Y2Nlc3NcIjtcblxuICAgfSBjYXRjaCAoZSkge1xuXG4gICAgICBsb2cuZGVidWcoXCJMb2c6IHt9XCIsIGUpO1xuICAgICAgcmV0dXJuIFwiZXJyb3JcIjtcbiAgIH1cbn1cblxuXG5cbmZ1bmN0aW9uIGV4dHJhY3RBbmRDb21wYXJlKHNlc3Npb24gOiBhbnksIGV2ZW50IDogYW55LCBsb2NhbFBhcmFtczogYW55ICl7XG4gICBsZXQgbG9nID0gc2Vzc2lvbi5sb2c7XG5cbiAgIHRyeSB7XG4gICAgICAvL3NldCBpbnB1dCBwYXJhbWV0ZXJzXG4gICAgICAvL2ludGVyaW1cbiAgICAgIC8vIHRpY3RhYy53YXYgLi4gNXMsIHNpbXBsZXBsYXkud2F2IC4uIDMyc1xuICAgICAgLy9mb3JtYXQ6IG1vbWwrZGlnaXRzIG9yIHJlZ2V4IChbMS0yXSlcbiAgICAgIHNlc3Npb25bXCJtcmZcIl09e307XG4gICAgICBzZXNzaW9uW1wibXJmXCJdPSB7XG4gICAgICAgICBcImFubm91bmNlbWVudFwiOlwiYW5ub1Rlc3RcIixcbiAgICAgICAgIFwiYWN0aW9uXCI6XCJwbGF5YW5ub3VuY2VtZW50XCIsXG4gICAgICAgICBcImVhcmx5ZGlhbG9nXCI6IHRydWUsXG4gICAgICAgICBcImNvbGxlY3RcIjoge1xuICAgICAgICAgICAgXCJjbGVhcmRiXCI6XCJ0cnVlXCIsXG4gICAgICAgICAgICBcImVkdFwiOlwiMXNcIixcbiAgICAgICAgICAgIFwiZmR0XCI6XCIzc1wiLFxuICAgICAgICAgICAgXCJpZHRcIjpcIjJzXCIsXG4gICAgICAgICAgICBcIml0ZXJhdGVcIjpcIjFcIlxuICAgICAgICAgfSxcbiAgICAgICAgIFwicGxheVwiOiB7XG4gICAgICAgICAgICBcImJhcmdlXCI6XCJ0cnVlXCIsXG4gICAgICAgICAgICBcIm1heHRpbWVcIjpcIjExc1wiLFxuICAgICAgICAgICAgXCJhdWRpb3VyaVwiOlwiZmlsZTovLy9hcHBsL3dhdi90aWN0YWMud2F2XCIgICAgICAgICAgICBcbiAgICAgICAgIH0sXG4gICAgICAgICBcInBhdHRlcm5cIjoge1xuICAgICAgICAgICAgXCJkaWdpdHNcIjogXCJbMS0yXVwiLFxuICAgICAgICAgICAgXCJmb3JtYXRcIjogXCJyZWdleFwiXG4gICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBsZXQgeCA6IHN0cmluZztcbiAgICAgIHRyeSB7XG4gICAgICAgICBpZiAoIHNlc3Npb24uc19pbml0aWFsU0lQLlNJUFtcIlAtQWNjZXNzLU5ldHdvcmstSW5mb1wiXS5jZWxsSWQgIT0gbnVsbClcbiAgICAgICAgICAgIHg9IHNlc3Npb24uc19pbml0aWFsU0lQLlNJUFtcIlAtQWNjZXNzLU5ldHdvcmstSW5mb1wiXS5jZWxsSWRcbiAgICAgICAgIGVsc2UgXG4gICAgICAgICAgICByZXR1cm4gXCJlcnJvci5QQU5JY2VsbGlkLm51bGxcIjtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgIHJldHVybiBcImVycm9yLm5vUEFOSWNlbGxpZC5leGNlcHRpb25cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKHguc3Vic3RyaW5nKDAsNSkgPT1cIjQyNTAxXCIpIHtcbiAgICAgICAgIHNlc3Npb24udz1cIjFcIjtcbiAgICAgICAgIHNlc3Npb24uYW5uX25hbWU9XCJQMzAwMVwiO1xuICAgICAgfSBlbHNlIGlmICh4LnN1YnN0cmluZygwLDUpID09XCI0MjUwM1wiKSB7XG4gICAgICAgICBzZXNzaW9uLnc9XCIyXCI7XG4gICAgICAgICBzZXNzaW9uLmFubl9uYW1lPVwiUDMwMDJcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICBzZXNzaW9uLnc9XCIzXCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2Vzc2lvbi53O1xuICAgfSBjYXRjaCAoZSkge1xuICAgICAgbG9nLmRlYnVnKFwiZXh0cmFjdEFuZENvbXBhcmUuTG9nOiB7fVwiLCBlKTtcbiAgICAgIHJldHVybiBcImVycm9yXCI7XG4gICB9XG59XG4iXX0=