"use strict";
;
function normalization_1(session, event, localParams) {
    var log = session.log;
    try {
        var fromURI = void 0;
        session.s_initialSIP_lib = event;
        fromURI = event.SIP.From.address.uri.user;
        log.debug("Log From-1: {}", fromURI);
        session.s_normalizedNumber = fromURI.substring(3, 11);
        return "success";
    }
    catch (e) {
        log.debug("Log: {}", e);
        return "error";
    }
}
function createXML(session, event, localParams) {
    var x;
    session.s_xml1 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><sms><user><username>SendSMSwhileOff</username><password>Aa87!6179</password></user><source>019</source><destinations><phone>";
    session.s_xml2 = "</phone></destinations><message>test</message><response>0</response></sms>";
    session.s_xml = session.xml1 + session.normalizedNumber + session.xml2;
    return "success";
}
function extractAndCompare(session, event, localParams) {
    var log = session.log;
    try {
        session["mrf"] = "{";
        playannouncement;
        ":";
        annoTest;
        ",";
        action;
        ":";
        playannouncement;
        ",";
        earlydialog;
        ": true}";
        var x = void 0;
        try {
            if (session.s_initialSIP.SIP["P-Access-Network-Info"].cellId != null)
                x = session.s_initialSIP.SIP["P-Access-Network-Info"].cellId;
            else
                return "error.PANIcellid.null";
        }
        catch (e) {
            return "error.noPANIcellid.exception";
        }
        if (x.substring(0, 5) == "42501") {
            session.w = "1";
            session.ann_name = "P3001";
        }
        else if (x.substring(0, 5) == "42503") {
            session.w = "2";
            session.ann_name = "P3002";
        }
        else {
            session.w = "3";
        }
        return session.w;
    }
    catch (e) {
        log.debug("extractAndCompare.Log: {}", e);
        return "error";
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxDQUFDO0FBQUEsU0FBUyxlQUFlLENBQUMsT0FBYSxFQUFFLEtBQVcsRUFBRSxXQUFnQjtJQUNuRSxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0lBRXRCLElBQUk7UUFDRCxJQUFJLE9BQU8sU0FBUyxDQUFDO1FBQ3JCLE9BQU8sQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFDakMsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQzFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDckMsT0FBTyxDQUFDLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRXRELE9BQU8sU0FBUyxDQUFDO0tBRW5CO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFFVCxHQUFHLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN4QixPQUFPLE9BQU8sQ0FBQztLQUNqQjtBQUNKLENBQUM7QUFHRCxTQUFTLFNBQVMsQ0FBQyxPQUFhLEVBQUUsS0FBVyxFQUFFLFdBQWdCO0lBRTVELElBQUksQ0FBVSxDQUFDO0lBQ2YsT0FBTyxDQUFDLE1BQU0sR0FBRSx5S0FBeUssQ0FBQztJQUUxTCxPQUFPLENBQUMsTUFBTSxHQUFFLDRFQUE0RSxDQUFDO0lBRTdGLE9BQU8sQ0FBQyxLQUFLLEdBQUUsT0FBTyxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztJQUV0RSxPQUFPLFNBQVMsQ0FBQztBQUVwQixDQUFDO0FBRUQsU0FBUyxpQkFBaUIsQ0FBQyxPQUFhLEVBQUUsS0FBVyxFQUFFLFdBQWdCO0lBQ3BFLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7SUFFdEIsSUFBSTtRQUdELE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBQyxHQUFHLENBQUE7UUFBQSxnQkFBZ0IsQ0FBQTtRQUFBLEdBQUcsQ0FBQTtRQUFBLFFBQVEsQ0FBQTtRQUFBLEdBQUcsQ0FBQTtRQUFBLE1BQU0sQ0FBQTtRQUFBLEdBQUcsQ0FBQTtRQUFBLGdCQUFnQixDQUFBO1FBQUEsR0FBRyxDQUFBO1FBQUEsV0FBVyxDQUFBO1FBQUEsU0FBUyxDQUFDO1FBRWpHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDZixJQUFJO1lBQ0QsSUFBSyxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLE1BQU0sSUFBSSxJQUFJO2dCQUNsRSxDQUFDLEdBQUUsT0FBTyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxNQUFNLENBQUE7O2dCQUUzRCxPQUFPLHVCQUF1QixDQUFDO1NBQ3BDO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVCxPQUFPLDhCQUE4QixDQUFDO1NBQ3hDO1FBRUQsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBRyxPQUFPLEVBQzlCO1lBQ0csT0FBTyxDQUFDLENBQUMsR0FBQyxHQUFHLENBQUM7WUFDZCxPQUFPLENBQUMsUUFBUSxHQUFDLE9BQU8sQ0FBQztTQUMzQjthQUNJLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUcsT0FBTyxFQUNuQztZQUNHLE9BQU8sQ0FBQyxDQUFDLEdBQUMsR0FBRyxDQUFDO1lBQ2QsT0FBTyxDQUFDLFFBQVEsR0FBQyxPQUFPLENBQUM7U0FDM0I7YUFDRztZQUNELE9BQU8sQ0FBQyxDQUFDLEdBQUMsR0FBRyxDQUFDO1NBQ2hCO1FBQ0QsT0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDO0tBQ25CO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFFVCxHQUFHLENBQUMsS0FBSyxDQUFDLDJCQUEyQixFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzFDLE9BQU8sT0FBTyxDQUFDO0tBQ2pCO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vTUFJTkJMT0NLXG47ZnVuY3Rpb24gbm9ybWFsaXphdGlvbl8xKHNlc3Npb24gOiBhbnksIGV2ZW50IDogYW55LCBsb2NhbFBhcmFtczogYW55ICl7XG4gICBsZXQgbG9nID0gc2Vzc2lvbi5sb2c7XG5cbiAgIHRyeSB7XG4gICAgICBsZXQgZnJvbVVSSSA6IHN0cmluZztcbiAgICAgIHNlc3Npb24uc19pbml0aWFsU0lQX2xpYiA9IGV2ZW50O1xuICAgICAgZnJvbVVSSSA9IGV2ZW50LlNJUC5Gcm9tLmFkZHJlc3MudXJpLnVzZXI7ICAvLzk3MjUwNzAwMDExOFxuICAgICAgbG9nLmRlYnVnKFwiTG9nIEZyb20tMToge31cIiwgZnJvbVVSSSk7XG4gICAgICBzZXNzaW9uLnNfbm9ybWFsaXplZE51bWJlciA9IGZyb21VUkkuc3Vic3RyaW5nKDMsIDExKTtcblxuICAgICAgcmV0dXJuIFwic3VjY2Vzc1wiO1xuXG4gICB9IGNhdGNoIChlKSB7XG5cbiAgICAgIGxvZy5kZWJ1ZyhcIkxvZzoge31cIiwgZSk7XG4gICAgICByZXR1cm4gXCJlcnJvclwiO1xuICAgfVxufVxuXG5cbmZ1bmN0aW9uIGNyZWF0ZVhNTChzZXNzaW9uIDogYW55LCBldmVudCA6IGFueSwgbG9jYWxQYXJhbXM6IGFueSApe1xuXG4gICBsZXQgeCA6IHN0cmluZztcbiAgIHNlc3Npb24uc194bWwxPSBcIjw/eG1sIHZlcnNpb249XFxcIjEuMFxcXCIgZW5jb2Rpbmc9XFxcIlVURi04XFxcIj8+PHNtcz48dXNlcj48dXNlcm5hbWU+U2VuZFNNU3doaWxlT2ZmPC91c2VybmFtZT48cGFzc3dvcmQ+QWE4NyE2MTc5PC9wYXNzd29yZD48L3VzZXI+PHNvdXJjZT4wMTk8L3NvdXJjZT48ZGVzdGluYXRpb25zPjxwaG9uZT5cIjtcblxuICAgc2Vzc2lvbi5zX3htbDI9IFwiPC9waG9uZT48L2Rlc3RpbmF0aW9ucz48bWVzc2FnZT50ZXN0PC9tZXNzYWdlPjxyZXNwb25zZT4wPC9yZXNwb25zZT48L3Ntcz5cIjtcblxuICAgc2Vzc2lvbi5zX3htbD0gc2Vzc2lvbi54bWwxICsgc2Vzc2lvbi5ub3JtYWxpemVkTnVtYmVyICsgc2Vzc2lvbi54bWwyO1xuXG4gICByZXR1cm4gXCJzdWNjZXNzXCI7XG5cbn1cblxuZnVuY3Rpb24gZXh0cmFjdEFuZENvbXBhcmUoc2Vzc2lvbiA6IGFueSwgZXZlbnQgOiBhbnksIGxvY2FsUGFyYW1zOiBhbnkgKXtcbiAgIGxldCBsb2cgPSBzZXNzaW9uLmxvZztcblxuICAgdHJ5IHtcbiAgICAgIC8vc2V0IGlucHV0IHBhcmFtZXRlcnNcbiAgICAgIC8vaW50ZXJpbVxuICAgICAgc2Vzc2lvbltcIm1yZlwiXT1cIntcInBsYXlhbm5vdW5jZW1lbnRcIjpcImFubm9UZXN0XCIsXCJhY3Rpb25cIjpcInBsYXlhbm5vdW5jZW1lbnRcIixcImVhcmx5ZGlhbG9nXCI6IHRydWV9XCI7XG5cbiAgICAgIGxldCB4IDogc3RyaW5nO1xuICAgICAgdHJ5IHtcbiAgICAgICAgIGlmICggc2Vzc2lvbi5zX2luaXRpYWxTSVAuU0lQW1wiUC1BY2Nlc3MtTmV0d29yay1JbmZvXCJdLmNlbGxJZCAhPSBudWxsKVxuICAgICAgICAgICAgeD0gc2Vzc2lvbi5zX2luaXRpYWxTSVAuU0lQW1wiUC1BY2Nlc3MtTmV0d29yay1JbmZvXCJdLmNlbGxJZFxuICAgICAgICAgZWxzZSBcbiAgICAgICAgICAgIHJldHVybiBcImVycm9yLlBBTkljZWxsaWQubnVsbFwiO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgcmV0dXJuIFwiZXJyb3Iubm9QQU5JY2VsbGlkLmV4Y2VwdGlvblwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoeC5zdWJzdHJpbmcoMCw1KSA9PVwiNDI1MDFcIilcbiAgICAgIHtcbiAgICAgICAgIHNlc3Npb24udz1cIjFcIjtcbiAgICAgICAgIHNlc3Npb24uYW5uX25hbWU9XCJQMzAwMVwiO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoeC5zdWJzdHJpbmcoMCw1KSA9PVwiNDI1MDNcIilcbiAgICAgIHtcbiAgICAgICAgIHNlc3Npb24udz1cIjJcIjtcbiAgICAgICAgIHNlc3Npb24uYW5uX25hbWU9XCJQMzAwMlwiO1xuICAgICAgfVxuICAgICAgZWxzZXtcbiAgICAgICAgIHNlc3Npb24udz1cIjNcIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZXNzaW9uLnc7XG4gICB9IGNhdGNoIChlKSB7XG5cbiAgICAgIGxvZy5kZWJ1ZyhcImV4dHJhY3RBbmRDb21wYXJlLkxvZzoge31cIiwgZSk7XG4gICAgICByZXR1cm4gXCJlcnJvclwiO1xuICAgfVxufVxuIl19