"use strict";
var Capabilities;
(function (Capabilities) {
    Capabilities["REL1XX"] = "REL1XX";
    Capabilities["FORKING"] = "FORKING";
    Capabilities["PRECONDITION"] = "PRECONDITION";
    Capabilities["PEM"] = "PEM";
    Capabilities["UPDATE"] = "UPDATE";
})(Capabilities || (Capabilities = {}));
var Annotype;
(function (Annotype) {
    Annotype["CONNECT"] = "CONNECT";
    Annotype["RINGING"] = "RING";
})(Annotype || (Annotype = {}));
var CallPollActionType;
(function (CallPollActionType) {
    CallPollActionType["Accept"] = "accept";
    CallPollActionType["Forward"] = "forward";
    CallPollActionType["Reject"] = "reject";
})(CallPollActionType || (CallPollActionType = {}));
var CallStartActionType;
(function (CallStartActionType) {
    CallStartActionType[CallStartActionType["Abort"] = 0] = "Abort";
    CallStartActionType[CallStartActionType["Forward"] = 1] = "Forward";
    CallStartActionType[CallStartActionType["RejectMrf"] = 2] = "RejectMrf";
})(CallStartActionType || (CallStartActionType = {}));
var MediaOperationActionType;
(function (MediaOperationActionType) {
    MediaOperationActionType["PerformMediaOperation"] = "performMediaOperation";
})(MediaOperationActionType || (MediaOperationActionType = {}));
var MediaOperationContentType;
(function (MediaOperationContentType) {
    MediaOperationContentType["MSML"] = "application/msml+xml";
})(MediaOperationContentType || (MediaOperationContentType = {}));
;
;
function armevents(sessionData, eventData, localParams) {
    var ret;
    var status2;
    var events;
    events = events || {};
    events.InfoPollEvent = "null";
    events.SuccessResponsePollEvent = "null";
    events.RawContentPollEvent = "test/test";
    var headerVars;
    headerVars = headerVars || {};
    headerVars.disableSendDefaultReason = "Disabled";
    headerVars.disableSendNoAnswerReason = "Disabled";
    var ringingTones;
    ringingTones = ringingTones || [];
    var comf;
    comf = comf || {};
    comf.anno_name = "comfort";
    comf.anno_type = Annotype.CONNECT;
    var ring;
    ring = ring || {};
    ring.anno_name = "ringing";
    ring.anno_type = Annotype.RINGING;
    ringingTones.push(comf, ring);
    var capabilities = sessionData.inCapabilities;
    if (capabilities != null) {
        capabilities.push(Capabilities.PEM);
        capabilities.push(Capabilities.FORKING);
        sessionData.outCapabilities = JSON.stringify(capabilities);
    }
    sessionData.events = JSON.stringify(events);
    sessionData.headerrulevar = JSON.stringify(headerVars);
    sessionData.headerrulesselect = "SipServiceSpecificRulesSet";
    sessionData.ringingtones = JSON.stringify(ringingTones);
    sessionData.upstreamCapabilities = JSON.stringify([]);
    return "success";
}
function callended(session, eventData, localParams) {
    var ret = "success";
    var log = session.log;
    var callstateold = session.callstate;
    session.callstate = "CLOSED";
    session.timeend = Math.floor(new Date() / 1000);
    try {
        if (session.timeanswer != null) {
            session.duration = session.timeend - session.timeanswer;
        }
        else {
            session.duration = "not-started";
        }
    }
    catch (e) {
        session.duration = "exception";
    }
    log.error("Call_{}:State_{}->{}+", session["trace-skey"], callstateold, session.callstate);
    session.loginfo = session.loginfo + session.callstate + ";duration=" + session.duration + ";";
    var logline = {};
    try {
        logline.MSISDN = session.CalledParty;
        logline.ServiceSessionId = session["fsm-id"];
        logline.MsgType = "SIP.INVITE";
        logline.MsgSessionId = session["fsm-id"];
        logline.MsgId = "callid";
        logline.MsgDetails = session.loginfo;
        logline.Servicedetails = "";
        session.loginfo = "";
        logline.GwEventTime = session.timeanswer;
        var now = new Date();
        var logDate = formatDate(now);
        var logTime = formatTime(now);
        logline.LogLineTime = logDate + "." + logTime + "." + ("000" + now.getMilliseconds().toString()).slice(-3);
    }
    catch (e) {
        logline.MSISDN = "";
        logline.ServiceSessionId = "";
        logline.MsgType = "";
        logline.MsgSessionId = "";
        logline.MsgId = "";
        logline.MsgDetails = "";
        logline.Servicedetails = "error at CCRContinue logline";
        logline.LogLineTime = "";
    }
    ;
    logline.TraceLevel = session["fsm-trace-level"];
    session.logline = logline;
    return ret;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFVQSxJQUFLLFlBTUo7QUFORCxXQUFLLFlBQVk7SUFDZixpQ0FBaUIsQ0FBQTtJQUNqQixtQ0FBa0IsQ0FBQTtJQUNsQiw2Q0FBMkIsQ0FBQTtJQUMzQiwyQkFBUyxDQUFBO0lBQ1QsaUNBQWUsQ0FBQTtBQUNqQixDQUFDLEVBTkksWUFBWSxLQUFaLFlBQVksUUFNaEI7QUFzREQsSUFBSyxRQUdKO0FBSEQsV0FBSyxRQUFRO0lBQ1gsK0JBQW1CLENBQUE7SUFDbkIsNEJBQWdCLENBQUE7QUFDbEIsQ0FBQyxFQUhJLFFBQVEsS0FBUixRQUFRLFFBR1o7QUF1QkQsSUFBSyxrQkFJSjtBQUpELFdBQUssa0JBQWtCO0lBQ3RCLHVDQUFpQixDQUFBO0lBQ2pCLHlDQUFtQixDQUFBO0lBQ25CLHVDQUFpQixDQUFBO0FBQ2xCLENBQUMsRUFKSSxrQkFBa0IsS0FBbEIsa0JBQWtCLFFBSXRCO0FBRUQsSUFBSyxtQkFJSjtBQUpELFdBQUssbUJBQW1CO0lBQ3ZCLCtEQUFTLENBQUE7SUFDVCxtRUFBVyxDQUFBO0lBQ1gsdUVBQWEsQ0FBQTtBQUNkLENBQUMsRUFKSSxtQkFBbUIsS0FBbkIsbUJBQW1CLFFBSXZCO0FBZ0NELElBQUssd0JBRUo7QUFGRCxXQUFLLHdCQUF3QjtJQUM1QiwyRUFBK0MsQ0FBQTtBQUNoRCxDQUFDLEVBRkksd0JBQXdCLEtBQXhCLHdCQUF3QixRQUU1QjtBQUVELElBQUsseUJBRUo7QUFGRCxXQUFLLHlCQUF5QjtJQUM3QiwwREFBNkIsQ0FBQTtBQUM5QixDQUFDLEVBRkkseUJBQXlCLEtBQXpCLHlCQUF5QixRQUU3QjtBQW1GRCxDQUFDO0FBQ0QsQ0FBQztBQUNELFNBQVMsU0FBUyxDQUFDLFdBQWUsRUFBQyxTQUFhLEVBQUMsV0FBZTtJQUMvRCxJQUFJLEdBQWUsQ0FBRTtJQUVsQixJQUFJLE9BQWdCLENBQUM7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LEVBQUU7UUFDUixPQUFPLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNwQixPQUFPLENBQUMsZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO1FBQzlCLE9BQU8sQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ3JCLE9BQU8sQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO1FBQzFCLE9BQU8sQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ25CLE9BQU8sQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ3hCLE9BQU8sQ0FBQyxjQUFjLEdBQUcsOEJBQThCLENBQUM7UUFDeEQsT0FBTyxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7S0FDNUI7SUFBQSxDQUFDO0lBQ0YsT0FBTyxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNoRCxPQUFPLENBQUMsT0FBTyxHQUFDLE9BQU8sQ0FBQztJQUN4QixPQUFPLEdBQUcsQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvL2ludGVyZmFjZSBkZWZpbml0aW9uXG5cbmludGVyZmFjZSBMZWcge1xuICBhZGRyZXNzIDogc3RyaW5nO1xuICBuYW1lIDogc3RyaW5nXG59XG5pbnRlcmZhY2UgQ2FsbCB7XG4gIHN0YXRlIDogbnVtYmVyXG59XG5cbmVudW0gQ2FwYWJpbGl0aWVzIHtcbiAgUkVMMVhYID0gXCJSRUwxWFhcIixcbiAgRk9SS0lORz0gXCJGT1JLSU5HXCIsXG4gIFBSRUNPTkRJVElPTj1cIlBSRUNPTkRJVElPTlwiLFxuICBQRU09XCJQRU1cIixcbiAgVVBEQVRFPVwiVVBEQVRFXCJcbn1cblxuaW50ZXJmYWNlIE1lc3NhZ2Uge1xuICBtZXRob2QgOiBbc3RyaW5nXTtcbiAgdHlwZSA6IFtzdHJpbmddO1xuICBib2R5IDogW3N0cmluZ11cbn1cblxuaW50ZXJmYWNlIFNJUCB7XG4gIGNhcGFiaWxpdGllcyA6IFtDYXBhYmlsaXRpZXNdO1xuICBtZXNzYWdlIDogTWVzc2FnZVxufVxuXG5pbnRlcmZhY2UgQ2FsbFN0YXJ0IHtcbiAgY29udGFjdCA6IHN0cmluZztcbiAgY2F1c2U6IHN0cmluZztcbiAgbGVnIDogc3RyaW5nXG59XG5cbmludGVyZmFjZSBDYWxsUG9sbCB7XG4gIG5hbWU6IHN0cmluZztcbiAgdHlwZTogc3RyaW5nO1xuICBsZWc6IHN0cmluZ1xufVxuXG5pbnRlcmZhY2UgRXZlbnQge1xuICBuYW1lIDogc3RyaW5nO1xuICBjYWxsU3RhcnQ/IDogQ2FsbFN0YXJ0O1xuICBjYWxsUG9sbD8gOiBDYWxsUG9sbFxufVxuXG5cbmludGVyZmFjZSBPQ0NQRXZlbnQge1xuICBjYWxsaWQgOiBzdHJpbmc7XG4gIGNhbGwgOiBDYWxsO1xuICBhcyA6IHN0cmluZztcbiAgZXZlbnR0aW1lIDogbnVtYmVyO1xuICBTSVAgOiBTSVA7XG4gIGV2ZW50OiBFdmVudFxufVxuXG5pbnRlcmZhY2UgRXZlbnRzIHtcbiAgU3VjY2Vzc1Jlc3BvbnNlUG9sbEV2ZW50PyA6IHN0cmluZztcbiAgUmF3Q29udGVudFBvbGxFdmVudD8gOiBzdHJpbmc7XG4gIEluZm9Qb2xsRXZlbnQ/OiBzdHJpbmdcbn1cbi8qKlxuICBEZWZpbmUgaGVhZGVyIHZhcmlhYmxlcyB1c2VkIGJ5IGFwcGxpY2F0aW9uXG4qL1xuaW50ZXJmYWNlIEhlYWRlclZhcnMge1xuICBkaXNhYmxlU2VuZERlZmF1bHRSZWFzb24/IDogc3RyaW5nO1xuICBkaXNhYmxlU2VuZE5vQW5zd2VyUmVhc29uPyA6IHN0cmluZ1xufVxuXG5lbnVtIEFubm90eXBlIHtcbiAgQ09OTkVDVCA9IFwiQ09OTkVDVFwiLFxuICBSSU5HSU5HID0gXCJSSU5HXCJcbn1cblxuaW50ZXJmYWNlIFJpbmdpbmdUb25lIHtcbiAgYW5ub19uYW1lIDogc3RyaW5nO1xuICBhbm5vX3R5cGUgOiBBbm5vdHlwZVxufVxuXG5pbnRlcmZhY2UgU2Vzc2lvbiB7XG4gIGxvZyA6IGFueTtcbiAgaW5DYXBhYmlsaXRpZXMgOiBbQ2FwYWJpbGl0aWVzXTtcbiAgb3V0Q2FwYWJpbGl0aWVzPyA6IHN0cmluZztcbiAgZXZlbnRzPyA6IHN0cmluZztcbiAgaGVhZGVycnVsZXZhcj8gOiBzdHJpbmc7XG4gIGhlYWRlcnJ1bGVzc2VsZWN0PyA6IHN0cmluZztcbiAgcmluZ2luZ3RvbmVzPyA6IHN0cmluZztcbiAgc2VuZEFjdGlvbj8gOiBzdHJpbmcgO1xuICBTSVBIZWxwZXIgOiBhbnk7XG4gIFNJUEluaXRpYWxJbnZpdGU/IDogYW55O1xuICBTSVBNZXNzYWdlPyA6IGFueTtcbiAgU0lQTWVzc2FnZVR5cGU/IDogYW55XG59XG5cblxuZW51bSBDYWxsUG9sbEFjdGlvblR5cGUge1xuIEFjY2VwdCA9IFwiYWNjZXB0XCIsXG4gRm9yd2FyZCA9IFwiZm9yd2FyZFwiLFxuIFJlamVjdCA9IFwicmVqZWN0XCIsXG59XG5cbmVudW0gQ2FsbFN0YXJ0QWN0aW9uVHlwZSB7XG4gQWJvcnQgPSAwLFxuIEZvcndhcmQgPSAxLFxuIFJlamVjdE1yZiA9IDJcbn1cblxuXG5cbi8qKlxuIFNldCBhY3Rpb24gZm9yIENhbGxTdGFydCBldmVudFxuKi9cbmludGVyZmFjZSBDYWxsU3RhcnRBY3Rpb24ge1xuIHR5cGUgOiBDYWxsU3RhcnRBY3Rpb25UeXBlO1xuIGVycm9yY29kZSA6IG51bWJlcjtcbiBjYXVzZSA6IHN0cmluZyA7XG4gdXJpIDogc3RyaW5nO1xuIGVhcmx5bWVkaWEgOiBudW1iZXI7XG4gbGVnbmFtZSA6IHN0cmluZyBcbn1cblxuLyoqXG4gU2V0IGFjdGlvbiBmb3IgQ2FsbFBvbGwgZXZlbnRcbiovXG5pbnRlcmZhY2UgQ2FsbFBvbGxBY3Rpb24ge1xuIHR5cGUgOiBDYWxsUG9sbEFjdGlvblR5cGVcbn1cblxuXG4vKipcbiBBcHBsaWNhdGlvbiBjYW4gc2V0IGFjdGlvbiBmb3IgYSBzcGVjaWZpYyBsZWcsIHRoaXMgaXMgYXBwbGljYWJsZSBmb3IgTVJGIGNvbnRhY3RcbiAqL1xuaW50ZXJmYWNlIExlZ0FjdGlvbiB7XG4gdHlwZSA6IENhbGxTdGFydEFjdGlvblR5cGUgO1xuIGxlZ2FjdGlvbiA6IHN0cmluZ1xufVxuXG5lbnVtIE1lZGlhT3BlcmF0aW9uQWN0aW9uVHlwZSB7XG4gUGVyZm9ybU1lZGlhT3BlcmF0aW9uID0gXCJwZXJmb3JtTWVkaWFPcGVyYXRpb25cIlxufVxuXG5lbnVtIE1lZGlhT3BlcmF0aW9uQ29udGVudFR5cGUge1xuIE1TTUwgPSBcImFwcGxpY2F0aW9uL21zbWwreG1sXCJcbn1cblxuaW50ZXJmYWNlIFBlcmZvcm1NZWRpYU9wZXJhdGlvbiB7XG4gQ29udGVudFR5cGUgOiBNZWRpYU9wZXJhdGlvbkNvbnRlbnRUeXBlO1xuIENvbnRlbnQgOiBzdHJpbmdcbn1cblxuaW50ZXJmYWNlIE1lZGlhT3BlcmF0aW9uQWN0aW9uIHtcbiB0eXBlIDogbnVtYmVyO1xuIGxlZ2FjdGlvbiA6IE1lZGlhT3BlcmF0aW9uQWN0aW9uVHlwZTtcbiBwZXJmb3JtTWVkaWFPcGVyYXRpb24gOiBQZXJmb3JtTWVkaWFPcGVyYXRpb25cbn1cblxuaW50ZXJmYWNlIEFjdGlvbiB7XG4gYWN0aW9uIDogYW55IFxufVxuXG5cbmludGVyZmFjZSBIZWFkZXIge1xuIGhlYWRlciA6IHN0cmluZztcbiB2YWx1ZSA6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIFFIZWFkZXIge1xuIFByaXZhY3kgOiBzdHJpbmc7XG4gUmVhc29uIDogc3RyaW5nIDtcbn1cblxuaW50ZXJmYWNlIFBhcmFtZXRlciB7XG4gdHJhbnNwb3J0IDogc3RyaW5nO1xuIHVzZXIgOiBzdHJpbmcgO1xufVxuXG5pbnRlcmZhY2UgVVJJIHtcbiBzY2hlbWUgOiBzdHJpbmc7XG4gYXV0aG9yaXR5IDogc3RyaW5nIDtcbiBnciA6IHN0cmluZyA7XG4gaG9zdDogc3RyaW5nIDtcbiBsciA6IHN0cmluZyA7XG4gbWFkZHIgOiBzdHJpbmcgO1xuIHBvcnQgOiBudW1iZXIgIDtcbiB1c2VyIDogc3RyaW5nIDtcbiBwYXJhbWV0ZXJzIDogW1BhcmFtZXRlcl07XG4gcWhlYWRlciA6IFtRSGVhZGVyXTtcbn1cblxuaW50ZXJmYWNlIEFkZHJlc3Mge1xuIGRpc3BsYXlOYW1lIDogc3RyaW5nO1xuIHVyaSA6IFVSSSBcbn1cblxuaW50ZXJmYWNlIEhpc3RvcnlJbmZvIGltcGxlbWVudHMgSGVhZGVyIHtcbiBhZGRyZXNzIDogQWRkcmVzcztcbiBpbmRleCA6IHN0cmluZ1xufVxuXG5pbnRlcmZhY2UgUEFJIGltcGxlbWVudHMgSGVhZGVyICB7XG4gYWRkcmVzcyA6IEFkZHJlc3Ncbn1cblxuaW50ZXJmYWNlIEZyb20gaW1wbGVtZW50cyBIZWFkZXIge1xuIGFkZHJlc3MgOiBBZGRyZXNzO1xuIHRhZyA6IHN0cmluZyA7XG59XG5cbmludGVyZmFjZSBUbyBpbXBsZW1lbnRzIEhlYWRlciB7XG4gYWRkcmVzcyA6IEFkZHJlc3M7XG4gdGFnIDogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgUENWIGltcGxlbWVudHMgSGVhZGVyIHtcbiBpY2lkX2dlbmVyYXRlZF9hdDogc3RyaW5nIDtcbiBpY2lkX3ZhbHVlIDogc3RyaW5nIDtcbiBvYWlkIDogc3RyaW5nO1xuIHRhaWQgOiBzdHJpbmc7XG4gb3NpZCA6IHN0cmluZztcbiB0c2lkIDogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgUmVzdWx0Q29kZSB7XG4gIHJlc3VsdENvZGUgOiBzdHJpbmcgO1xufVxuXG47Ly9NQUlOQkxPQ0tcbjtcclxuZnVuY3Rpb24gYXJtZXZlbnRzKHNlc3Npb25EYXRhOmFueSxldmVudERhdGE6YW55LGxvY2FsUGFyYW1zOmFueSk6IGFueSB7XHJcbiBsZXQgcmV0OiBSZXN1bHRDb2RlIDtcclxuXHJcbiAgICBsZXQgc3RhdHVzMiA6IHN0cmluZztcclxuICAgIGxldCBldmVudHMgOiBFdmVudHM7XHJcbiAgICBldmVudHMgPSBldmVudHMgfHwge307XHJcbiAgICBldmVudHMuSW5mb1BvbGxFdmVudD1cIm51bGxcIjtcclxuICAgIGV2ZW50cy5TdWNjZXNzUmVzcG9uc2VQb2xsRXZlbnQ9XCJudWxsXCI7XHJcbiAgICBldmVudHMuUmF3Q29udGVudFBvbGxFdmVudD1cInRlc3QvdGVzdFwiO1xyXG5cclxuICAgIGxldCBoZWFkZXJWYXJzIDogSGVhZGVyVmFycztcclxuICAgIGhlYWRlclZhcnMgPSBoZWFkZXJWYXJzIHx8IHt9O1xyXG4gICAgaGVhZGVyVmFycy5kaXNhYmxlU2VuZERlZmF1bHRSZWFzb24gPSBcIkRpc2FibGVkXCI7XHJcbiAgICBoZWFkZXJWYXJzLmRpc2FibGVTZW5kTm9BbnN3ZXJSZWFzb24gPSBcIkRpc2FibGVkXCI7XHJcblxyXG4gICAgbGV0IHJpbmdpbmdUb25lcyA6IFtSaW5naW5nVG9uZV07XHJcbiAgICByaW5naW5nVG9uZXMgPSByaW5naW5nVG9uZXMgfHwgW107XHJcbiAgICBsZXQgY29tZiA6IFJpbmdpbmdUb25lO1xyXG4gICAgY29tZiA9IGNvbWYgfHwge307XHJcbiAgICBjb21mLmFubm9fbmFtZT1cImNvbWZvcnRcIjtcclxuICAgIGNvbWYuYW5ub190eXBlPUFubm90eXBlLkNPTk5FQ1Q7XHJcbiAgICBsZXQgcmluZyA6IFJpbmdpbmdUb25lO1xyXG4gICAgcmluZyA9IHJpbmcgfHwge307XHJcbiAgICByaW5nLmFubm9fbmFtZT1cInJpbmdpbmdcIjtcclxuICAgIHJpbmcuYW5ub190eXBlPUFubm90eXBlLlJJTkdJTkc7XHJcbiAgICByaW5naW5nVG9uZXMucHVzaChjb21mLCByaW5nKTtcclxuXHJcbiAgICBsZXQgY2FwYWJpbGl0aWVzID0gc2Vzc2lvbkRhdGEuaW5DYXBhYmlsaXRpZXM7XHJcbiAgICBpZiggY2FwYWJpbGl0aWVzIT1udWxsKXtcclxuICAgICAgICBjYXBhYmlsaXRpZXMucHVzaChDYXBhYmlsaXRpZXMuUEVNKTtcclxuICAgICAgICBjYXBhYmlsaXRpZXMucHVzaChDYXBhYmlsaXRpZXMuRk9SS0lORyk7XHJcbiAgICAgICAgc2Vzc2lvbkRhdGEub3V0Q2FwYWJpbGl0aWVzID0gSlNPTi5zdHJpbmdpZnkoY2FwYWJpbGl0aWVzKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXNzaW9uRGF0YS5ldmVudHMgPSBKU09OLnN0cmluZ2lmeShldmVudHMpO1xyXG4gICAgc2Vzc2lvbkRhdGEuaGVhZGVycnVsZXZhcj1KU09OLnN0cmluZ2lmeShoZWFkZXJWYXJzKTtcclxuICAgIHNlc3Npb25EYXRhLmhlYWRlcnJ1bGVzc2VsZWN0ID0gXCJTaXBTZXJ2aWNlU3BlY2lmaWNSdWxlc1NldFwiO1xyXG4gICAgc2Vzc2lvbkRhdGEucmluZ2luZ3RvbmVzID0gSlNPTi5zdHJpbmdpZnkocmluZ2luZ1RvbmVzKTtcclxuICAgIHNlc3Npb25EYXRhLnVwc3RyZWFtQ2FwYWJpbGl0aWVzPUpTT04uc3RyaW5naWZ5KFtdKTtcclxuXHJcbiAgICByZXR1cm4gXCJzdWNjZXNzXCI7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbGxlbmRlZChzZXNzaW9uIDogYW55LCBldmVudERhdGEgOiBhbnksIGxvY2FsUGFyYW1zOiBhbnkgKXtcclxuICAgIGxldCByZXQ6IHN0cmluZyA9IFwic3VjY2Vzc1wiO1xyXG4gICAgLyogZW50ZXIgaGVyZSB5b3VyIGNvZGUgKi9cclxuXHJcbiAgICBsZXQgbG9nIDogYW55ID0gc2Vzc2lvbi5sb2c7XHJcbiAgICBsZXQgY2FsbHN0YXRlb2xkID0gc2Vzc2lvbi5jYWxsc3RhdGU7XHJcbiAgICBzZXNzaW9uLmNhbGxzdGF0ZSAgPVwiQ0xPU0VEXCI7XHJcbiAgICBzZXNzaW9uLnRpbWVlbmQ9IE1hdGguZmxvb3IobmV3IERhdGUoKS8xMDAwKTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgaWYgKHNlc3Npb24udGltZWFuc3dlciE9bnVsbCkge1xyXG4gICAgICAgICAgICBzZXNzaW9uLmR1cmF0aW9uPSBzZXNzaW9uLnRpbWVlbmQgLSBzZXNzaW9uLnRpbWVhbnN3ZXI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc2Vzc2lvbi5kdXJhdGlvbj1cIm5vdC1zdGFydGVkXCI7ICAgIFxyXG4gICAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICBzZXNzaW9uLmR1cmF0aW9uPVwiZXhjZXB0aW9uXCI7XHJcbiAgICB9XHJcblxyXG4gICAgbG9nLmVycm9yKFwiQ2FsbF97fTpTdGF0ZV97fS0+e30rXCIsc2Vzc2lvbltcInRyYWNlLXNrZXlcIl0sY2FsbHN0YXRlb2xkLHNlc3Npb24uY2FsbHN0YXRlKTsgIFxyXG4gICAgc2Vzc2lvbi5sb2dpbmZvID0gc2Vzc2lvbi5sb2dpbmZvK3Nlc3Npb24uY2FsbHN0YXRlK1wiO2R1cmF0aW9uPVwiK3Nlc3Npb24uZHVyYXRpb24rXCI7XCI7ICAgXHJcblxyXG4gICAgLy9wcmVwYXJlIHRoZSBMT0cgbGluZSAtIHNlbmQgdG8gdGhlIGxvZ19zaXBkZW1vIHByb2Nlc3MgXHJcbiAgICBsZXQgbG9nbGluZSA6IExPRyA9IHt9O1xyXG4gICAgdHJ5e1xyXG4gICAgICAgIGxvZ2xpbmUuTVNJU0ROID0gc2Vzc2lvbi5DYWxsZWRQYXJ0eTtcclxuICAgICAgICBsb2dsaW5lLlNlcnZpY2VTZXNzaW9uSWQgPSBzZXNzaW9uW1wiZnNtLWlkXCJdO1xyXG4gICAgICAgIGxvZ2xpbmUuTXNnVHlwZSA9IFwiU0lQLklOVklURVwiO1xyXG4gICAgICAgIGxvZ2xpbmUuTXNnU2Vzc2lvbklkID0gc2Vzc2lvbltcImZzbS1pZFwiXTtcclxuICAgICAgICBsb2dsaW5lLk1zZ0lkID0gXCJjYWxsaWRcIjtcclxuICAgICAgICBsb2dsaW5lLk1zZ0RldGFpbHMgPSBzZXNzaW9uLmxvZ2luZm87XHJcbiAgICAgICAgbG9nbGluZS5TZXJ2aWNlZGV0YWlscyA9IFwiXCI7XHJcbiAgICAgICAgc2Vzc2lvbi5sb2dpbmZvPVwiXCI7XHJcblxyXG4gICAgICAgIC8vdGltZXN0YW1wIGFkZGVkIGJ5IEdXIGJlZm9yZSBpdCBwdXQgaXQgaW50byB0aGUgcXVldWUgdG8gUlRFXHJcbiAgICAgICAgbG9nbGluZS5Hd0V2ZW50VGltZSA9IHNlc3Npb24udGltZWFuc3dlcjsgXHJcblxyXG4gICAgICAgIGxldCBub3cgOiBEYXRlID0gbmV3IERhdGUoKTtcclxuICAgICAgICBsZXQgbG9nRGF0ZSA6IHN0cmluZyA9IGZvcm1hdERhdGUobm93KTtcclxuICAgICAgICBsZXQgbG9nVGltZSA6IHN0cmluZyA9IGZvcm1hdFRpbWUobm93KTtcclxuICAgICAgICBsb2dsaW5lLkxvZ0xpbmVUaW1lID0gbG9nRGF0ZSsgXCIuXCIgKyBsb2dUaW1lICsgXCIuXCIrKFwiMDAwXCIgKyBub3cuZ2V0TWlsbGlzZWNvbmRzKCkudG9TdHJpbmcoKSkuc2xpY2UoLTMpOyAgICAgICAgXHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgbG9nbGluZS5NU0lTRE4gPSBcIlwiO1xyXG4gICAgICAgIGxvZ2xpbmUuU2VydmljZVNlc3Npb25JZCA9IFwiXCI7XHJcbiAgICAgICAgbG9nbGluZS5Nc2dUeXBlID0gXCJcIjtcclxuICAgICAgICBsb2dsaW5lLk1zZ1Nlc3Npb25JZCA9IFwiXCI7XHJcbiAgICAgICAgbG9nbGluZS5Nc2dJZCA9IFwiXCI7XHJcbiAgICAgICAgbG9nbGluZS5Nc2dEZXRhaWxzID0gXCJcIjtcclxuICAgICAgICBsb2dsaW5lLlNlcnZpY2VkZXRhaWxzID0gXCJlcnJvciBhdCBDQ1JDb250aW51ZSBsb2dsaW5lXCI7XHJcbiAgICAgICAgbG9nbGluZS5Mb2dMaW5lVGltZSA9IFwiXCI7XHJcbiAgICB9O1xyXG4gICAgbG9nbGluZS5UcmFjZUxldmVsID0gc2Vzc2lvbltcImZzbS10cmFjZS1sZXZlbFwiXTsgICAgXHJcbiAgICBzZXNzaW9uLmxvZ2xpbmU9bG9nbGluZTsgICAgXHJcbiAgICByZXR1cm4gcmV0O1xyXG59Il19