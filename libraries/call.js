"use strict";
var Capabilities;
(function (Capabilities) {
    Capabilities["REL1XX"] = "REL1XX";
    Capabilities["FORKING"] = "FORKING";
    Capabilities["PRECONDITION"] = "PRECONDITION";
    Capabilities["PEM"] = "PEM";
    Capabilities["UPDATE"] = "UPDATE";
})(Capabilities || (Capabilities = {}));
var Annotype;
(function (Annotype) {
    Annotype["CONNECT"] = "CONNECT";
    Annotype["RINGING"] = "RING";
})(Annotype || (Annotype = {}));
var CallPollActionType;
(function (CallPollActionType) {
    CallPollActionType["Accept"] = "accept";
    CallPollActionType["Forward"] = "forward";
    CallPollActionType["Reject"] = "reject";
})(CallPollActionType || (CallPollActionType = {}));
var CallStartActionType;
(function (CallStartActionType) {
    CallStartActionType[CallStartActionType["Abort"] = 0] = "Abort";
    CallStartActionType[CallStartActionType["Forward"] = 1] = "Forward";
    CallStartActionType[CallStartActionType["RejectMrf"] = 2] = "RejectMrf";
})(CallStartActionType || (CallStartActionType = {}));
var MediaOperationActionType;
(function (MediaOperationActionType) {
    MediaOperationActionType["PerformMediaOperation"] = "performMediaOperation";
})(MediaOperationActionType || (MediaOperationActionType = {}));
var MediaOperationContentType;
(function (MediaOperationContentType) {
    MediaOperationContentType["MSML"] = "application/msml+xml";
})(MediaOperationContentType || (MediaOperationContentType = {}));
;
;
function armevents(sessionData, eventData, localParams) {
    var ret;
    var status2;
    var events;
    events = events || {};
    events.InfoPollEvent = "null";
    events.SuccessResponsePollEvent = "null";
    events.RawContentPollEvent = "test/test";
    var headerVars;
    headerVars = headerVars || {};
    headerVars.disableSendDefaultReason = "Disabled";
    headerVars.disableSendNoAnswerReason = "Disabled";
    var ringingTones;
    ringingTones = ringingTones || [];
    var comf;
    comf = comf || {};
    comf.anno_name = "comfort";
    comf.anno_type = Annotype.CONNECT;
    var ring;
    ring = ring || {};
    ring.anno_name = "ringing";
    ring.anno_type = Annotype.RINGING;
    ringingTones.push(comf, ring);
    var capabilities = sessionData.inCapabilities;
    if (capabilities != null) {
        capabilities.push(Capabilities.PEM);
        capabilities.push(Capabilities.FORKING);
        sessionData.outCapabilities = JSON.stringify(capabilities);
    }
    sessionData.events = JSON.stringify(events);
    sessionData.headerrulevar = JSON.stringify(headerVars);
    sessionData.headerrulesselect = "SipServiceSpecificRulesSet";
    sessionData.ringingtones = JSON.stringify(ringingTones);
    sessionData.upstreamCapabilities = JSON.stringify([]);
    return "success";
}
function prepareCallPollAccept(session, event, localParams) {
    var log = session.log;
    try {
        var pollAction = void 0;
        pollAction = pollAction || {};
        pollAction.type = CallPollActionType.Accept;
        session.sendAction = JSON.stringify(pollAction);
        return "success";
    }
    catch (e) {
        log.debug("prepareCallPollAccept Log: {}", e);
        return "error.exception";
    }
}
function callended(session, eventData, localParams) {
    var ret = "success";
    var log = session.log;
    var callstateold = session.callstate;
    session.callstate = "CLOSED";
    session.timeend = Math.floor(new Date() / 1000);
    try {
        if (session.timeanswer != null) {
            session.duration = session.timeend - session.timeanswer;
        }
        else {
            session.duration = "not-started";
        }
    }
    catch (e) {
        session.duration = "exception";
    }
    log.error("Call_{}:State_{}->{}+", session["trace-skey"], callstateold, session.callstate);
    session.loginfo = session.loginfo + session.callstate + ";duration=" + session.duration + ";";
    var logline = {};
    try {
        logline.MSISDN = session.CalledParty;
        logline.ServiceSessionId = session["fsm-id"];
        logline.MsgType = "SIP.INVITE";
        logline.MsgSessionId = session["fsm-id"];
        logline.MsgId = "callid";
        logline.MsgDetails = session.loginfo;
        logline.Servicedetails = "";
        session.loginfo = "";
        logline.GwEventTime = session.timeanswer;
        var now = new Date();
        var logDate = formatDate(now);
        var logTime = formatTime(now);
        logline.LogLineTime = logDate + "." + logTime + "." + ("000" + now.getMilliseconds().toString()).slice(-3);
    }
    catch (e) {
        logline.MSISDN = "";
        logline.ServiceSessionId = "";
        logline.MsgType = "";
        logline.MsgSessionId = "";
        logline.MsgId = "";
        logline.MsgDetails = "";
        logline.Servicedetails = "error at CCRContinue logline";
        logline.LogLineTime = "";
    }
    ;
    logline.TraceLevel = session["fsm-trace-level"];
    session.logline = logline;
    return ret;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFVQSxJQUFLLFlBTUo7QUFORCxXQUFLLFlBQVk7SUFDZixpQ0FBaUIsQ0FBQTtJQUNqQixtQ0FBa0IsQ0FBQTtJQUNsQiw2Q0FBMkIsQ0FBQTtJQUMzQiwyQkFBUyxDQUFBO0lBQ1QsaUNBQWUsQ0FBQTtBQUNqQixDQUFDLEVBTkksWUFBWSxLQUFaLFlBQVksUUFNaEI7QUFzREQsSUFBSyxRQUdKO0FBSEQsV0FBSyxRQUFRO0lBQ1gsK0JBQW1CLENBQUE7SUFDbkIsNEJBQWdCLENBQUE7QUFDbEIsQ0FBQyxFQUhJLFFBQVEsS0FBUixRQUFRLFFBR1o7QUF1QkQsSUFBSyxrQkFJSjtBQUpELFdBQUssa0JBQWtCO0lBQ3RCLHVDQUFpQixDQUFBO0lBQ2pCLHlDQUFtQixDQUFBO0lBQ25CLHVDQUFpQixDQUFBO0FBQ2xCLENBQUMsRUFKSSxrQkFBa0IsS0FBbEIsa0JBQWtCLFFBSXRCO0FBRUQsSUFBSyxtQkFJSjtBQUpELFdBQUssbUJBQW1CO0lBQ3ZCLCtEQUFTLENBQUE7SUFDVCxtRUFBVyxDQUFBO0lBQ1gsdUVBQWEsQ0FBQTtBQUNkLENBQUMsRUFKSSxtQkFBbUIsS0FBbkIsbUJBQW1CLFFBSXZCO0FBZ0NELElBQUssd0JBRUo7QUFGRCxXQUFLLHdCQUF3QjtJQUM1QiwyRUFBK0MsQ0FBQTtBQUNoRCxDQUFDLEVBRkksd0JBQXdCLEtBQXhCLHdCQUF3QixRQUU1QjtBQUVELElBQUsseUJBRUo7QUFGRCxXQUFLLHlCQUF5QjtJQUM3QiwwREFBNkIsQ0FBQTtBQUM5QixDQUFDLEVBRkkseUJBQXlCLEtBQXpCLHlCQUF5QixRQUU3QjtBQW1GRCxDQUFDO0FBQ0QsQ0FBQztBQUNELFNBQVMsU0FBUyxDQUFDLFdBQWUsRUFBQyxTQUFhLEVBQUMsV0FBZTtJQUMvRCxJQUFJLEdBQWUsQ0FBRTtJQUVsQixJQUFJLE9BQWdCLENBQUM7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IHtcbiAgYWRkcmVzcyA6IHN0cmluZztcbiAgbmFtZSA6IHN0cmluZ1xufVxuaW50ZXJmYWNlIENhbGwge1xuICBzdGF0ZSA6IG51bWJlclxufVxuXG5lbnVtIENhcGFiaWxpdGllcyB7XG4gIFJFTDFYWCA9IFwiUkVMMVhYXCIsXG4gIEZPUktJTkc9IFwiRk9SS0lOR1wiLFxuICBQUkVDT05ESVRJT049XCJQUkVDT05ESVRJT05cIixcbiAgUEVNPVwiUEVNXCIsXG4gIFVQREFURT1cIlVQREFURVwiXG59XG5cbmludGVyZmFjZSBNZXNzYWdlIHtcbiAgbWV0aG9kIDogW3N0cmluZ107XG4gIHR5cGUgOiBbc3RyaW5nXTtcbiAgYm9keSA6IFtzdHJpbmddXG59XG5cbmludGVyZmFjZSBTSVAge1xuICBjYXBhYmlsaXRpZXMgOiBbQ2FwYWJpbGl0aWVzXTtcbiAgbWVzc2FnZSA6IE1lc3NhZ2Vcbn1cblxuaW50ZXJmYWNlIENhbGxTdGFydCB7XG4gIGNvbnRhY3QgOiBzdHJpbmc7XG4gIGNhdXNlOiBzdHJpbmc7XG4gIGxlZyA6IHN0cmluZ1xufVxuXG5pbnRlcmZhY2UgQ2FsbFBvbGwge1xuICBuYW1lOiBzdHJpbmc7XG4gIHR5cGU6IHN0cmluZztcbiAgbGVnOiBzdHJpbmdcbn1cblxuaW50ZXJmYWNlIEV2ZW50IHtcbiAgbmFtZSA6IHN0cmluZztcbiAgY2FsbFN0YXJ0PyA6IENhbGxTdGFydDtcbiAgY2FsbFBvbGw/IDogQ2FsbFBvbGxcbn1cblxuXG5pbnRlcmZhY2UgT0NDUEV2ZW50IHtcbiAgY2FsbGlkIDogc3RyaW5nO1xuICBjYWxsIDogQ2FsbDtcbiAgYXMgOiBzdHJpbmc7XG4gIGV2ZW50dGltZSA6IG51bWJlcjtcbiAgU0lQIDogU0lQO1xuICBldmVudDogRXZlbnRcbn1cblxuaW50ZXJmYWNlIEV2ZW50cyB7XG4gIFN1Y2Nlc3NSZXNwb25zZVBvbGxFdmVudD8gOiBzdHJpbmc7XG4gIFJhd0NvbnRlbnRQb2xsRXZlbnQ/IDogc3RyaW5nO1xuICBJbmZvUG9sbEV2ZW50Pzogc3RyaW5nXG59XG4vKipcbiAgRGVmaW5lIGhlYWRlciB2YXJpYWJsZXMgdXNlZCBieSBhcHBsaWNhdGlvblxuKi9cbmludGVyZmFjZSBIZWFkZXJWYXJzIHtcbiAgZGlzYWJsZVNlbmREZWZhdWx0UmVhc29uPyA6IHN0cmluZztcbiAgZGlzYWJsZVNlbmROb0Fuc3dlclJlYXNvbj8gOiBzdHJpbmdcbn1cblxuZW51bSBBbm5vdHlwZSB7XG4gIENPTk5FQ1QgPSBcIkNPTk5FQ1RcIixcbiAgUklOR0lORyA9IFwiUklOR1wiXG59XG5cbmludGVyZmFjZSBSaW5naW5nVG9uZSB7XG4gIGFubm9fbmFtZSA6IHN0cmluZztcbiAgYW5ub190eXBlIDogQW5ub3R5cGVcbn1cblxuaW50ZXJmYWNlIFNlc3Npb24ge1xuICBsb2cgOiBhbnk7XG4gIGluQ2FwYWJpbGl0aWVzIDogW0NhcGFiaWxpdGllc107XG4gIG91dENhcGFiaWxpdGllcz8gOiBzdHJpbmc7XG4gIGV2ZW50cz8gOiBzdHJpbmc7XG4gIGhlYWRlcnJ1bGV2YXI/IDogc3RyaW5nO1xuICBoZWFkZXJydWxlc3NlbGVjdD8gOiBzdHJpbmc7XG4gIHJpbmdpbmd0b25lcz8gOiBzdHJpbmc7XG4gIHNlbmRBY3Rpb24/IDogc3RyaW5nIDtcbiAgU0lQSGVscGVyIDogYW55O1xuICBTSVBJbml0aWFsSW52aXRlPyA6IGFueTtcbiAgU0lQTWVzc2FnZT8gOiBhbnk7XG4gIFNJUE1lc3NhZ2VUeXBlPyA6IGFueVxufVxuXG5cbmVudW0gQ2FsbFBvbGxBY3Rpb25UeXBlIHtcbiBBY2NlcHQgPSBcImFjY2VwdFwiLFxuIEZvcndhcmQgPSBcImZvcndhcmRcIixcbiBSZWplY3QgPSBcInJlamVjdFwiLFxufVxuXG5lbnVtIENhbGxTdGFydEFjdGlvblR5cGUge1xuIEFib3J0ID0gMCxcbiBGb3J3YXJkID0gMSxcbiBSZWplY3RNcmYgPSAyXG59XG5cblxuXG4vKipcbiBTZXQgYWN0aW9uIGZvciBDYWxsU3RhcnQgZXZlbnRcbiovXG5pbnRlcmZhY2UgQ2FsbFN0YXJ0QWN0aW9uIHtcbiB0eXBlIDogQ2FsbFN0YXJ0QWN0aW9uVHlwZTtcbiBlcnJvcmNvZGUgOiBudW1iZXI7XG4gY2F1c2UgOiBzdHJpbmcgO1xuIHVyaSA6IHN0cmluZztcbiBlYXJseW1lZGlhIDogbnVtYmVyO1xuIGxlZ25hbWUgOiBzdHJpbmcgXG59XG5cbi8qKlxuIFNldCBhY3Rpb24gZm9yIENhbGxQb2xsIGV2ZW50XG4qL1xuaW50ZXJmYWNlIENhbGxQb2xsQWN0aW9uIHtcbiB0eXBlIDogQ2FsbFBvbGxBY3Rpb25UeXBlXG59XG5cblxuLyoqXG4gQXBwbGljYXRpb24gY2FuIHNldCBhY3Rpb24gZm9yIGEgc3BlY2lmaWMgbGVnLCB0aGlzIGlzIGFwcGxpY2FibGUgZm9yIE1SRiBjb250YWN0XG4gKi9cbmludGVyZmFjZSBMZWdBY3Rpb24ge1xuIHR5cGUgOiBDYWxsU3RhcnRBY3Rpb25UeXBlIDtcbiBsZWdhY3Rpb24gOiBzdHJpbmdcbn1cblxuZW51bSBNZWRpYU9wZXJhdGlvbkFjdGlvblR5cGUge1xuIFBlcmZvcm1NZWRpYU9wZXJhdGlvbiA9IFwicGVyZm9ybU1lZGlhT3BlcmF0aW9uXCJcbn1cblxuZW51bSBNZWRpYU9wZXJhdGlvbkNvbnRlbnRUeXBlIHtcbiBNU01MID0gXCJhcHBsaWNhdGlvbi9tc21sK3htbFwiXG59XG5cbmludGVyZmFjZSBQZXJmb3JtTWVkaWFPcGVyYXRpb24ge1xuIENvbnRlbnRUeXBlIDogTWVkaWFPcGVyYXRpb25Db250ZW50VHlwZTtcbiBDb250ZW50IDogc3RyaW5nXG59XG5cbmludGVyZmFjZSBNZWRpYU9wZXJhdGlvbkFjdGlvbiB7XG4gdHlwZSA6IG51bWJlcjtcbiBsZWdhY3Rpb24gOiBNZWRpYU9wZXJhdGlvbkFjdGlvblR5cGU7XG4gcGVyZm9ybU1lZGlhT3BlcmF0aW9uIDogUGVyZm9ybU1lZGlhT3BlcmF0aW9uXG59XG5cbmludGVyZmFjZSBBY3Rpb24ge1xuIGFjdGlvbiA6IGFueSBcbn1cblxuXG5pbnRlcmZhY2UgSGVhZGVyIHtcbiBoZWFkZXIgOiBzdHJpbmc7XG4gdmFsdWUgOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBRSGVhZGVyIHtcbiBQcml2YWN5IDogc3RyaW5nO1xuIFJlYXNvbiA6IHN0cmluZyA7XG59XG5cbmludGVyZmFjZSBQYXJhbWV0ZXIge1xuIHRyYW5zcG9ydCA6IHN0cmluZztcbiB1c2VyIDogc3RyaW5nIDtcbn1cblxuaW50ZXJmYWNlIFVSSSB7XG4gc2NoZW1lIDogc3RyaW5nO1xuIGF1dGhvcml0eSA6IHN0cmluZyA7XG4gZ3IgOiBzdHJpbmcgO1xuIGhvc3Q6IHN0cmluZyA7XG4gbHIgOiBzdHJpbmcgO1xuIG1hZGRyIDogc3RyaW5nIDtcbiBwb3J0IDogbnVtYmVyICA7XG4gdXNlciA6IHN0cmluZyA7XG4gcGFyYW1ldGVycyA6IFtQYXJhbWV0ZXJdO1xuIHFoZWFkZXIgOiBbUUhlYWRlcl07XG59XG5cbmludGVyZmFjZSBBZGRyZXNzIHtcbiBkaXNwbGF5TmFtZSA6IHN0cmluZztcbiB1cmkgOiBVUkkgXG59XG5cbmludGVyZmFjZSBIaXN0b3J5SW5mbyBpbXBsZW1lbnRzIEhlYWRlciB7XG4gYWRkcmVzcyA6IEFkZHJlc3M7XG4gaW5kZXggOiBzdHJpbmdcbn1cblxuaW50ZXJmYWNlIFBBSSBpbXBsZW1lbnRzIEhlYWRlciAge1xuIGFkZHJlc3MgOiBBZGRyZXNzXG59XG5cbmludGVyZmFjZSBGcm9tIGltcGxlbWVudHMgSGVhZGVyIHtcbiBhZGRyZXNzIDogQWRkcmVzcztcbiB0YWcgOiBzdHJpbmcgO1xufVxuXG5pbnRlcmZhY2UgVG8gaW1wbGVtZW50cyBIZWFkZXIge1xuIGFkZHJlc3MgOiBBZGRyZXNzO1xuIHRhZyA6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIFBDViBpbXBsZW1lbnRzIEhlYWRlciB7XG4gaWNpZF9nZW5lcmF0ZWRfYXQ6IHN0cmluZyA7XG4gaWNpZF92YWx1ZSA6IHN0cmluZyA7XG4gb2FpZCA6IHN0cmluZztcbiB0YWlkIDogc3RyaW5nO1xuIG9zaWQgOiBzdHJpbmc7XG4gdHNpZCA6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIFJlc3VsdENvZGUge1xuICByZXN1bHRDb2RlIDogc3RyaW5nIDtcbn1cblxuOy8vTUFJTkJMT0NLXG47XHJcbmZ1bmN0aW9uIGFybWV2ZW50cyhzZXNzaW9uRGF0YTphbnksZXZlbnREYXRhOmFueSxsb2NhbFBhcmFtczphbnkpOiBhbnkge1xyXG4gbGV0IHJldDogUmVzdWx0Q29kZSA7XHJcblxyXG4gICAgbGV0IHN0YXR1czIgOiBzdHJpbmc7XHJcbiAgICBsZXQgZXZlbnRzIDogRXZlbnRzO1xyXG4gICAgZXZlbnRzID0gZXZlbnRzIHx8IHt9O1xyXG4gICAgZXZlbnRzLkluZm9Qb2xsRXZlbnQ9XCJudWxsXCI7XHJcbiAgICBldmVudHMuU3VjY2Vzc1Jlc3BvbnNlUG9sbEV2ZW50PVwibnVsbFwiO1xyXG4gICAgZXZlbnRzLlJhd0NvbnRlbnRQb2xsRXZlbnQ9XCJ0ZXN0L3Rlc3RcIjtcclxuXHJcbiAgICBsZXQgaGVhZGVyVmFycyA6IEhlYWRlclZhcnM7XHJcbiAgICBoZWFkZXJWYXJzID0gaGVhZGVyVmFycyB8fCB7fTtcclxuICAgIGhlYWRlclZhcnMuZGlzYWJsZVNlbmREZWZhdWx0UmVhc29uID0gXCJEaXNhYmxlZFwiO1xyXG4gICAgaGVhZGVyVmFycy5kaXNhYmxlU2VuZE5vQW5zd2VyUmVhc29uID0gXCJEaXNhYmxlZFwiO1xyXG5cclxuICAgIGxldCByaW5naW5nVG9uZXMgOiBbUmluZ2luZ1RvbmVdO1xyXG4gICAgcmluZ2luZ1RvbmVzID0gcmluZ2luZ1RvbmVzIHx8IFtdO1xyXG4gICAgbGV0IGNvbWYgOiBSaW5naW5nVG9uZTtcclxuICAgIGNvbWYgPSBjb21mIHx8IHt9O1xyXG4gICAgY29tZi5hbm5vX25hbWU9XCJjb21mb3J0XCI7XHJcbiAgICBjb21mLmFubm9fdHlwZT1Bbm5vdHlwZS5DT05ORUNUO1xyXG4gICAgbGV0IHJpbmcgOiBSaW5naW5nVG9uZTtcclxuICAgIHJpbmcgPSByaW5nIHx8IHt9O1xyXG4gICAgcmluZy5hbm5vX25hbWU9XCJyaW5naW5nXCI7XHJcbiAgICByaW5nLmFubm9fdHlwZT1Bbm5vdHlwZS5SSU5HSU5HO1xyXG4gICAgcmluZ2luZ1RvbmVzLnB1c2goY29tZiwgcmluZyk7XHJcblxyXG4gICAgbGV0IGNhcGFiaWxpdGllcyA9IHNlc3Npb25EYXRhLmluQ2FwYWJpbGl0aWVzO1xyXG4gICAgaWYoIGNhcGFiaWxpdGllcyE9bnVsbCl7XHJcbiAgICAgICAgY2FwYWJpbGl0aWVzLnB1c2goQ2FwYWJpbGl0aWVzLlBFTSk7XHJcbiAgICAgICAgY2FwYWJpbGl0aWVzLnB1c2goQ2FwYWJpbGl0aWVzLkZPUktJTkcpO1xyXG4gICAgICAgIHNlc3Npb25EYXRhLm91dENhcGFiaWxpdGllcyA9IEpTT04uc3RyaW5naWZ5KGNhcGFiaWxpdGllcyk7XHJcbiAgICB9XHJcblxyXG4gICAgc2Vzc2lvbkRhdGEuZXZlbnRzID0gSlNPTi5zdHJpbmdpZnkoZXZlbnRzKTtcclxuICAgIHNlc3Npb25EYXRhLmhlYWRlcnJ1bGV2YXI9SlNPTi5zdHJpbmdpZnkoaGVhZGVyVmFycyk7XHJcbiAgICBzZXNzaW9uRGF0YS5oZWFkZXJydWxlc3NlbGVjdCA9IFwiU2lwU2VydmljZVNwZWNpZmljUnVsZXNTZXRcIjtcclxuICAgIHNlc3Npb25EYXRhLnJpbmdpbmd0b25lcyA9IEpTT04uc3RyaW5naWZ5KHJpbmdpbmdUb25lcyk7XHJcbiAgICBzZXNzaW9uRGF0YS51cHN0cmVhbUNhcGFiaWxpdGllcz1KU09OLnN0cmluZ2lmeShbXSk7XHJcblxyXG4gICAgcmV0dXJuIFwic3VjY2Vzc1wiO1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gcHJlcGFyZUNhbGxQb2xsQWNjZXB0KHNlc3Npb246YW55LGV2ZW50Ok9DQ1BTSVAuT0NDUEV2ZW50LGxvY2FsUGFyYW1zOmFueSkge1xyXG4gICAgbGV0IGxvZyA9IHNlc3Npb24ubG9nO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgICAgbGV0IHBvbGxBY3Rpb24gOiBDYWxsUG9sbEFjdGlvbjtcclxuICAgICAgICBwb2xsQWN0aW9uID0gcG9sbEFjdGlvbiB8fCB7fTtcclxuICAgICAgICBwb2xsQWN0aW9uLnR5cGUgPSBDYWxsUG9sbEFjdGlvblR5cGUuQWNjZXB0O1xyXG4gICAgICAgIHNlc3Npb24uc2VuZEFjdGlvbiA9IEpTT04uc3RyaW5naWZ5KHBvbGxBY3Rpb24pO1xyXG5cclxuICAgICAgICByZXR1cm4gXCJzdWNjZXNzXCI7ICAgICAgICBcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICBsb2cuZGVidWcoXCJwcmVwYXJlQ2FsbFBvbGxBY2NlcHQgTG9nOiB7fVwiLCBlKTtcclxuICAgICAgICByZXR1cm4gXCJlcnJvci5leGNlcHRpb25cIjtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGNhbGxlbmRlZChzZXNzaW9uIDogYW55LCBldmVudERhdGEgOiBhbnksIGxvY2FsUGFyYW1zOiBhbnkgKXtcclxuICAgIGxldCByZXQ6IHN0cmluZyA9IFwic3VjY2Vzc1wiO1xyXG4gICAgLyogZW50ZXIgaGVyZSB5b3VyIGNvZGUgKi9cclxuXHJcbiAgICBsZXQgbG9nIDogYW55ID0gc2Vzc2lvbi5sb2c7XHJcbiAgICBsZXQgY2FsbHN0YXRlb2xkID0gc2Vzc2lvbi5jYWxsc3RhdGU7XHJcbiAgICBzZXNzaW9uLmNhbGxzdGF0ZSAgPVwiQ0xPU0VEXCI7XHJcbiAgICBzZXNzaW9uLnRpbWVlbmQ9IE1hdGguZmxvb3IobmV3IERhdGUoKS8xMDAwKTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgaWYgKHNlc3Npb24udGltZWFuc3dlciE9bnVsbCkge1xyXG4gICAgICAgICAgICBzZXNzaW9uLmR1cmF0aW9uPSBzZXNzaW9uLnRpbWVlbmQgLSBzZXNzaW9uLnRpbWVhbnN3ZXI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc2Vzc2lvbi5kdXJhdGlvbj1cIm5vdC1zdGFydGVkXCI7ICAgIFxyXG4gICAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICBzZXNzaW9uLmR1cmF0aW9uPVwiZXhjZXB0aW9uXCI7XHJcbiAgICB9XHJcblxyXG4gICAgbG9nLmVycm9yKFwiQ2FsbF97fTpTdGF0ZV97fS0+e30rXCIsc2Vzc2lvbltcInRyYWNlLXNrZXlcIl0sY2FsbHN0YXRlb2xkLHNlc3Npb24uY2FsbHN0YXRlKTsgIFxyXG4gICAgc2Vzc2lvbi5sb2dpbmZvID0gc2Vzc2lvbi5sb2dpbmZvK3Nlc3Npb24uY2FsbHN0YXRlK1wiO2R1cmF0aW9uPVwiK3Nlc3Npb24uZHVyYXRpb24rXCI7XCI7ICAgXHJcblxyXG4gICAgLy9wcmVwYXJlIHRoZSBMT0cgbGluZSAtIHNlbmQgdG8gdGhlIGxvZ19zaXBkZW1vIHByb2Nlc3MgXHJcbiAgICBsZXQgbG9nbGluZSA6IExPRyA9IHt9O1xyXG4gICAgdHJ5e1xyXG4gICAgICAgIGxvZ2xpbmUuTVNJU0ROID0gc2Vzc2lvbi5DYWxsZWRQYXJ0eTtcclxuICAgICAgICBsb2dsaW5lLlNlcnZpY2VTZXNzaW9uSWQgPSBzZXNzaW9uW1wiZnNtLWlkXCJdO1xyXG4gICAgICAgIGxvZ2xpbmUuTXNnVHlwZSA9IFwiU0lQLklOVklURVwiO1xyXG4gICAgICAgIGxvZ2xpbmUuTXNnU2Vzc2lvbklkID0gc2Vzc2lvbltcImZzbS1pZFwiXTtcclxuICAgICAgICBsb2dsaW5lLk1zZ0lkID0gXCJjYWxsaWRcIjtcclxuICAgICAgICBsb2dsaW5lLk1zZ0RldGFpbHMgPSBzZXNzaW9uLmxvZ2luZm87XHJcbiAgICAgICAgbG9nbGluZS5TZXJ2aWNlZGV0YWlscyA9IFwiXCI7XHJcbiAgICAgICAgc2Vzc2lvbi5sb2dpbmZvPVwiXCI7XHJcblxyXG4gICAgICAgIC8vdGltZXN0YW1wIGFkZGVkIGJ5IEdXIGJlZm9yZSBpdCBwdXQgaXQgaW50byB0aGUgcXVldWUgdG8gUlRFXHJcbiAgICAgICAgbG9nbGluZS5Hd0V2ZW50VGltZSA9IHNlc3Npb24udGltZWFuc3dlcjsgXHJcblxyXG4gICAgICAgIGxldCBub3cgOiBEYXRlID0gbmV3IERhdGUoKTtcclxuICAgICAgICBsZXQgbG9nRGF0ZSA6IHN0cmluZyA9IGZvcm1hdERhdGUobm93KTtcclxuICAgICAgICBsZXQgbG9nVGltZSA6IHN0cmluZyA9IGZvcm1hdFRpbWUobm93KTtcclxuICAgICAgICBsb2dsaW5lLkxvZ0xpbmVUaW1lID0gbG9nRGF0ZSsgXCIuXCIgKyBsb2dUaW1lICsgXCIuXCIrKFwiMDAwXCIgKyBub3cuZ2V0TWlsbGlzZWNvbmRzKCkudG9TdHJpbmcoKSkuc2xpY2UoLTMpOyAgICAgICAgXHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgbG9nbGluZS5NU0lTRE4gPSBcIlwiO1xyXG4gICAgICAgIGxvZ2xpbmUuU2VydmljZVNlc3Npb25JZCA9IFwiXCI7XHJcbiAgICAgICAgbG9nbGluZS5Nc2dUeXBlID0gXCJcIjtcclxuICAgICAgICBsb2dsaW5lLk1zZ1Nlc3Npb25JZCA9IFwiXCI7XHJcbiAgICAgICAgbG9nbGluZS5Nc2dJZCA9IFwiXCI7XHJcbiAgICAgICAgbG9nbGluZS5Nc2dEZXRhaWxzID0gXCJcIjtcclxuICAgICAgICBsb2dsaW5lLlNlcnZpY2VkZXRhaWxzID0gXCJlcnJvciBhdCBDQ1JDb250aW51ZSBsb2dsaW5lXCI7XHJcbiAgICAgICAgbG9nbGluZS5Mb2dMaW5lVGltZSA9IFwiXCI7XHJcbiAgICB9O1xyXG4gICAgbG9nbGluZS5UcmFjZUxldmVsID0gc2Vzc2lvbltcImZzbS10cmFjZS1sZXZlbFwiXTsgICAgXHJcbiAgICBzZXNzaW9uLmxvZ2xpbmU9bG9nbGluZTsgICAgXHJcbiAgICByZXR1cm4gcmV0O1xyXG59Il19