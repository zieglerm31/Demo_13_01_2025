"use strict";
;
function armevents(sessionData, eventData, localParams) {
    var ret;
    var status2;
    var events;
    events = events || {};
    events.InfoPollEvent = "null";
    events.SuccessResponsePollEvent = "null";
    events.RawContentPollEvent = "test/test";
    var headerVars;
    headerVars = headerVars || {};
    headerVars.disableSendDefaultReason = "Disabled";
    headerVars.disableSendNoAnswerReason = "Disabled";
    var ringingTones;
    ringingTones = ringingTones || [];
    var comf;
    comf = comf || {};
    comf.anno_name = "comfort";
    comf.anno_type = Annotype.CONNECT;
    var ring;
    ring = ring || {};
    ring.anno_name = "ringing";
    ring.anno_type = Annotype.RINGING;
    ringingTones.push(comf, ring);
    var capabilities = sessionData.inCapabilities;
    if (capabilities != null) {
        capabilities.push(Capabilities.PEM);
        capabilities.push(Capabilities.FORKING);
        sessionData.outCapabilities = JSON.stringify(capabilities);
    }
    sessionData.events = JSON.stringify(events);
    sessionData.headerrulevar = JSON.stringify(headerVars);
    sessionData.headerrulesselect = "SipServiceSpecificRulesSet";
    sessionData.ringingtones = JSON.stringify(ringingTones);
    sessionData.upstreamCapabilities = JSON.stringify([]);
    return "success";
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxDQUFDO0FBQ0QsU0FBUyxTQUFTLENBQUMsV0FBZSxFQUFDLFNBQWEsRUFBQyxXQUFlO0lBQy9ELElBQUksR0FBZSxDQUFFO0lBRWxCLElBQUksT0FBZ0IsQ0FBQztJQUNyQixJQUFJLE1BQWUsQ0FBQztJQUNwQixNQUFNLEdBQUcsTUFBTSxJQUFJLEVBQUUsQ0FBQztJQUN0QixNQUFNLENBQUMsYUFBYSxHQUFDLE1BQU0sQ0FBQztJQUM1QixNQUFNLENBQUMsd0JBQXdCLEdBQUMsTUFBTSxDQUFDO0lBQ3ZDLE1BQU0sQ0FBQyxtQkFBbUIsR0FBQyxXQUFXLENBQUM7SUFFdkMsSUFBSSxVQUF1QixDQUFDO0lBQzVCLFVBQVUsR0FBRyxVQUFVLElBQUksRUFBRSxDQUFDO0lBQzlCLFVBQVUsQ0FBQyx3QkFBd0IsR0FBRyxVQUFVLENBQUM7SUFDakQsVUFBVSxDQUFDLHlCQUF5QixHQUFHLFVBQVUsQ0FBQztJQUVsRCxJQUFJLFlBQTRCLENBQUM7SUFDakMsWUFBWSxHQUFHLFlBQVksSUFBSSxFQUFFLENBQUM7SUFDbEMsSUFBSSxJQUFrQixDQUFDO0lBQ3ZCLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO0lBQ2xCLElBQUksQ0FBQyxTQUFTLEdBQUMsU0FBUyxDQUFDO0lBQ3pCLElBQUksQ0FBQyxTQUFTLEdBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztJQUNoQyxJQUFJLElBQWtCLENBQUM7SUFDdkIsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7SUFDbEIsSUFBSSxDQUFDLFNBQVMsR0FBQyxTQUFTLENBQUM7SUFDekIsSUFBSSxDQUFDLFNBQVMsR0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO0lBQ2hDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBRTlCLElBQUksWUFBWSxHQUFHLFdBQVcsQ0FBQyxjQUFjLENBQUM7SUFDOUMsSUFBSSxZQUFZLElBQUUsSUFBSSxFQUFDO1FBQ25CLFlBQVksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3BDLFlBQVksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3hDLFdBQVcsQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztLQUM5RDtJQUVELFdBQVcsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1QyxXQUFXLENBQUMsYUFBYSxHQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDckQsV0FBVyxDQUFDLGlCQUFpQixHQUFHLDRCQUE0QixDQUFDO0lBQzdELFdBQVcsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN4RCxXQUFXLENBQUMsb0JBQW9CLEdBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVwRCxPQUFPLFNBQVMsQ0FBQztBQUNyQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy9NQUlOQkxPQ0tcbjtcclxuZnVuY3Rpb24gYXJtZXZlbnRzKHNlc3Npb25EYXRhOmFueSxldmVudERhdGE6YW55LGxvY2FsUGFyYW1zOmFueSk6IGFueSB7XHJcbiBsZXQgcmV0OiBSZXN1bHRDb2RlIDtcclxuXHJcbiAgICBsZXQgc3RhdHVzMiA6IHN0cmluZztcclxuICAgIGxldCBldmVudHMgOiBFdmVudHM7XHJcbiAgICBldmVudHMgPSBldmVudHMgfHwge307XHJcbiAgICBldmVudHMuSW5mb1BvbGxFdmVudD1cIm51bGxcIjtcclxuICAgIGV2ZW50cy5TdWNjZXNzUmVzcG9uc2VQb2xsRXZlbnQ9XCJudWxsXCI7XHJcbiAgICBldmVudHMuUmF3Q29udGVudFBvbGxFdmVudD1cInRlc3QvdGVzdFwiO1xyXG5cclxuICAgIGxldCBoZWFkZXJWYXJzIDogSGVhZGVyVmFycztcclxuICAgIGhlYWRlclZhcnMgPSBoZWFkZXJWYXJzIHx8IHt9O1xyXG4gICAgaGVhZGVyVmFycy5kaXNhYmxlU2VuZERlZmF1bHRSZWFzb24gPSBcIkRpc2FibGVkXCI7XHJcbiAgICBoZWFkZXJWYXJzLmRpc2FibGVTZW5kTm9BbnN3ZXJSZWFzb24gPSBcIkRpc2FibGVkXCI7XHJcblxyXG4gICAgbGV0IHJpbmdpbmdUb25lcyA6IFtSaW5naW5nVG9uZV07XHJcbiAgICByaW5naW5nVG9uZXMgPSByaW5naW5nVG9uZXMgfHwgW107XHJcbiAgICBsZXQgY29tZiA6IFJpbmdpbmdUb25lO1xyXG4gICAgY29tZiA9IGNvbWYgfHwge307XHJcbiAgICBjb21mLmFubm9fbmFtZT1cImNvbWZvcnRcIjtcclxuICAgIGNvbWYuYW5ub190eXBlPUFubm90eXBlLkNPTk5FQ1Q7XHJcbiAgICBsZXQgcmluZyA6IFJpbmdpbmdUb25lO1xyXG4gICAgcmluZyA9IHJpbmcgfHwge307XHJcbiAgICByaW5nLmFubm9fbmFtZT1cInJpbmdpbmdcIjtcclxuICAgIHJpbmcuYW5ub190eXBlPUFubm90eXBlLlJJTkdJTkc7XHJcbiAgICByaW5naW5nVG9uZXMucHVzaChjb21mLCByaW5nKTtcclxuXHJcbiAgICBsZXQgY2FwYWJpbGl0aWVzID0gc2Vzc2lvbkRhdGEuaW5DYXBhYmlsaXRpZXM7XHJcbiAgICBpZiggY2FwYWJpbGl0aWVzIT1udWxsKXtcclxuICAgICAgICBjYXBhYmlsaXRpZXMucHVzaChDYXBhYmlsaXRpZXMuUEVNKTtcclxuICAgICAgICBjYXBhYmlsaXRpZXMucHVzaChDYXBhYmlsaXRpZXMuRk9SS0lORyk7XHJcbiAgICAgICAgc2Vzc2lvbkRhdGEub3V0Q2FwYWJpbGl0aWVzID0gSlNPTi5zdHJpbmdpZnkoY2FwYWJpbGl0aWVzKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXNzaW9uRGF0YS5ldmVudHMgPSBKU09OLnN0cmluZ2lmeShldmVudHMpO1xyXG4gICAgc2Vzc2lvbkRhdGEuaGVhZGVycnVsZXZhcj1KU09OLnN0cmluZ2lmeShoZWFkZXJWYXJzKTtcclxuICAgIHNlc3Npb25EYXRhLmhlYWRlcnJ1bGVzc2VsZWN0ID0gXCJTaXBTZXJ2aWNlU3BlY2lmaWNSdWxlc1NldFwiO1xyXG4gICAgc2Vzc2lvbkRhdGEucmluZ2luZ3RvbmVzID0gSlNPTi5zdHJpbmdpZnkocmluZ2luZ1RvbmVzKTtcclxuICAgIHNlc3Npb25EYXRhLnVwc3RyZWFtQ2FwYWJpbGl0aWVzPUpTT04uc3RyaW5naWZ5KFtdKTtcclxuXHJcbiAgICByZXR1cm4gXCJzdWNjZXNzXCI7XHJcbn1cclxuIl19