"use strict";
var Capabilities;
(function (Capabilities) {
    Capabilities["REL1XX"] = "REL1XX";
    Capabilities["FORKING"] = "FORKING";
    Capabilities["PRECONDITION"] = "PRECONDITION";
    Capabilities["PEM"] = "PEM";
    Capabilities["UPDATE"] = "UPDATE";
})(Capabilities || (Capabilities = {}));
var Annotype;
(function (Annotype) {
    Annotype["CONNECT"] = "CONNECT";
    Annotype["RINGING"] = "RING";
})(Annotype || (Annotype = {}));
var CallPollActionType;
(function (CallPollActionType) {
    CallPollActionType["Accept"] = "accept";
    CallPollActionType["Forward"] = "forward";
    CallPollActionType["Reject"] = "reject";
})(CallPollActionType || (CallPollActionType = {}));
var CallStartActionType;
(function (CallStartActionType) {
    CallStartActionType[CallStartActionType["Abort"] = 0] = "Abort";
    CallStartActionType[CallStartActionType["Forward"] = 1] = "Forward";
    CallStartActionType[CallStartActionType["RejectMrf"] = 2] = "RejectMrf";
})(CallStartActionType || (CallStartActionType = {}));
var MediaOperationActionType;
(function (MediaOperationActionType) {
    MediaOperationActionType["PerformMediaOperation"] = "performMediaOperation";
})(MediaOperationActionType || (MediaOperationActionType = {}));
var MediaOperationContentType;
(function (MediaOperationContentType) {
    MediaOperationContentType["MSML"] = "application/msml+xml";
})(MediaOperationContentType || (MediaOperationContentType = {}));
;
;
function armevents(sessionData, eventData, localParams) {
    var ret;
    var status2;
    var events;
    events = events || {};
    events.InfoPollEvent = "null";
    events.SuccessResponsePollEvent = "null";
    events.RawContentPollEvent = "test/test";
    var headerVars;
    headerVars = headerVars || {};
    headerVars.disableSendDefaultReason = "Disabled";
    headerVars.disableSendNoAnswerReason = "Disabled";
    headerVars.privateServiceMode = "b2bua";
    var ringingTones;
    ringingTones = ringingTones || [];
    var comf;
    comf = comf || {};
    comf.anno_name = "comfort";
    comf.anno_type = Annotype.CONNECT;
    var ring;
    ring = ring || {};
    ring.anno_name = "ringing";
    ring.anno_type = Annotype.RINGING;
    ringingTones.push(comf, ring);
    var capabilities = sessionData.inCapabilities;
    if (capabilities != null) {
        capabilities.push(Capabilities.PEM);
        capabilities.push(Capabilities.FORKING);
        sessionData.outCapabilities = JSON.stringify(capabilities);
    }
    sessionData.events = JSON.stringify(events);
    sessionData.headerrulevar = JSON.stringify(headerVars);
    sessionData.headerrulesselect = "SipServiceSpecificRulesSet";
    sessionData.ringingtones = JSON.stringify(ringingTones);
    sessionData.upstreamCapabilities = JSON.stringify([]);
    return "success";
}
function prepareCallPollAccept(session, event, localParams) {
    var log = session.log;
    try {
        var pollAction = void 0;
        pollAction = pollAction || {};
        pollAction.type = CallPollActionType.Accept;
        session.sendAction = JSON.stringify(pollAction);
        return "success";
    }
    catch (e) {
        log.debug("prepareCallPollAccept Log: {}", e);
        return "error.exception";
    }
}
function callended(session, eventData, localParams) {
    var ret = "success";
    var log = session.log;
    var callstateold = session.callstate;
    session.callstate = "CLOSED";
    session.timeend = Math.floor(new Date() / 1000);
    try {
        if (session.timeanswer != null) {
            session.duration = session.timeend - session.timeanswer;
        }
        else {
            session.duration = "not-started";
        }
    }
    catch (e) {
        session.duration = "exception";
    }
    log.error("Call_{}:State_{}->{}+", session["trace-skey"], callstateold, session.callstate);
    session.loginfo = session.loginfo + session.callstate + ";duration=" + session.duration + ";";
    var logline = {};
    try {
        logline.MSISDN = session["s_normalizedNumber"];
        logline.ServiceSessionId = session["fsm-id"];
        logline.MsgType = "SIP.INVITE";
        logline.MsgSessionId = session["fsm-id"];
        logline.MsgId = session["s_initialSIP"]["SIP"]["Call-ID"]["value"];
        logline.MsgDetails = "";
        logline.Servicedetails = "";
        logline.callAnswered = session.timeanswer;
        logline.callEnded = session.timeend;
        logline.callDuration = session.duration;
        session.loginfo = "";
        logline.GwEventTime = session.timeanswer;
        var now = new Date();
        var logDate = formatDate(now);
        var logTime = formatTime(now);
        logline.LogLineTime = logDate + "." + logTime + "." + ("000" + now.getMilliseconds().toString()).slice(-3);
    }
    catch (e) {
        logline.MSISDN = "";
        logline.ServiceSessionId = "";
        logline.MsgType = "";
        logline.MsgSessionId = "";
        logline.MsgId = "";
        logline.MsgDetails = "";
        logline.Servicedetails = "error at CCRContinue logline";
        logline.callAnswered = "na";
        logline.callEnded = "na";
        logline.callDuration = "na";
        logline.LogLineTime = "";
    }
    ;
    logline.TraceLevel = session["fsm-trace-level"];
    session.logline = logline;
    return ret;
}
function getdisconnectreason(session, event, any, localParams) {
    var log = session.log;
    try {
        var logline = {};
        try {
            logline["MSISDN"] = session["s_normalizedNumber"];
            logline["ServiceSessionId"] = session["fsm-id"];
            logline["MsgType"] = "SIP.INVITE";
            logline["MsgSessionId"] = session["fsm-id"];
            logline["MsgId"] = session["s_initialSIP"]["SIP"]["Call-ID"]["value"];
            logline["MsgDetails"] = "";
            logline["Servicedetails"] = "";
            logline["callAnswered"] = session.timeanswer;
            logline["callEnded"] = session.timeend;
            logline["callDuration"] = session.duration;
            var now = new Date();
            var logDate = formatDate(now);
            var logTime = formatTime(now);
            logline["LogLineTime"] = logDate + "." + logTime + "." + ("000" + now.getMilliseconds().toString()).slice(-3);
        }
        catch (e) {
            logline["MSISDN"] = "";
            logline["ServiceSessionId"] = "";
            logline["MsgType"] = "";
            logline["MsgSessionId"] = "";
            logline["MsgId"] = "";
            logline["MsgDetails"] = "";
            logline["Servicedetails"] = "exception" + e;
            logline["callAnswered"] = "na";
            logline["callEnded"] = "na";
            logline["callDuration"] = "na";
            logline["LogLineTime"] = "na";
        }
        ;
        session.logline = logline;
        var events = event["events-stack"].length;
        var index = events - 1;
        if (event["events-stack"][index] === "leg.timeout") {
            return "reason.timeout";
        }
        else if (event["events-stack"][index] === "leg.max_call_duration") {
            return "reason.max_call_duration";
        }
        else {
            return "reason." + event["events-stack"][index];
        }
    }
    catch (e) {
        log.debug("getdisconnectreason Log: {}", e);
        return "reason.exception";
    }
}
function setPreconditionForwadCallb2b(session, event, localParams) {
    var ret;
    ret = ret || {};
    ret.resultCode = "success";
    var events;
    events = events || {};
    events.SIPPollEvent = "null";
    events.SIP18xInformatoinalEvent = "null";
    events.SdpAnswerEvent = "null";
    events.SIPReINVITEEvent = "null";
    events.SDPOfferPollEvent = "null";
    events.SipRingingPollEvent = "null";
    events.SipSdpOfferPollEvent = "null";
    events.SIPegClosedEvent = "null";
    events.CallBeingForwardedPollEvent = "null";
    events.SIPSdpAnswerPollEvent = "null";
    events.RingingPollEvent = "null";
    events.SIP18xAnswerEvent = "null";
    events.SIPRingingPollEvent = "null";
    events.InfoPollEvent = "null";
    events.SuccessResponsePollEvent = "null";
    events.RawContentPollEvent = "test/test";
    session.events = JSON.stringify(events);
    var headerVars;
    headerVars = headerVars || {};
    headerVars.disableSendDefaultReason = "Disabled";
    headerVars.disableSendNoAnswerReason = "Disabled";
    session.headerrulevar = JSON.stringify(headerVars);
    session.headerrulesselect = "SipServiceSpecificRulesSet";
    return ret;
}
function checkSDPAnswerAction(session, event, localParams) {
    var eventData = localParams.message;
    var pollAction;
    pollAction = pollAction || {};
    pollAction.type = CallPollActionType.Reject;
    session.sendAction = JSON.stringify(pollAction);
    return true;
}
function modifydisposition(session, event, localParams) {
    var initialMsg = localParams.message;
    if (initialMsg["SIP"]["capabilities"] != null) {
        if (initialMsg["SIP"]["capabilities"].indexOf(Capabilities.FORKING) > -1) {
            var capabilities = [];
            session.upstreamCapabilities = JSON.stringify(capabilities);
        }
    }
    if (initialMsg["SIP"]["R-URI"]["value"] == "sip:972000019@172.31.11.142:5062") {
        session.destlist = ["sip:9900004@172.31.11.142:5062", "sip:9900099@172.31.11.142:5062"];
    }
    return true;
}
function setdestinationlist(session, event, localParams) {
    var initialMsg = localParams.message;
    if (initialMsg["SIP"]["R-URI"]["value"] == "sip:972000019@172.31.11.142:5062") {
        session.destlist = ["sip:9900011@172.31.11.142:5062", "sip:9900022@172.31.11.142:5064", "sip:9900033@172.31.11.142:5065"];
    }
    return true;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFXQSxJQUFLLFlBTUo7QUFORCxXQUFLLFlBQVk7SUFDZixpQ0FBaUIsQ0FBQTtJQUNqQixtQ0FBa0IsQ0FBQTtJQUNsQiw2Q0FBMkIsQ0FBQTtJQUMzQiwyQkFBUyxDQUFBO0lBQ1QsaUNBQWUsQ0FBQTtBQUNqQixDQUFDLEVBTkksWUFBWSxLQUFaLFlBQVksUUFNaEI7QUFzREQsSUFBSyxRQUdKO0FBSEQsV0FBSyxRQUFRO0lBQ1gsK0JBQW1CLENBQUE7SUFDbkIsNEJBQWdCLENBQUE7QUFDbEIsQ0FBQyxFQUhJLFFBQVEsS0FBUixRQUFRLFFBR1o7QUF1QkQsSUFBSyxrQkFJSjtBQUpELFdBQUssa0JBQWtCO0lBQ3RCLHVDQUFpQixDQUFBO0lBQ2pCLHlDQUFtQixDQUFBO0lBQ25CLHVDQUFpQixDQUFBO0FBQ2xCLENBQUMsRUFKSSxrQkFBa0IsS0FBbEIsa0JBQWtCLFFBSXRCO0FBRUQsSUFBSyxtQkFJSjtBQUpELFdBQUssbUJBQW1CO0lBQ3ZCLCtEQUFTLENBQUE7SUFDVCxtRUFBVyxDQUFBO0lBQ1gsdUVBQWEsQ0FBQTtBQUNkLENBQUMsRUFKSSxtQkFBbUIsS0FBbkIsbUJBQW1CLFFBSXZCO0FBZ0NELElBQUssd0JBRUo7QUFGRCxXQUFLLHdCQUF3QjtJQUM1QiwyRUFBK0MsQ0FBQTtBQUNoRCxDQUFDLEVBRkksd0JBQXdCLEtBQXhCLHdCQUF3QixRQUU1QjtBQUVELElBQUsseUJBRUo7QUFGRCxXQUFLLHlCQUF5QjtJQUM3QiwwREFBNkIsQ0FBQTtBQUM5QixDQUFDLEVBRkkseUJBQXlCLEtBQXpCLHlCQUF5QixRQUU3QjtBQW1GRCxDQUFDO0FBQ0QsQ0FBQztBQUNELFNBQVMsU0FBUyxDQUFDLFdBQWUsRUFBQyxTQUFhLEVBQUMsV0FBZTtJQUMvRCxJQUFJLEdBQWUsQ0FBRTtJQUVsQixJQUFJLE9BQWdCLENBQUM7SUFDckIsSUFBSSxNQUFlLENBQUM7SUFDcEIsTUFBTSxHQUFHLE1BQU0sSUFBSSxFQUFFLENBQUM7SUFDdEIsTUFBTSxDQUFDLGFBQWEsR0FBQyxNQUFNLENBQUM7SUFDNUIsTUFBTSxDQUFDLHdCQUF3QixHQUFDLE1BQU0sQ0FBQztJQUN2QyxNQUFNLENBQUMsbUJBQW1CLEdBQUMsV0FBVyxDQUFDO0lBRXZDLElBQUksVUFBdUIsQ0FBQztJQUM1QixVQUFVLEdBQUcsVUFBVSxJQUFJLEVBQUUsQ0FBQztJQUM5QixVQUFVLENBQUMsd0JBQXdCLEdBQUcsVUFBVSxDQUFDO0lBQ2pELFVBQVUsQ0FBQyx5QkFBeUIsR0FBRyxVQUFVLENBQUM7SUFDbEQsVUFBVSxDQUFDLGtCQUFrQixHQUFHLE9BQU8sQ0FBQztJQUV4QyxJQUFJLFlBQTRCLENBQUM7SUFDakMsWUFBWSxHQUFHLFlBQVksSUFBSSxFQUFFLENBQUM7SUFDbEMsSUFBSSxJQUFrQixDQUFDO0lBQ3ZCLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO0lBQ2xCLElBQUksQ0FBQyxTQUFTLEdBQUMsU0FBUyxDQUFDO0lBQ3pCLElBQUksQ0FBQyxTQUFTLEdBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztJQUNoQyxJQUFJLElBQWtCLENBQUM7SUFDdkIsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7SUFDbEIsSUFBSSxDQUFDLFNBQVMsR0FBQyxTQUFTLENBQUM7SUFDekIsSUFBSSxDQUFDLFNBQVMsR0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO0lBQ2hDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBRTlCLElBQUksWUFBWSxHQUFHLFdBQVcsQ0FBQyxjQUFjLENBQUM7SUFDOUMsSUFBSSxZQUFZLElBQUUsSUFBSSxFQUFDO1FBQ25CLFlBQVksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3BDLFlBQVksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3hDLFdBQVcsQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztLQUM5RDtJQUVELFdBQVcsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1QyxXQUFXLENBQUMsYUFBYSxHQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDckQsV0FBVyxDQUFDLGlCQUFpQixHQUFHLDRCQUE0QixDQUFDO0lBQzdELFdBQVcsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN4RCxXQUFXLENBQUMsb0JBQW9CLEdBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVwRCxPQUFPLFNBQVMsQ0FBQztBQUNyQixDQUFDO0FBR0QsU0FBUyxxQkFBcUIsQ0FBQyxPQUFXLEVBQUMsS0FBdUIsRUFBQyxXQUFlO0lBQzlFLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7SUFFdEIsSUFBSTtRQUNBLElBQUksVUFBVSxTQUFpQixDQUFDO1FBQ2hDLFVBQVUsR0FBRyxVQUFVLElBQUksRUFBRSxDQUFDO1FBQzlCLFVBQVUsQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLENBQUMsTUFBTSxDQUFDO1FBQzVDLE9BQU8sQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUVoRCxPQUFPLFNBQVMsQ0FBQztLQUNwQjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1IsR0FBRyxDQUFDLEtBQUssQ0FBQywrQkFBK0IsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM5QyxPQUFPLGlCQUFpQixDQUFDO0tBQzVCO0FBQ0wsQ0FBQztBQUVELFNBQVMsU0FBUyxDQUFDLE9BQWEsRUFBRSxTQUFlLEVBQUUsV0FBZ0I7SUFDL0QsSUFBSSxHQUFHLEdBQVcsU0FBUyxDQUFDO0lBRzVCLElBQUksR0FBRyxHQUFTLE9BQU8sQ0FBQyxHQUFHLENBQUM7SUFDNUIsSUFBSSxZQUFZLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQztJQUNyQyxPQUFPLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztJQUM3QixPQUFPLENBQUMsT0FBTyxHQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLEVBQUUsR0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QyxJQUFJO1FBQ0EsSUFBSSxPQUFPLENBQUMsVUFBVSxJQUFFLElBQUksRUFBRTtZQUMxQixPQUFPLENBQUMsUUFBUSxHQUFFLE9BQU8sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQztTQUMxRDthQUFNO1lBQ0gsT0FBTyxDQUFDLFFBQVEsR0FBQyxhQUFhLENBQUM7U0FDbEM7S0FDSjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1IsT0FBTyxDQUFDLFFBQVEsR0FBQyxXQUFXLENBQUM7S0FDaEM7SUFFRCxHQUFHLENBQUMsS0FBSyxDQUFDLHVCQUF1QixFQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsRUFBQyxZQUFZLEVBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3hGLE9BQU8sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sR0FBQyxPQUFPLENBQUMsU0FBUyxHQUFDLFlBQVksR0FBQyxPQUFPLENBQUMsUUFBUSxHQUFDLEdBQUcsQ0FBQztJQUd0RixJQUFJLE9BQU8sR0FBRyxFQUFFLENBQUM7SUFDakIsSUFBRztRQUNLLE9BQU8sQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDL0MsT0FBTyxDQUFDLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM3QyxPQUFPLENBQUMsT0FBTyxHQUFHLFlBQVksQ0FBQztRQUMvQixPQUFPLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN6QyxPQUFPLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNuRSxPQUFPLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztRQUN4QixPQUFPLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztRQUM1QixPQUFPLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUM7UUFDMUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQ3BDLE9BQU8sQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUN4QyxPQUFPLENBQUMsT0FBTyxHQUFDLEVBQUUsQ0FBQztRQUd2QixPQUFPLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUM7UUFFekMsSUFBSSxHQUFHLEdBQVUsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUM1QixJQUFJLE9BQU8sR0FBWSxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdkMsSUFBSSxPQUFPLEdBQVksVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsT0FBTyxHQUFFLEdBQUcsR0FBRyxPQUFPLEdBQUcsR0FBRyxHQUFDLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzNHO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDUixPQUFPLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNwQixPQUFPLENBQUMsZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO1FBQzlCLE9BQU8sQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ3JCLE9BQU8sQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO1FBQzFCLE9BQU8sQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ25CLE9BQU8sQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ3hCLE9BQU8sQ0FBQyxjQUFjLEdBQUcsOEJBQThCLENBQUM7UUFDeEQsT0FBTyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFDNUIsT0FBTyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDekIsT0FBTyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFDNUIsT0FBTyxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7S0FDNUI7SUFBQSxDQUFDO0lBQ0YsT0FBTyxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNoRCxPQUFPLENBQUMsT0FBTyxHQUFDLE9BQU8sQ0FBQztJQUN4QixPQUFPLEdBQUcsQ0FBQztBQUNmLENBQUM7QUFHRCxTQUFTLG1CQUFtQixDQUFDLE9BQVcsRUFBQyxLQUFLLEVBQUMsR0FBRyxFQUFDLFdBQWU7SUFTOUQsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztJQUV0QixJQUFJO1FBR0EsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLElBQUc7WUFDQyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUM7WUFDbEQsT0FBTyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ2hELE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxZQUFZLENBQUM7WUFDbEMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM1QyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3RFLE9BQU8sQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDM0IsT0FBTyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQy9CLE9BQU8sQ0FBQyxjQUFjLENBQUMsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDO1lBQzdDLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO1lBQ3ZDLE9BQU8sQ0FBQyxjQUFjLENBQUMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDO1lBRTNDLElBQUksR0FBRyxHQUFVLElBQUksSUFBSSxFQUFFLENBQUM7WUFDNUIsSUFBSSxPQUFPLEdBQVksVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZDLElBQUksT0FBTyxHQUFZLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN2QyxPQUFPLENBQUMsYUFBYSxDQUFDLEdBQUcsT0FBTyxHQUFFLEdBQUcsR0FBRyxPQUFPLEdBQUcsR0FBRyxHQUFDLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzlHO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDUixPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ3ZCLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNqQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ3hCLE9BQU8sQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDN0IsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUN0QixPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQzNCLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLFdBQVcsR0FBRyxDQUFDLENBQUM7WUFDNUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxHQUFHLElBQUksQ0FBQztZQUMvQixPQUFPLENBQUMsV0FBVyxDQUFDLEdBQUcsSUFBSSxDQUFDO1lBQzVCLE9BQU8sQ0FBQyxjQUFjLENBQUMsR0FBRyxJQUFJLENBQUM7WUFDL0IsT0FBTyxDQUFDLGFBQWEsQ0FBQyxHQUFHLElBQUksQ0FBQztTQUNqQztRQUFBLENBQUM7UUFDRixPQUFPLENBQUMsT0FBTyxHQUFDLE9BQU8sQ0FBQztRQUV4QixJQUFJLE1BQU0sR0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQ3hDLElBQUksS0FBSyxHQUFDLE1BQU0sR0FBQyxDQUFDLENBQUM7UUFDbkIsSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssYUFBYSxFQUFFO1lBQ2hELE9BQU8sZ0JBQWdCLENBQUM7U0FDM0I7YUFBTSxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyx1QkFBdUIsRUFBRTtZQUNqRSxPQUFPLDBCQUEwQixDQUFDO1NBQ3JDO2FBQU07WUFDSCxPQUFPLFNBQVMsR0FBRyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDbkQ7S0FFSjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1IsR0FBRyxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1QyxPQUFPLGtCQUFrQixDQUFDO0tBQzdCO0FBQ0wsQ0FBQztBQUtELFNBQVMsNEJBQTRCLENBQUMsT0FBVyxFQUFDLEtBQVMsRUFBQyxXQUFlO0lBRXZFLElBQUksR0FBZSxDQUFFO0lBQ3JCLEdBQUcsR0FBRyxHQUFHLElBQUksRUFBRSxDQUFDO0lBQ2hCLEdBQUcsQ0FBQyxVQUFVLEdBQUMsU0FBUyxDQUFDO0lBRXpCLElBQUksTUFBZSxDQUFDO0lBQ3BCLE1BQU0sR0FBRyxNQUFNLElBQUksRUFBRSxDQUFDO0lBR3RCLE1BQU0sQ0FBQyxZQUFZLEdBQUMsTUFBTSxDQUFDO0lBRTNCLE1BQU0sQ0FBQyx3QkFBd0IsR0FBQyxNQUFNLENBQUM7SUFDdkMsTUFBTSxDQUFDLGNBQWMsR0FBQyxNQUFNLENBQUM7SUFDN0IsTUFBTSxDQUFDLGdCQUFnQixHQUFDLE1BQU0sQ0FBQztJQUMvQixNQUFNLENBQUMsaUJBQWlCLEdBQUMsTUFBTSxDQUFDO0lBQ2hDLE1BQU0sQ0FBQyxtQkFBbUIsR0FBQyxNQUFNLENBQUM7SUFDbEMsTUFBTSxDQUFDLG9CQUFvQixHQUFDLE1BQU0sQ0FBQztJQUNuQyxNQUFNLENBQUMsZ0JBQWdCLEdBQUMsTUFBTSxDQUFDO0lBRS9CLE1BQU0sQ0FBQywyQkFBMkIsR0FBQyxNQUFNLENBQUM7SUFDMUMsTUFBTSxDQUFDLHFCQUFxQixHQUFDLE1BQU0sQ0FBQztJQUVwQyxNQUFNLENBQUMsZ0JBQWdCLEdBQUMsTUFBTSxDQUFDO0lBSy9CLE1BQU0sQ0FBQyxpQkFBaUIsR0FBQyxNQUFNLENBQUM7SUFDaEMsTUFBTSxDQUFDLG1CQUFtQixHQUFDLE1BQU0sQ0FBQztJQUVsQyxNQUFNLENBQUMsYUFBYSxHQUFDLE1BQU0sQ0FBQztJQUM1QixNQUFNLENBQUMsd0JBQXdCLEdBQUMsTUFBTSxDQUFDO0lBQ3ZDLE1BQU0sQ0FBQyxtQkFBbUIsR0FBQyxXQUFXLENBQUM7SUFDdkMsT0FBTyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBUXhDLElBQUksVUFBdUIsQ0FBQztJQUM1QixVQUFVLEdBQUcsVUFBVSxJQUFJLEVBQUUsQ0FBQztJQUM5QixVQUFVLENBQUMsd0JBQXdCLEdBQUcsVUFBVSxDQUFDO0lBQ2pELFVBQVUsQ0FBQyx5QkFBeUIsR0FBRyxVQUFVLENBQUM7SUFLbEQsT0FBTyxDQUFDLGFBQWEsR0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2pELE9BQU8sQ0FBQyxpQkFBaUIsR0FBRyw0QkFBNEIsQ0FBQztJQXlCekQsT0FBTyxHQUFHLENBQUM7QUFDZixDQUFDO0FBR0QsU0FBUyxvQkFBb0IsQ0FBQyxPQUFXLEVBQUMsS0FBUyxFQUFDLFdBQWU7SUFFL0QsSUFBSSxTQUFTLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQztJQUtwQyxJQUFJLFVBQTJCLENBQUM7SUFDaEMsVUFBVSxHQUFHLFVBQVUsSUFBSSxFQUFFLENBQUM7SUFFOUIsVUFBVSxDQUFDLElBQUksR0FBRyxrQkFBa0IsQ0FBQyxNQUFNLENBQUM7SUFDNUMsT0FBTyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBRWhELE9BQU8sSUFBSSxDQUFDO0FBQ2hCLENBQUM7QUFHRCxTQUFTLGlCQUFpQixDQUFDLE9BQVcsRUFBQyxLQUFTLEVBQUMsV0FBZTtJQUM1RCxJQUFJLFVBQVUsR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDO0lBQ3JDLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLGNBQWMsQ0FBQyxJQUFJLElBQUksRUFBRTtRQUMzQyxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBRXRFLElBQUksWUFBWSxHQUFXLEVBQUUsQ0FBQztZQVE5QixPQUFPLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUMvRDtLQUNKO0lBRUQsSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksa0NBQWtDLEVBQUU7UUFDM0UsT0FBTyxDQUFDLFFBQVEsR0FBRyxDQUFDLGdDQUFnQyxFQUFFLGdDQUFnQyxDQUFDLENBQUM7S0FDM0Y7SUFHRCxPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDO0FBR0QsU0FBUyxrQkFBa0IsQ0FBQyxPQUFXLEVBQUMsS0FBUyxFQUFDLFdBQWU7SUFDN0QsSUFBSSxVQUFVLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQztJQUVyQyxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxrQ0FBa0MsRUFBRTtRQUMzRSxPQUFPLENBQUMsUUFBUSxHQUFHLENBQUMsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsZ0NBQWdDLENBQUMsQ0FBQztLQUM3SDtJQUVELE9BQU8sSUFBSSxDQUFDO0FBQ2hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8vaW50ZXJmYWNlIGRlZmluaXRpb25cclxuXHJcbmludGVyZmFjZSBMZWcge1xyXG4gIGFkZHJlc3MgOiBzdHJpbmc7XHJcbiAgbmFtZSA6IHN0cmluZ1xyXG59XHJcbmludGVyZmFjZSBDYWxsIHtcclxuICBzdGF0ZSA6IG51bWJlclxyXG59XHJcblxyXG5lbnVtIENhcGFiaWxpdGllcyB7XHJcbiAgUkVMMVhYID0gXCJSRUwxWFhcIixcclxuICBGT1JLSU5HPSBcIkZPUktJTkdcIixcclxuICBQUkVDT05ESVRJT049XCJQUkVDT05ESVRJT05cIixcclxuICBQRU09XCJQRU1cIixcclxuICBVUERBVEU9XCJVUERBVEVcIlxyXG59XHJcblxyXG5pbnRlcmZhY2UgTWVzc2FnZSB7XHJcbiAgbWV0aG9kIDogW3N0cmluZ107XHJcbiAgdHlwZSA6IFtzdHJpbmddO1xyXG4gIGJvZHkgOiBbc3RyaW5nXVxyXG59XHJcblxyXG5pbnRlcmZhY2UgU0lQIHtcclxuICBjYXBhYmlsaXRpZXMgOiBbQ2FwYWJpbGl0aWVzXTtcclxuICBtZXNzYWdlIDogTWVzc2FnZVxyXG59XHJcblxyXG5pbnRlcmZhY2UgQ2FsbFN0YXJ0IHtcclxuICBjb250YWN0IDogc3RyaW5nO1xyXG4gIGNhdXNlOiBzdHJpbmc7XHJcbiAgbGVnIDogc3RyaW5nXHJcbn1cclxuXHJcbmludGVyZmFjZSBDYWxsUG9sbCB7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIHR5cGU6IHN0cmluZztcclxuICBsZWc6IHN0cmluZ1xyXG59XHJcblxyXG5pbnRlcmZhY2UgRXZlbnQge1xyXG4gIG5hbWUgOiBzdHJpbmc7XHJcbiAgY2FsbFN0YXJ0PyA6IENhbGxTdGFydDtcclxuICBjYWxsUG9sbD8gOiBDYWxsUG9sbFxyXG59XHJcblxyXG5cclxuaW50ZXJmYWNlIE9DQ1BFdmVudCB7XHJcbiAgY2FsbGlkIDogc3RyaW5nO1xyXG4gIGNhbGwgOiBDYWxsO1xyXG4gIGFzIDogc3RyaW5nO1xyXG4gIGV2ZW50dGltZSA6IG51bWJlcjtcclxuICBTSVAgOiBTSVA7XHJcbiAgZXZlbnQ6IEV2ZW50XHJcbn1cclxuXHJcbmludGVyZmFjZSBFdmVudHMge1xyXG4gIFN1Y2Nlc3NSZXNwb25zZVBvbGxFdmVudD8gOiBzdHJpbmc7XHJcbiAgUmF3Q29udGVudFBvbGxFdmVudD8gOiBzdHJpbmc7XHJcbiAgSW5mb1BvbGxFdmVudD86IHN0cmluZ1xyXG59XHJcbi8qKlxyXG4gIERlZmluZSBoZWFkZXIgdmFyaWFibGVzIHVzZWQgYnkgYXBwbGljYXRpb25cclxuKi9cclxuaW50ZXJmYWNlIEhlYWRlclZhcnMge1xyXG4gIGRpc2FibGVTZW5kRGVmYXVsdFJlYXNvbj8gOiBzdHJpbmc7XHJcbiAgZGlzYWJsZVNlbmROb0Fuc3dlclJlYXNvbj8gOiBzdHJpbmdcclxufVxyXG5cclxuZW51bSBBbm5vdHlwZSB7XHJcbiAgQ09OTkVDVCA9IFwiQ09OTkVDVFwiLFxyXG4gIFJJTkdJTkcgPSBcIlJJTkdcIlxyXG59XHJcblxyXG5pbnRlcmZhY2UgUmluZ2luZ1RvbmUge1xyXG4gIGFubm9fbmFtZSA6IHN0cmluZztcclxuICBhbm5vX3R5cGUgOiBBbm5vdHlwZVxyXG59XHJcblxyXG5pbnRlcmZhY2UgU2Vzc2lvbiB7XHJcbiAgbG9nIDogYW55O1xyXG4gIGluQ2FwYWJpbGl0aWVzIDogW0NhcGFiaWxpdGllc107XHJcbiAgb3V0Q2FwYWJpbGl0aWVzPyA6IHN0cmluZztcclxuICBldmVudHM/IDogc3RyaW5nO1xyXG4gIGhlYWRlcnJ1bGV2YXI/IDogc3RyaW5nO1xyXG4gIGhlYWRlcnJ1bGVzc2VsZWN0PyA6IHN0cmluZztcclxuICByaW5naW5ndG9uZXM/IDogc3RyaW5nO1xyXG4gIHNlbmRBY3Rpb24/IDogc3RyaW5nIDtcclxuICBTSVBIZWxwZXIgOiBhbnk7XHJcbiAgU0lQSW5pdGlhbEludml0ZT8gOiBhbnk7XHJcbiAgU0lQTWVzc2FnZT8gOiBhbnk7XHJcbiAgU0lQTWVzc2FnZVR5cGU/IDogYW55XHJcbn1cclxuXHJcblxyXG5lbnVtIENhbGxQb2xsQWN0aW9uVHlwZSB7XHJcbiBBY2NlcHQgPSBcImFjY2VwdFwiLFxyXG4gRm9yd2FyZCA9IFwiZm9yd2FyZFwiLFxyXG4gUmVqZWN0ID0gXCJyZWplY3RcIixcclxufVxyXG5cclxuZW51bSBDYWxsU3RhcnRBY3Rpb25UeXBlIHtcclxuIEFib3J0ID0gMCxcclxuIEZvcndhcmQgPSAxLFxyXG4gUmVqZWN0TXJmID0gMlxyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gU2V0IGFjdGlvbiBmb3IgQ2FsbFN0YXJ0IGV2ZW50XHJcbiovXHJcbmludGVyZmFjZSBDYWxsU3RhcnRBY3Rpb24ge1xyXG4gdHlwZSA6IENhbGxTdGFydEFjdGlvblR5cGU7XHJcbiBlcnJvcmNvZGUgOiBudW1iZXI7XHJcbiBjYXVzZSA6IHN0cmluZyA7XHJcbiB1cmkgOiBzdHJpbmc7XHJcbiBlYXJseW1lZGlhIDogbnVtYmVyO1xyXG4gbGVnbmFtZSA6IHN0cmluZyBcclxufVxyXG5cclxuLyoqXHJcbiBTZXQgYWN0aW9uIGZvciBDYWxsUG9sbCBldmVudFxyXG4qL1xyXG5pbnRlcmZhY2UgQ2FsbFBvbGxBY3Rpb24ge1xyXG4gdHlwZSA6IENhbGxQb2xsQWN0aW9uVHlwZVxyXG59XHJcblxyXG5cclxuLyoqXHJcbiBBcHBsaWNhdGlvbiBjYW4gc2V0IGFjdGlvbiBmb3IgYSBzcGVjaWZpYyBsZWcsIHRoaXMgaXMgYXBwbGljYWJsZSBmb3IgTVJGIGNvbnRhY3RcclxuICovXHJcbmludGVyZmFjZSBMZWdBY3Rpb24ge1xyXG4gdHlwZSA6IENhbGxTdGFydEFjdGlvblR5cGUgO1xyXG4gbGVnYWN0aW9uIDogc3RyaW5nXHJcbn1cclxuXHJcbmVudW0gTWVkaWFPcGVyYXRpb25BY3Rpb25UeXBlIHtcclxuIFBlcmZvcm1NZWRpYU9wZXJhdGlvbiA9IFwicGVyZm9ybU1lZGlhT3BlcmF0aW9uXCJcclxufVxyXG5cclxuZW51bSBNZWRpYU9wZXJhdGlvbkNvbnRlbnRUeXBlIHtcclxuIE1TTUwgPSBcImFwcGxpY2F0aW9uL21zbWwreG1sXCJcclxufVxyXG5cclxuaW50ZXJmYWNlIFBlcmZvcm1NZWRpYU9wZXJhdGlvbiB7XHJcbiBDb250ZW50VHlwZSA6IE1lZGlhT3BlcmF0aW9uQ29udGVudFR5cGU7XHJcbiBDb250ZW50IDogc3RyaW5nXHJcbn1cclxuXHJcbmludGVyZmFjZSBNZWRpYU9wZXJhdGlvbkFjdGlvbiB7XHJcbiB0eXBlIDogbnVtYmVyO1xyXG4gbGVnYWN0aW9uIDogTWVkaWFPcGVyYXRpb25BY3Rpb25UeXBlO1xyXG4gcGVyZm9ybU1lZGlhT3BlcmF0aW9uIDogUGVyZm9ybU1lZGlhT3BlcmF0aW9uXHJcbn1cclxuXHJcbmludGVyZmFjZSBBY3Rpb24ge1xyXG4gYWN0aW9uIDogYW55IFxyXG59XHJcblxyXG5cclxuaW50ZXJmYWNlIEhlYWRlciB7XHJcbiBoZWFkZXIgOiBzdHJpbmc7XHJcbiB2YWx1ZSA6IHN0cmluZztcclxufVxyXG5cclxuaW50ZXJmYWNlIFFIZWFkZXIge1xyXG4gUHJpdmFjeSA6IHN0cmluZztcclxuIFJlYXNvbiA6IHN0cmluZyA7XHJcbn1cclxuXHJcbmludGVyZmFjZSBQYXJhbWV0ZXIge1xyXG4gdHJhbnNwb3J0IDogc3RyaW5nO1xyXG4gdXNlciA6IHN0cmluZyA7XHJcbn1cclxuXHJcbmludGVyZmFjZSBVUkkge1xyXG4gc2NoZW1lIDogc3RyaW5nO1xyXG4gYXV0aG9yaXR5IDogc3RyaW5nIDtcclxuIGdyIDogc3RyaW5nIDtcclxuIGhvc3Q6IHN0cmluZyA7XHJcbiBsciA6IHN0cmluZyA7XHJcbiBtYWRkciA6IHN0cmluZyA7XHJcbiBwb3J0IDogbnVtYmVyICA7XHJcbiB1c2VyIDogc3RyaW5nIDtcclxuIHBhcmFtZXRlcnMgOiBbUGFyYW1ldGVyXTtcclxuIHFoZWFkZXIgOiBbUUhlYWRlcl07XHJcbn1cclxuXHJcbmludGVyZmFjZSBBZGRyZXNzIHtcclxuIGRpc3BsYXlOYW1lIDogc3RyaW5nO1xyXG4gdXJpIDogVVJJIFxyXG59XHJcblxyXG5pbnRlcmZhY2UgSGlzdG9yeUluZm8gaW1wbGVtZW50cyBIZWFkZXIge1xyXG4gYWRkcmVzcyA6IEFkZHJlc3M7XHJcbiBpbmRleCA6IHN0cmluZ1xyXG59XHJcblxyXG5pbnRlcmZhY2UgUEFJIGltcGxlbWVudHMgSGVhZGVyICB7XHJcbiBhZGRyZXNzIDogQWRkcmVzc1xyXG59XHJcblxyXG5pbnRlcmZhY2UgRnJvbSBpbXBsZW1lbnRzIEhlYWRlciB7XHJcbiBhZGRyZXNzIDogQWRkcmVzcztcclxuIHRhZyA6IHN0cmluZyA7XHJcbn1cclxuXHJcbmludGVyZmFjZSBUbyBpbXBsZW1lbnRzIEhlYWRlciB7XHJcbiBhZGRyZXNzIDogQWRkcmVzcztcclxuIHRhZyA6IHN0cmluZztcclxufVxyXG5cclxuaW50ZXJmYWNlIFBDViBpbXBsZW1lbnRzIEhlYWRlciB7XHJcbiBpY2lkX2dlbmVyYXRlZF9hdDogc3RyaW5nIDtcclxuIGljaWRfdmFsdWUgOiBzdHJpbmcgO1xyXG4gb2FpZCA6IHN0cmluZztcclxuIHRhaWQgOiBzdHJpbmc7XHJcbiBvc2lkIDogc3RyaW5nO1xyXG4gdHNpZCA6IHN0cmluZztcclxufVxyXG5cclxuaW50ZXJmYWNlIFJlc3VsdENvZGUge1xyXG4gIHJlc3VsdENvZGUgOiBzdHJpbmcgO1xyXG59XHJcblxuOy8vTUFJTkJMT0NLXG47XG5mdW5jdGlvbiBhcm1ldmVudHMoc2Vzc2lvbkRhdGE6YW55LGV2ZW50RGF0YTphbnksbG9jYWxQYXJhbXM6YW55KTogYW55IHtcbiBsZXQgcmV0OiBSZXN1bHRDb2RlIDtcblxuICAgIGxldCBzdGF0dXMyIDogc3RyaW5nO1xuICAgIGxldCBldmVudHMgOiBFdmVudHM7XG4gICAgZXZlbnRzID0gZXZlbnRzIHx8IHt9O1xuICAgIGV2ZW50cy5JbmZvUG9sbEV2ZW50PVwibnVsbFwiO1xuICAgIGV2ZW50cy5TdWNjZXNzUmVzcG9uc2VQb2xsRXZlbnQ9XCJudWxsXCI7XG4gICAgZXZlbnRzLlJhd0NvbnRlbnRQb2xsRXZlbnQ9XCJ0ZXN0L3Rlc3RcIjtcblxuICAgIGxldCBoZWFkZXJWYXJzIDogSGVhZGVyVmFycztcbiAgICBoZWFkZXJWYXJzID0gaGVhZGVyVmFycyB8fCB7fTtcbiAgICBoZWFkZXJWYXJzLmRpc2FibGVTZW5kRGVmYXVsdFJlYXNvbiA9IFwiRGlzYWJsZWRcIjtcbiAgICBoZWFkZXJWYXJzLmRpc2FibGVTZW5kTm9BbnN3ZXJSZWFzb24gPSBcIkRpc2FibGVkXCI7XG4gICAgaGVhZGVyVmFycy5wcml2YXRlU2VydmljZU1vZGUgPSBcImIyYnVhXCI7XG5cbiAgICBsZXQgcmluZ2luZ1RvbmVzIDogW1JpbmdpbmdUb25lXTtcbiAgICByaW5naW5nVG9uZXMgPSByaW5naW5nVG9uZXMgfHwgW107XG4gICAgbGV0IGNvbWYgOiBSaW5naW5nVG9uZTtcbiAgICBjb21mID0gY29tZiB8fCB7fTtcbiAgICBjb21mLmFubm9fbmFtZT1cImNvbWZvcnRcIjtcbiAgICBjb21mLmFubm9fdHlwZT1Bbm5vdHlwZS5DT05ORUNUO1xuICAgIGxldCByaW5nIDogUmluZ2luZ1RvbmU7XG4gICAgcmluZyA9IHJpbmcgfHwge307XG4gICAgcmluZy5hbm5vX25hbWU9XCJyaW5naW5nXCI7XG4gICAgcmluZy5hbm5vX3R5cGU9QW5ub3R5cGUuUklOR0lORztcbiAgICByaW5naW5nVG9uZXMucHVzaChjb21mLCByaW5nKTtcblxuICAgIGxldCBjYXBhYmlsaXRpZXMgPSBzZXNzaW9uRGF0YS5pbkNhcGFiaWxpdGllcztcbiAgICBpZiggY2FwYWJpbGl0aWVzIT1udWxsKXtcbiAgICAgICAgY2FwYWJpbGl0aWVzLnB1c2goQ2FwYWJpbGl0aWVzLlBFTSk7XG4gICAgICAgIGNhcGFiaWxpdGllcy5wdXNoKENhcGFiaWxpdGllcy5GT1JLSU5HKTtcbiAgICAgICAgc2Vzc2lvbkRhdGEub3V0Q2FwYWJpbGl0aWVzID0gSlNPTi5zdHJpbmdpZnkoY2FwYWJpbGl0aWVzKTtcbiAgICB9XG5cbiAgICBzZXNzaW9uRGF0YS5ldmVudHMgPSBKU09OLnN0cmluZ2lmeShldmVudHMpO1xuICAgIHNlc3Npb25EYXRhLmhlYWRlcnJ1bGV2YXI9SlNPTi5zdHJpbmdpZnkoaGVhZGVyVmFycyk7XG4gICAgc2Vzc2lvbkRhdGEuaGVhZGVycnVsZXNzZWxlY3QgPSBcIlNpcFNlcnZpY2VTcGVjaWZpY1J1bGVzU2V0XCI7XG4gICAgc2Vzc2lvbkRhdGEucmluZ2luZ3RvbmVzID0gSlNPTi5zdHJpbmdpZnkocmluZ2luZ1RvbmVzKTtcbiAgICBzZXNzaW9uRGF0YS51cHN0cmVhbUNhcGFiaWxpdGllcz1KU09OLnN0cmluZ2lmeShbXSk7XG5cbiAgICByZXR1cm4gXCJzdWNjZXNzXCI7XG59XG5cblxuZnVuY3Rpb24gcHJlcGFyZUNhbGxQb2xsQWNjZXB0KHNlc3Npb246YW55LGV2ZW50Ok9DQ1BTSVAuT0NDUEV2ZW50LGxvY2FsUGFyYW1zOmFueSkge1xuICAgIGxldCBsb2cgPSBzZXNzaW9uLmxvZztcblxuICAgIHRyeSB7XG4gICAgICAgIGxldCBwb2xsQWN0aW9uIDogQ2FsbFBvbGxBY3Rpb247XG4gICAgICAgIHBvbGxBY3Rpb24gPSBwb2xsQWN0aW9uIHx8IHt9O1xuICAgICAgICBwb2xsQWN0aW9uLnR5cGUgPSBDYWxsUG9sbEFjdGlvblR5cGUuQWNjZXB0O1xuICAgICAgICBzZXNzaW9uLnNlbmRBY3Rpb24gPSBKU09OLnN0cmluZ2lmeShwb2xsQWN0aW9uKTtcblxuICAgICAgICByZXR1cm4gXCJzdWNjZXNzXCI7ICAgICAgICBcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGxvZy5kZWJ1ZyhcInByZXBhcmVDYWxsUG9sbEFjY2VwdCBMb2c6IHt9XCIsIGUpO1xuICAgICAgICByZXR1cm4gXCJlcnJvci5leGNlcHRpb25cIjtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNhbGxlbmRlZChzZXNzaW9uIDogYW55LCBldmVudERhdGEgOiBhbnksIGxvY2FsUGFyYW1zOiBhbnkgKXtcbiAgICBsZXQgcmV0OiBzdHJpbmcgPSBcInN1Y2Nlc3NcIjtcbiAgICAvKiBlbnRlciBoZXJlIHlvdXIgY29kZSAqL1xuXG4gICAgbGV0IGxvZyA6IGFueSA9IHNlc3Npb24ubG9nO1xuICAgIGxldCBjYWxsc3RhdGVvbGQgPSBzZXNzaW9uLmNhbGxzdGF0ZTtcbiAgICBzZXNzaW9uLmNhbGxzdGF0ZSAgPVwiQ0xPU0VEXCI7XG4gICAgc2Vzc2lvbi50aW1lZW5kPSBNYXRoLmZsb29yKG5ldyBEYXRlKCkvMTAwMCk7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHNlc3Npb24udGltZWFuc3dlciE9bnVsbCkge1xuICAgICAgICAgICAgc2Vzc2lvbi5kdXJhdGlvbj0gc2Vzc2lvbi50aW1lZW5kIC0gc2Vzc2lvbi50aW1lYW5zd2VyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2Vzc2lvbi5kdXJhdGlvbj1cIm5vdC1zdGFydGVkXCI7ICAgIFxuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBzZXNzaW9uLmR1cmF0aW9uPVwiZXhjZXB0aW9uXCI7XG4gICAgfVxuXG4gICAgbG9nLmVycm9yKFwiQ2FsbF97fTpTdGF0ZV97fS0+e30rXCIsc2Vzc2lvbltcInRyYWNlLXNrZXlcIl0sY2FsbHN0YXRlb2xkLHNlc3Npb24uY2FsbHN0YXRlKTsgIFxuICAgIHNlc3Npb24ubG9naW5mbyA9IHNlc3Npb24ubG9naW5mbytzZXNzaW9uLmNhbGxzdGF0ZStcIjtkdXJhdGlvbj1cIitzZXNzaW9uLmR1cmF0aW9uK1wiO1wiOyAgIFxuXG4gICAgLy9wcmVwYXJlIHRoZSBMT0cgbGluZSAtIHNlbmQgdG8gdGhlIGxvZ19zaXBkZW1vIHByb2Nlc3MgXG4gICAgbGV0IGxvZ2xpbmUgPSB7fTtcbiAgICB0cnl7XG4gICAgICAgICAgICBsb2dsaW5lLk1TSVNETiA9IHNlc3Npb25bXCJzX25vcm1hbGl6ZWROdW1iZXJcIl07XG4gICAgICAgICAgICBsb2dsaW5lLlNlcnZpY2VTZXNzaW9uSWQgPSBzZXNzaW9uW1wiZnNtLWlkXCJdO1xuICAgICAgICAgICAgbG9nbGluZS5Nc2dUeXBlID0gXCJTSVAuSU5WSVRFXCI7XG4gICAgICAgICAgICBsb2dsaW5lLk1zZ1Nlc3Npb25JZCA9IHNlc3Npb25bXCJmc20taWRcIl07XG4gICAgICAgICAgICBsb2dsaW5lLk1zZ0lkID0gc2Vzc2lvbltcInNfaW5pdGlhbFNJUFwiXVtcIlNJUFwiXVtcIkNhbGwtSURcIl1bXCJ2YWx1ZVwiXTtcbiAgICAgICAgICAgIGxvZ2xpbmUuTXNnRGV0YWlscyA9IFwiXCI7XG4gICAgICAgICAgICBsb2dsaW5lLlNlcnZpY2VkZXRhaWxzID0gXCJcIjtcbiAgICAgICAgICAgIGxvZ2xpbmUuY2FsbEFuc3dlcmVkID0gc2Vzc2lvbi50aW1lYW5zd2VyO1xuICAgICAgICAgICAgbG9nbGluZS5jYWxsRW5kZWQgPSBzZXNzaW9uLnRpbWVlbmQ7XG4gICAgICAgICAgICBsb2dsaW5lLmNhbGxEdXJhdGlvbiA9IHNlc3Npb24uZHVyYXRpb247XG4gICAgICAgICAgICBzZXNzaW9uLmxvZ2luZm89XCJcIjtcblxuICAgICAgICAvL3RpbWVzdGFtcCBhZGRlZCBieSBHVyBiZWZvcmUgaXQgcHV0IGl0IGludG8gdGhlIHF1ZXVlIHRvIFJURVxuICAgICAgICBsb2dsaW5lLkd3RXZlbnRUaW1lID0gc2Vzc2lvbi50aW1lYW5zd2VyOyBcblxuICAgICAgICBsZXQgbm93IDogRGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIGxldCBsb2dEYXRlIDogc3RyaW5nID0gZm9ybWF0RGF0ZShub3cpO1xuICAgICAgICBsZXQgbG9nVGltZSA6IHN0cmluZyA9IGZvcm1hdFRpbWUobm93KTtcbiAgICAgICAgbG9nbGluZS5Mb2dMaW5lVGltZSA9IGxvZ0RhdGUrIFwiLlwiICsgbG9nVGltZSArIFwiLlwiKyhcIjAwMFwiICsgbm93LmdldE1pbGxpc2Vjb25kcygpLnRvU3RyaW5nKCkpLnNsaWNlKC0zKTsgICAgICAgIFxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgbG9nbGluZS5NU0lTRE4gPSBcIlwiO1xuICAgICAgICBsb2dsaW5lLlNlcnZpY2VTZXNzaW9uSWQgPSBcIlwiO1xuICAgICAgICBsb2dsaW5lLk1zZ1R5cGUgPSBcIlwiO1xuICAgICAgICBsb2dsaW5lLk1zZ1Nlc3Npb25JZCA9IFwiXCI7XG4gICAgICAgIGxvZ2xpbmUuTXNnSWQgPSBcIlwiO1xuICAgICAgICBsb2dsaW5lLk1zZ0RldGFpbHMgPSBcIlwiO1xuICAgICAgICBsb2dsaW5lLlNlcnZpY2VkZXRhaWxzID0gXCJlcnJvciBhdCBDQ1JDb250aW51ZSBsb2dsaW5lXCI7XG4gICAgICAgIGxvZ2xpbmUuY2FsbEFuc3dlcmVkID0gXCJuYVwiO1xuICAgICAgICBsb2dsaW5lLmNhbGxFbmRlZCA9IFwibmFcIjtcbiAgICAgICAgbG9nbGluZS5jYWxsRHVyYXRpb24gPSBcIm5hXCI7XG4gICAgICAgIGxvZ2xpbmUuTG9nTGluZVRpbWUgPSBcIlwiO1xuICAgIH07XG4gICAgbG9nbGluZS5UcmFjZUxldmVsID0gc2Vzc2lvbltcImZzbS10cmFjZS1sZXZlbFwiXTsgICAgXG4gICAgc2Vzc2lvbi5sb2dsaW5lPWxvZ2xpbmU7ICAgIFxuICAgIHJldHVybiByZXQ7XG59XG5cblxuZnVuY3Rpb24gZ2V0ZGlzY29ubmVjdHJlYXNvbihzZXNzaW9uOmFueSxldmVudCBhbnksbG9jYWxQYXJhbXM6YW55KSB7XG4gICAgLypcbiAgICBldmVudHMtc3RhY2tcdFx0WzVdXG4gICAgMFx0Olx0c2lwLmNhbGxTdGFydC5OT05FXG4gICAgMTpcdHNpcC5jYWxsUG9sbC5TSVBTdWNjZXNzUmVzcG9uc2VQb2xsRXZlbnRcbiAgICAyXHQ6XHRzaXAuY2FsbEFuc3dlcmVkLlNpcENhbGxMZWdVYUNsaWVudFxuICAgIDNcdDpcdGxlZy5tYXhfY2FsbF9kdXJhdGlvblxuICAgIDRcdDpcdHNpcC5jYWxsU3RhcnQuRElTQ09OTkVDVEVEICAgIFxuICAgICovXG4gICAgbGV0IGxvZyA9IHNlc3Npb24ubG9nO1xuXG4gICAgdHJ5IHtcblxuICAgICAgICAvL3ByZXBhcmUgdGhlIExPRyBsaW5lIC0gc2VuZCB0byB0aGUgbG9nX3NpcGRlbW8gcHJvY2VzcyBcbiAgICAgICAgbGV0IGxvZ2xpbmUgPSB7fTtcbiAgICAgICAgdHJ5e1xuICAgICAgICAgICAgbG9nbGluZVtcIk1TSVNETlwiXSA9IHNlc3Npb25bXCJzX25vcm1hbGl6ZWROdW1iZXJcIl07XG4gICAgICAgICAgICBsb2dsaW5lW1wiU2VydmljZVNlc3Npb25JZFwiXSA9IHNlc3Npb25bXCJmc20taWRcIl07XG4gICAgICAgICAgICBsb2dsaW5lW1wiTXNnVHlwZVwiXSA9IFwiU0lQLklOVklURVwiO1xuICAgICAgICAgICAgbG9nbGluZVtcIk1zZ1Nlc3Npb25JZFwiXSA9IHNlc3Npb25bXCJmc20taWRcIl07XG4gICAgICAgICAgICBsb2dsaW5lW1wiTXNnSWRcIl0gPSBzZXNzaW9uW1wic19pbml0aWFsU0lQXCJdW1wiU0lQXCJdW1wiQ2FsbC1JRFwiXVtcInZhbHVlXCJdO1xuICAgICAgICAgICAgbG9nbGluZVtcIk1zZ0RldGFpbHNcIl0gPSBcIlwiO1xuICAgICAgICAgICAgbG9nbGluZVtcIlNlcnZpY2VkZXRhaWxzXCJdID0gXCJcIjtcbiAgICAgICAgICAgIGxvZ2xpbmVbXCJjYWxsQW5zd2VyZWRcIl0gPSBzZXNzaW9uLnRpbWVhbnN3ZXI7XG4gICAgICAgICAgICBsb2dsaW5lW1wiY2FsbEVuZGVkXCJdID0gc2Vzc2lvbi50aW1lZW5kO1xuICAgICAgICAgICAgbG9nbGluZVtcImNhbGxEdXJhdGlvblwiXSA9IHNlc3Npb24uZHVyYXRpb247XG5cbiAgICAgICAgICAgIGxldCBub3cgOiBEYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIGxldCBsb2dEYXRlIDogc3RyaW5nID0gZm9ybWF0RGF0ZShub3cpO1xuICAgICAgICAgICAgbGV0IGxvZ1RpbWUgOiBzdHJpbmcgPSBmb3JtYXRUaW1lKG5vdyk7XG4gICAgICAgICAgICBsb2dsaW5lW1wiTG9nTGluZVRpbWVcIl0gPSBsb2dEYXRlKyBcIi5cIiArIGxvZ1RpbWUgKyBcIi5cIisoXCIwMDBcIiArIG5vdy5nZXRNaWxsaXNlY29uZHMoKS50b1N0cmluZygpKS5zbGljZSgtMyk7ICAgICAgICBcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgbG9nbGluZVtcIk1TSVNETlwiXSA9IFwiXCI7XG4gICAgICAgICAgICBsb2dsaW5lW1wiU2VydmljZVNlc3Npb25JZFwiXSA9IFwiXCI7XG4gICAgICAgICAgICBsb2dsaW5lW1wiTXNnVHlwZVwiXSA9IFwiXCI7XG4gICAgICAgICAgICBsb2dsaW5lW1wiTXNnU2Vzc2lvbklkXCJdID0gXCJcIjtcbiAgICAgICAgICAgIGxvZ2xpbmVbXCJNc2dJZFwiXSA9IFwiXCI7XG4gICAgICAgICAgICBsb2dsaW5lW1wiTXNnRGV0YWlsc1wiXSA9IFwiXCI7XG4gICAgICAgICAgICBsb2dsaW5lW1wiU2VydmljZWRldGFpbHNcIl0gPSBcImV4Y2VwdGlvblwiICsgZTtcbiAgICAgICAgICAgIGxvZ2xpbmVbXCJjYWxsQW5zd2VyZWRcIl0gPSBcIm5hXCI7XG4gICAgICAgICAgICBsb2dsaW5lW1wiY2FsbEVuZGVkXCJdID0gXCJuYVwiO1xuICAgICAgICAgICAgbG9nbGluZVtcImNhbGxEdXJhdGlvblwiXSA9IFwibmFcIjtcbiAgICAgICAgICAgIGxvZ2xpbmVbXCJMb2dMaW5lVGltZVwiXSA9IFwibmFcIjtcbiAgICAgICAgfTtcbiAgICAgICAgc2Vzc2lvbi5sb2dsaW5lPWxvZ2xpbmU7ICAgICAgICAgIFxuXG4gICAgICAgIGxldCBldmVudHM9ZXZlbnRbXCJldmVudHMtc3RhY2tcIl0ubGVuZ3RoO1xuICAgICAgICBsZXQgaW5kZXg9ZXZlbnRzLTE7XG4gICAgICAgIGlmIChldmVudFtcImV2ZW50cy1zdGFja1wiXVtpbmRleF0gPT09IFwibGVnLnRpbWVvdXRcIikge1xuICAgICAgICAgICAgcmV0dXJuIFwicmVhc29uLnRpbWVvdXRcIjtcbiAgICAgICAgfSBlbHNlIGlmIChldmVudFtcImV2ZW50cy1zdGFja1wiXVtpbmRleF0gPT09IFwibGVnLm1heF9jYWxsX2R1cmF0aW9uXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBcInJlYXNvbi5tYXhfY2FsbF9kdXJhdGlvblwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFwicmVhc29uLlwiICsgZXZlbnRbXCJldmVudHMtc3RhY2tcIl1baW5kZXhdOyAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBsb2cuZGVidWcoXCJnZXRkaXNjb25uZWN0cmVhc29uIExvZzoge31cIiwgZSk7XG4gICAgICAgIHJldHVybiBcInJlYXNvbi5leGNlcHRpb25cIjtcbiAgICB9XG59XG5cblxuXG5cbmZ1bmN0aW9uIHNldFByZWNvbmRpdGlvbkZvcndhZENhbGxiMmIoc2Vzc2lvbjphbnksZXZlbnQ6YW55LGxvY2FsUGFyYW1zOmFueSk6IFJlc3VsdENvZGUge1xuXG4gICAgbGV0IHJldDogUmVzdWx0Q29kZSA7XG4gICAgcmV0ID0gcmV0IHx8IHt9O1xuICAgIHJldC5yZXN1bHRDb2RlPVwic3VjY2Vzc1wiO1xuICAgIFxuICAgIGxldCBldmVudHMgOiBFdmVudHM7XG4gICAgZXZlbnRzID0gZXZlbnRzIHx8IHt9O1xuXG4gICAgXG4gICAgZXZlbnRzLlNJUFBvbGxFdmVudD1cIm51bGxcIjtcbiAgICAvL3R5cG9zIGluIHRoZSBiZWxvd1xuICAgIGV2ZW50cy5TSVAxOHhJbmZvcm1hdG9pbmFsRXZlbnQ9XCJudWxsXCI7XG4gICAgZXZlbnRzLlNkcEFuc3dlckV2ZW50PVwibnVsbFwiO1xuICAgIGV2ZW50cy5TSVBSZUlOVklURUV2ZW50PVwibnVsbFwiO1xuICAgIGV2ZW50cy5TRFBPZmZlclBvbGxFdmVudD1cIm51bGxcIjtcbiAgICBldmVudHMuU2lwUmluZ2luZ1BvbGxFdmVudD1cIm51bGxcIjtcbiAgICBldmVudHMuU2lwU2RwT2ZmZXJQb2xsRXZlbnQ9XCJudWxsXCI7XG4gICAgZXZlbnRzLlNJUGVnQ2xvc2VkRXZlbnQ9XCJudWxsXCI7XG4gICAgXG4gICAgZXZlbnRzLkNhbGxCZWluZ0ZvcndhcmRlZFBvbGxFdmVudD1cIm51bGxcIjtcbiAgICBldmVudHMuU0lQU2RwQW5zd2VyUG9sbEV2ZW50PVwibnVsbFwiO1xuXG4gICAgZXZlbnRzLlJpbmdpbmdQb2xsRXZlbnQ9XCJudWxsXCI7XG5cblxuXG5cbiAgICBldmVudHMuU0lQMTh4QW5zd2VyRXZlbnQ9XCJudWxsXCI7XG4gICAgZXZlbnRzLlNJUFJpbmdpbmdQb2xsRXZlbnQ9XCJudWxsXCI7XG4gICAgLy9uZWVkcyBhIGhhbmRsZVxuICAgIGV2ZW50cy5JbmZvUG9sbEV2ZW50PVwibnVsbFwiO1xuICAgIGV2ZW50cy5TdWNjZXNzUmVzcG9uc2VQb2xsRXZlbnQ9XCJudWxsXCI7XG4gICAgZXZlbnRzLlJhd0NvbnRlbnRQb2xsRXZlbnQ9XCJ0ZXN0L3Rlc3RcIjtcbiAgICBzZXNzaW9uLmV2ZW50cyA9IEpTT04uc3RyaW5naWZ5KGV2ZW50cyk7ICBcblxuICAgIC8vbGV0IHVuc3ViID0ge1wiSW5mb1BvbGxFdmVudFwiOlwiXCIsIFwiU3VjY2Vzc1Jlc3BvbnNlUG9sbEV2ZW50XCI6XCJcIiwgXCJTSVBSaW5naW5nUG9sbEV2ZW50XCI6XCJcIiwgXCJSYXdDb250ZW50UG9sbEV2ZW50XCI6XCJcIn07XG4gICAgLy9zZXNzaW9uLnVuc3Vic2NyaWJlRXZlbnRzPUpTT04uc3RyaW5naWZ5KHVuc3ViKTtcbiAgICAvL2xldCB1bnN1YiA9IHtcIlNJUDE4eEFuc3dlckV2ZW50XCI6XCJcIn07XG4gICAgLy9zZXNzaW9uLnVuc3Vic2NyaWJlRXZlbnRzPUpTT04uc3RyaW5naWZ5KHVuc3ViKTtcblxuICAgIC8vU2V0IGhlYWRlcnMgZm9yIG91dGdvaW5nIG1lc3NhZ2VcbiAgICBsZXQgaGVhZGVyVmFycyA6IEhlYWRlclZhcnM7XG4gICAgaGVhZGVyVmFycyA9IGhlYWRlclZhcnMgfHwge307XG4gICAgaGVhZGVyVmFycy5kaXNhYmxlU2VuZERlZmF1bHRSZWFzb24gPSBcIkRpc2FibGVkXCI7XG4gICAgaGVhZGVyVmFycy5kaXNhYmxlU2VuZE5vQW5zd2VyUmVhc29uID0gXCJEaXNhYmxlZFwiO1xuICAgIC8vU3BlY2lmeSB0aGUgTW9kZSBmb3IgdGhlIFNORiwgc28gU05GIGFkZHMgaXRzZWxmIHRvIFJlY29yZC1Sb3V0ZSAobmVlZGVkIGZvciBiMmJ1YSkgb3Igbm90IChwcm94eSlcbiAgICAvL25vdCBuZWVkZWQgaGVyZSAtIHRoaXMgaXMgaW4gU05GIHRvIGFwcGx5IHNvbWUgcnVsZXMgZm9yIGIyYlxuICAgIC8vaGVhZGVyVmFycy5wcml2YXRlU2VydmljZU1vZGUgPSBcImIyYnVhXCI7XG4gICAgXG4gICAgc2Vzc2lvbi5oZWFkZXJydWxldmFyPUpTT04uc3RyaW5naWZ5KGhlYWRlclZhcnMpO1xuICAgIHNlc3Npb24uaGVhZGVycnVsZXNzZWxlY3QgPSBcIlNpcFNlcnZpY2VTcGVjaWZpY1J1bGVzU2V0XCI7XG5cblxuICAgIFxuICAgIC8qXG4gICAgLy90aGlzIHJlcXVpcmVzIGEgU3VwcG9ydGVkOiAxMDBSZWwgaW4gdGhlIGluY29taW5nIHJlcXVlc3QgYW5kIHNlbmRzIGEgMTgzIHRvIEEgd2l0aCBSZXF1aXJlOiAxMDBSZWwgXG4gICAgbGV0IGNhcGFiaWxpdGllcyA6IGFueVtdID0gW107XG4gICAgY2FwYWJpbGl0aWVzLnB1c2goQ2FwYWJpbGl0aWVzLlBFTSk7XG4gICAgY2FwYWJpbGl0aWVzLnB1c2goQ2FwYWJpbGl0aWVzLlJFTDFYWCk7XG4gICAgY2FwYWJpbGl0aWVzLnB1c2goQ2FwYWJpbGl0aWVzLlVQREFURSk7XG4gICAgY2FwYWJpbGl0aWVzLnB1c2goQ2FwYWJpbGl0aWVzLkZPUktJTkcpO1xuICAgIHNlc3Npb24udXBzdHJlYW1DYXBhYmlsaXRpZXMgPSBKU09OLnN0cmluZ2lmeShjYXBhYmlsaXRpZXMpO1xuICAgICovXG5cbiAgICAvKlxuICAgIGxldCBjYXBhYmlsaXRpZXMgPSBzZXNzaW9uLnNfSW5pdGlhbENhcGFiaWxpdGllcztcbiAgICBpZiggY2FwYWJpbGl0aWVzIT1udWxsKXtcbiAgICAgICAgY2FwYWJpbGl0aWVzLnB1c2goQ2FwYWJpbGl0aWVzLlBFTSk7XG4gICAgICAgIGNhcGFiaWxpdGllcy5wdXNoKENhcGFiaWxpdGllcy5GT1JLSU5HKTtcbiAgICAgICAgc2Vzc2lvbi5vdXRDYXBhYmlsaXRpZXMgPSBKU09OLnN0cmluZ2lmeShjYXBhYmlsaXRpZXMpO1xuICAgIH1cbiAgICAqL1xuXG4gICAgLy8gc2Vzc2lvbi5yaW5naW5ndG9uZXMgPSBKU09OLnN0cmluZ2lmeShyaW5naW5nVG9uZXMpO1xuXG4gICAgcmV0dXJuIHJldDtcbn1cblxuXG5mdW5jdGlvbiBjaGVja1NEUEFuc3dlckFjdGlvbihzZXNzaW9uOmFueSxldmVudDphbnksbG9jYWxQYXJhbXM6YW55KSAge1xuICAgIC8vZXZlbnREYXRhIGlzIG5vdyBsYXN0IG1lc3NnYWVcbiAgICBsZXQgZXZlbnREYXRhID0gbG9jYWxQYXJhbXMubWVzc2FnZTtcblxuICAgIC8vYWRkIHRoZSBwb2xsIGFjdGlvbnMgKGFjY2VwdCwgZm9yd2FyZCwgcmVqZWN0KSB0byB0aGUgY2FsbHBvbGwgYW5zZXdyIGV2ZW50XG4gICAgLy9JbmZvcm1hdGlvbmFsRXZlbnQgaXMgYSBoaWdoLWxldmVsIGludGVyZmFjZSB0eXBpY2FsbHkgc3BlY2lhbGl6ZWQgZm9yIGNvbmNyZXRlIGV2ZW50cy4gVGhlIENhbGxVc2VyIGlzIG5vdCByZXF1aXJlZCB0byB0YWtlIGFueSBhY3Rpb24gZm9yIHRoaXMgZXZlbnQsIHRoZXNlIGFyZSBwdXJlbHkgaW5mb3JtYXRpb25hbC5cbiAgICAvL1BvbGxFdmVudCBpcyBhbiBldmVudCBvbiB3aGljaCB0aGUgQ2FsbFVzZXIgaXMgZXhwZWN0ZWQgdG8gdGFrZSBhbiBhY3Rpb24gdXBvbiByZWNlaXZpbmcgdGhlIGV2ZW50LiBUaGUgYWN0aW9uIGlzIHVzdWFsbHkgYnkgaW52b2tpbmcgdGhlIFBvbGxFdmVudCBtZXRob2RzIGFjY2VwdCwgcmVqZWN0IG9yIGZvcndhcmQuXG4gICAgbGV0IHBvbGxBY3Rpb24gOiBDYWxsUG9sbEFjdGlvbjtcbiAgICBwb2xsQWN0aW9uID0gcG9sbEFjdGlvbiB8fCB7fTtcbiAgICAvL3BvbGxBY3Rpb24udHlwZSA9IENhbGxQb2xsQWN0aW9uVHlwZS5BY2NlcHQ7XG4gICAgcG9sbEFjdGlvbi50eXBlID0gQ2FsbFBvbGxBY3Rpb25UeXBlLlJlamVjdDtcbiAgICBzZXNzaW9uLnNlbmRBY3Rpb24gPSBKU09OLnN0cmluZ2lmeShwb2xsQWN0aW9uKTtcblxuICAgIHJldHVybiB0cnVlO1xufVxuXG5cbmZ1bmN0aW9uIG1vZGlmeWRpc3Bvc2l0aW9uKHNlc3Npb246YW55LGV2ZW50OmFueSxsb2NhbFBhcmFtczphbnkpIHtcbiAgICBsZXQgaW5pdGlhbE1zZyA9IGxvY2FsUGFyYW1zLm1lc3NhZ2U7XG4gICAgaWYgKGluaXRpYWxNc2dbXCJTSVBcIl1bXCJjYXBhYmlsaXRpZXNcIl0gIT0gbnVsbCkge1xuICAgICAgICBpZiAoaW5pdGlhbE1zZ1tcIlNJUFwiXVtcImNhcGFiaWxpdGllc1wiXS5pbmRleE9mKENhcGFiaWxpdGllcy5GT1JLSU5HKSA+IC0xKSB7XG4gICAgICAgICAgICAvL2l0IGlzIHByZXNlbnQuIG1lYW5zIHRoZSBTSVAgaGVhZGVyIFwiUmVxdWVzdC1EaXNwb3NpdGlvbjogbm8tZm9ya1wiIGlzIE5PVCBwcmVzZW50LiBUaGlzIGluc3RydWN0cyBUQVMgdG8gbm90IHNlbmQgMTgzIGJlZm9yZSBmb3J3YXJkaW5nIHRoZSBJTlZJVEVcbiAgICAgICAgICAgIGxldCBjYXBhYmlsaXRpZXMgOiBhbnlbXSA9IFtdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL3RoZSBiZWxvdyBjcmVhdGVzIGV4Y2VwdGlvbiBcbiAgICAgICAgICAgIC8vY2FwYWJpbGl0aWVzID0gaW5pdGlhbE1zZy5TSVAuY2FwYWJpbGl0aWVzO1xuICAgICAgICAgICAgLy9jYXBhYmlsaXRpZXMucHVzaChDYXBhYmlsaXRpZXMuRk9SS0lORyk7XG4gICAgICAgICAgICAvL3RoaXMgd291bGQgYmUgcmVtb3ZlXG4gICAgICAgICAgICAvL2xldCBpbmRleD0gaW5pdGlhbE1zZ1tcIlNJUFwiXVtcImNhcGFiaWxpdGllc1wiXS5pbmRleE9mKENhcGFiaWxpdGllcy5GT1JLSU5HKTtcbiAgICAgICAgICAgIC8vaW5pdGlhbE1zZ1tcIlNJUFwiXVtcImNhcGFiaWxpdGllc1wiXS5zcGxpY2UoaW5kZXgsIDEpOyAvLyAybmQgcGFyYW1ldGVyIG1lYW5zIHJlbW92ZSBvbmUgaXRlbSBvbmx5XG4gICAgICAgICAgICBzZXNzaW9uLnVwc3RyZWFtQ2FwYWJpbGl0aWVzID0gSlNPTi5zdHJpbmdpZnkoY2FwYWJpbGl0aWVzKTsgICAgXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaW5pdGlhbE1zZ1tcIlNJUFwiXVtcIlItVVJJXCJdW1widmFsdWVcIl0gPT0gXCJzaXA6OTcyMDAwMDE5QDE3Mi4zMS4xMS4xNDI6NTA2MlwiKSB7XG4gICAgICAgIHNlc3Npb24uZGVzdGxpc3QgPSBbXCJzaXA6OTkwMDAwNEAxNzIuMzEuMTEuMTQyOjUwNjJcIiwgXCJzaXA6OTkwMDA5OUAxNzIuMzEuMTEuMTQyOjUwNjJcIl07XG4gICAgfVxuICAgIFxuXG4gICAgcmV0dXJuIHRydWU7XG59XG5cblxuZnVuY3Rpb24gc2V0ZGVzdGluYXRpb25saXN0KHNlc3Npb246YW55LGV2ZW50OmFueSxsb2NhbFBhcmFtczphbnkpIHtcbiAgICBsZXQgaW5pdGlhbE1zZyA9IGxvY2FsUGFyYW1zLm1lc3NhZ2U7XG5cbiAgICBpZiAoaW5pdGlhbE1zZ1tcIlNJUFwiXVtcIlItVVJJXCJdW1widmFsdWVcIl0gPT0gXCJzaXA6OTcyMDAwMDE5QDE3Mi4zMS4xMS4xNDI6NTA2MlwiKSB7XG4gICAgICAgIHNlc3Npb24uZGVzdGxpc3QgPSBbXCJzaXA6OTkwMDAxMUAxNzIuMzEuMTEuMTQyOjUwNjJcIiwgXCJzaXA6OTkwMDAyMkAxNzIuMzEuMTEuMTQyOjUwNjRcIiwgXCJzaXA6OTkwMDAzM0AxNzIuMzEuMTEuMTQyOjUwNjVcIl07XG4gICAgfVxuICAgIFxuICAgIHJldHVybiB0cnVlO1xufVxuIl19