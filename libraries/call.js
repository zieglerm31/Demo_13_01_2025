"use strict";
var Capabilities;
(function (Capabilities) {
    Capabilities["REL1XX"] = "REL1XX";
    Capabilities["FORKING"] = "FORKING";
    Capabilities["PRECONDITION"] = "PRECONDITION";
    Capabilities["PEM"] = "PEM";
    Capabilities["UPDATE"] = "UPDATE";
})(Capabilities || (Capabilities = {}));
var Annotype;
(function (Annotype) {
    Annotype["CONNECT"] = "CONNECT";
    Annotype["RINGING"] = "RING";
})(Annotype || (Annotype = {}));
var CallPollActionType;
(function (CallPollActionType) {
    CallPollActionType["Accept"] = "accept";
    CallPollActionType["Forward"] = "forward";
    CallPollActionType["Reject"] = "reject";
})(CallPollActionType || (CallPollActionType = {}));
var CallStartActionType;
(function (CallStartActionType) {
    CallStartActionType[CallStartActionType["Abort"] = 0] = "Abort";
    CallStartActionType[CallStartActionType["Forward"] = 1] = "Forward";
    CallStartActionType[CallStartActionType["RejectMrf"] = 2] = "RejectMrf";
})(CallStartActionType || (CallStartActionType = {}));
var MediaOperationActionType;
(function (MediaOperationActionType) {
    MediaOperationActionType["PerformMediaOperation"] = "performMediaOperation";
})(MediaOperationActionType || (MediaOperationActionType = {}));
var MediaOperationContentType;
(function (MediaOperationContentType) {
    MediaOperationContentType["MSML"] = "application/msml+xml";
})(MediaOperationContentType || (MediaOperationContentType = {}));
;
;
function armevents(sessionData, eventData, localParams) {
    var ret;
    var status2;
    var events;
    events = events || {};
    events.InfoPollEvent = "null";
    events.SuccessResponsePollEvent = "null";
    events.RawContentPollEvent = "test/test";
    var headerVars;
    headerVars = headerVars || {};
    headerVars.disableSendDefaultReason = "Disabled";
    headerVars.disableSendNoAnswerReason = "Disabled";
    headerVars.privateServiceMode = "b2bua";
    var ringingTones;
    ringingTones = ringingTones || [];
    var comf;
    comf = comf || {};
    comf.anno_name = "comfort";
    comf.anno_type = Annotype.CONNECT;
    var ring;
    ring = ring || {};
    ring.anno_name = "ringing";
    ring.anno_type = Annotype.RINGING;
    ringingTones.push(comf, ring);
    var capabilities = sessionData.inCapabilities;
    if (capabilities != null) {
        capabilities.push(Capabilities.PEM);
        capabilities.push(Capabilities.FORKING);
        sessionData.outCapabilities = JSON.stringify(capabilities);
    }
    sessionData.events = JSON.stringify(events);
    sessionData.headerrulevar = JSON.stringify(headerVars);
    sessionData.headerrulesselect = "SipServiceSpecificRulesSet";
    sessionData.ringingtones = JSON.stringify(ringingTones);
    sessionData.upstreamCapabilities = JSON.stringify([]);
    return "success";
}
function prepareCallPollAccept(session, event, localParams) {
    var log = session.log;
    try {
        var pollAction = void 0;
        pollAction = pollAction || {};
        pollAction.type = CallPollActionType.Accept;
        session.sendAction = JSON.stringify(pollAction);
        return "success";
    }
    catch (e) {
        log.debug("prepareCallPollAccept Log: {}", e);
        return "error.exception";
    }
}
function callended(session, eventData, localParams) {
    var ret = "success";
    var log = session.log;
    var callstateold = session.callstate;
    session.callstate = "CLOSED";
    session.timeend = Math.floor(new Date() / 1000);
    try {
        if (session.timeanswer != null) {
            session.duration = session.timeend - session.timeanswer;
        }
        else {
            session.duration = "not-started";
        }
    }
    catch (e) {
        session.duration = "exception";
    }
    log.error("Call_{}:State_{}->{}+", session["trace-skey"], callstateold, session.callstate);
    session.loginfo = session.loginfo + session.callstate + ";duration=" + session.duration + ";";
    var logline = {};
    try {
        logline.MSISDN = session["s_normalizedNumber"];
        logline.ServiceSessionId = session["fsm-id"];
        logline.MsgType = "SIP.INVITE";
        logline.MsgSessionId = session["fsm-id"];
        logline.MsgId = session["s_initialSIP"]["SIP"]["Call-ID"]["value"];
        ";;
        logline.MsgDetails = "";
        logline.Servicedetails = "";
        logline.callAnswered = session.timeanswer;
        logline.callEnded = session.timeend;
        logline.callDuration = session.duration;
        session.loginfo = "";
        logline.GwEventTime = session.timeanswer;
        var now = new Date();
        var logDate = formatDate(now);
        var logTime = formatTime(now);
        logline.LogLineTime = logDate + "." + logTime + "." + ("000" + now.getMilliseconds().toString()).slice(-3);
    }
    catch (e) {
        logline.MSISDN = "";
        logline.ServiceSessionId = "";
        logline.MsgType = "";
        logline.MsgSessionId = "";
        logline.MsgId = "";
        logline.MsgDetails = "";
        logline.Servicedetails = "error at CCRContinue logline";
        logline.callAnswered = "na";
        logline.callEnded = "na";
        logline.callDuration = "na";
        logline.LogLineTime = "";
    }
    ;
    logline.TraceLevel = session["fsm-trace-level"];
    session.logline = logline;
    return ret;
}
function getdisconnectreason(session, event, any, localParams) {
    var log = session.log;
    try {
        var logline = {};
        try {
            logline.MSISDN = session["s_normalizedNumber"];
            logline.ServiceSessionId = session["fsm-id"];
            logline.MsgType = "SIP.INVITE";
            logline.MsgSessionId = session["fsm-id"];
            logline.MsgId = session["s_initialSIP"]["SIP"]["Call-ID"]["value"];
            ";;
            logline.MsgDetails = "";
            logline.Servicedetails = "";
            logline.callAnswered = session.timeanswer;
            logline.callEnded = session.timeend;
            logline.callDuration = session.duration;
            session.loginfo = "";
            logline.GwEventTime = session.timeanswer;
            var now = new Date();
            var logDate = formatDate(now);
            var logTime = formatTime(now);
            logline.LogLineTime = logDate + "." + logTime + "." + ("000" + now.getMilliseconds().toString()).slice(-3);
        }
        catch (e) {
            logline.MSISDN = "";
            logline.ServiceSessionId = "";
            logline.MsgType = "";
            logline.MsgSessionId = "";
            logline.MsgId = "";
            logline.MsgDetails = "";
            logline.Servicedetails = "error at CCRContinue logline";
            logline.callAnswered = "na";
            logline.callEnded = "na";
            logline.callDuration = "na";
            logline.LogLineTime = "";
        }
        ;
        logline.TraceLevel = session["fsm-trace-level"];
        session.logline = logline;
        var events = event["events-stack"].length;
        var index = events - 1;
        if (event["events-stack"][index] === "leg.timeout") {
            return "reason.timeout";
        }
        else if (event["events-stack"][index] === "leg.max_call_duration") {
            return "reason.max_call_duration";
        }
        else {
            return "reason." + event["events-stack"][index];
        }
    }
    catch (e) {
        log.debug("getdisconnectreason Log: {}", e);
        return "reason.exception";
    }
}
function setPreconditionForwadCallb2b(session, event, localParams) {
    var ret;
    ret = ret || {};
    ret.resultCode = "success";
    var events;
    events = events || {};
    events.SIPPollEvent = "null";
    events.SIP18xInformatoinalEvent = "null";
    events.SdpAnswerEvent = "null";
    events.SIPReINVITEEvent = "null";
    events.SDPOfferPollEvent = "null";
    events.SipRingingPollEvent = "null";
    events.SipSdpOfferPollEvent = "null";
    events.SIPegClosedEvent = "null";
    events.CallBeingForwardedPollEvent = "null";
    events.SIPSdpAnswerPollEvent = "null";
    events.RingingPollEvent = "null";
    events.SIP18xAnswerEvent = "null";
    events.SIPRingingPollEvent = "null";
    events.InfoPollEvent = "null";
    events.SuccessResponsePollEvent = "null";
    events.RawContentPollEvent = "test/test";
    session.events = JSON.stringify(events);
    var headerVars;
    headerVars = headerVars || {};
    headerVars.disableSendDefaultReason = "Disabled";
    headerVars.disableSendNoAnswerReason = "Disabled";
    session.headerrulevar = JSON.stringify(headerVars);
    session.headerrulesselect = "SipServiceSpecificRulesSet";
    return ret;
}
function checkSDPAnswerAction(session, event, localParams) {
    var eventData = localParams.message;
    var pollAction;
    pollAction = pollAction || {};
    pollAction.type = CallPollActionType.Reject;
    session.sendAction = JSON.stringify(pollAction);
    return true;
}
function modifydisposition(session, event, localParams) {
    var initialMsg = localParams.message;
    if (initialMsg["SIP"]["capabilities"] != null) {
        if (initialMsg["SIP"]["capabilities"].indexOf(Capabilities.FORKING) > -1) {
            var capabilities = [];
            session.upstreamCapabilities = JSON.stringify(capabilities);
        }
    }
    if (initialMsg["SIP"]["R-URI"]["value"] == "sip:972000019@172.31.11.142:5062") {
        session.destlist = ["sip:9900004@172.31.11.142:5062", "sip:9900099@172.31.11.142:5062"];
    }
    return true;
}
function setdestinationlist(session, event, localParams) {
    var initialMsg = localParams.message;
    if (initialMsg["SIP"]["R-URI"]["value"] == "sip:972000019@172.31.11.142:5062") {
        session.destlist = ["sip:9900011@172.31.11.142:5062", "sip:9900022@172.31.11.142:5064", "sip:9900033@172.31.11.142:5065"];
    }
    return true;
}
//# sourceMappingURL=data:application/json;base64,